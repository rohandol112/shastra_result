submission_id,username,problem_name,language,code,page,url
1387833275,harishpandey1704,unknown,unknown,"1
def max_abs_diff(t, cases):
2
    res = []
3
4
    for case in cases:
5
        n, arr = case
6
7
        pref = [0] * n
8
        pref[0] = arr[0]
9
10
        for i in range(1, n):
11
            pref[i] = pref[i - 1] + arr[i]
12
13
        total = pref[-1]
14
        max_d = 0
15
16
        for i in range(n - 1):
17
            left = pref[i]
18
            right = total - left
19
            max_d = max(max_d, abs(left - right))
20
21
        res.append(max_d)
22
23
    return res
24
25
def main():
26
    t = int(input())
27
    cases = []
28
29
    for _ in range(t):
30
        n = int(input())
31
        arr = list(map(int, input().split()))
32
        cases.append((n, arr))
33
34
    results = max_abs_diff(t, cases)
35
36
    for r in results:
37
        print(r)
38
39
if __name__ == ""__main__"":
40
    main()
41",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833275
1387833277,h1032220835,unknown,unknown,"1
def calculate_results(T, test_cases):
2
3
    results = []
4
5
    6
7
    for t in range(T):
8
9
        n = test_cases[t][0]
10
11
        values = test_cases[t][1]
12
13
        14
15
        # Create prefix and suffix arrays
16
17
        prefix = [1] * n
18
19
        suffix = [1] * n
20
21
        22
23
        # Compute prefix product
24
25
        for i in range(1, n):
26
27
            prefix[i] = prefix[i - 1] * values[i - 1]
28
29
        30
31
        # Compute suffix product
32
33
        for i in range(n - 2, -1, -1):
34
35
            suffix[i] = suffix[i + 1] * values[i + 1]
36
37
        38
39
        # Compute result array
40
41
        result = [prefix[i] * suffix[i] for i in range(n)]
42
43
        results.append(result)
44
45
    46
47
    return results
48
49
# Input reading
50
51
T = int(input())
52
53
test_cases = []
54
55
for _ in range(T):
56
57
    n = int(input())
58
59
    values = list(map(int, input().split()))
60
61
    test_cases.append((n, values))
62
63
# Process and output results
64
65
output = calculate_results(T, test_cases)
66
67
for res in output:
68
69
    print("" "".join(map(str, res)))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833277
1387833278,sohamkadam0012,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <stdbool.h>
4
5
// Function to calculate the minimum operations or return -1 if equalization is impossible
6
int minOperationsToEqualize(int *energy, int n, int k) {
7
    long long totalEnergy = 0;
8
9
    // Calculate total energy
10
    for (int i = 0; i < n; i++) {
11
        totalEnergy += energy[i];
12
    }
13
14
    // Check if total energy is divisible by N
15
    if (totalEnergy % n != 0) {
16
        return -1; // Equalization is impossible
17
    }
18
19
    long long targetEnergy = totalEnergy / n; // Target energy for each station
20
    long long operations = 0;
21
    long long surplus = 0; // Tracks energy surplus or deficit in the cycle
22
23
    // Traverse each station and calculate surplus or deficit
24
    for (int i = 0; i < n; i++) {
25
        surplus += energy[i] - targetEnergy;
26
27
        // Check if surplus can be transferred in multiples of K
28
        if (abs(surplus) % k != 0) {
29
            return -1; // Equalization not possible
30
        }
31
32
        // Count operations needed to balance this station
33
        operations += abs(surplus / k);
34
    }
35
36
    return operations;
37
}
38
39
int main() {
40
    int T;
41
    scanf(""%d"", &T);
42
43
    while (T--) {
44
        int n, k;
45
        scanf(""%d %d"", &n, &k);
46
47
        int *energy = (int *)malloc(n * sizeof(int));
48
        for (int i = 0; i < n; i++) {
49
            scanf(""%d"", &energy[i]);
50
        }
51
52
        int result = minOperationsToEqualize(energy, n, k);
53
        printf(""%d\n"", result);
54
55
        free(energy);
56
    }
57
58
    return 0;
59
}
60",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833278
1387833270,h1032221497,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
4
    for _ in range(t):
5
        n = test_cases[_][0]
6
        nums = test_cases[_][1]
7
8
        # Prefix and suffix sums
9
        prefix_sum = [0] * n
10
        suffix_sum = [0] * n
11
12
        # Compute prefix sum
13
        prefix_sum[0] = nums[0]
14
        for i in range(1, n):
15
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
16
17
        # Compute suffix sum
18
        suffix_sum[n - 1] = nums[n - 1]
19
        for i in range(n - 2, -1, -1):
20
            suffix_sum[i] = suffix_sum[i + 1] + nums[i]
21
22
        # Calculate the maximum absolute difference
23
        max_diff = 0
24
        for i in range(n - 1):
25
            left_sum = prefix_sum[i]
26
            right_sum = suffix_sum[i + 1]
27
            max_diff = max(max_diff, abs(left_sum - right_sum))
28
29
        results.append(max_diff)
30
31
    return results
32
33
# Input reading
34
t = int(input())
35
test_cases = []
36
for _ in range(t):
37
    n = int(input())
38
    nums = list(map(int, input().split()))
39
    test_cases.append((n, nums))
40
41
# Solve and output results
42
results = max_absolute_difference(t, test_cases)
43
for result in results:
44
    print(result)",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833270
1387833272,shikharguptaoct1,unknown,unknown,"1
def compute_product_array(n, values):
2
    prefix = [1] * n
3
    for i in range(1, n):
4
        prefix[i] = prefix[i - 1] * values[i - 1]
5
    6
    suffix = [1] * n
7
    for i in range(n - 2, -1, -1):
8
        suffix[i] = suffix[i + 1] * values[i + 1]
9
    10
    result = [prefix[i] * suffix[i] for i in range(n)]
11
    12
    return result
13
14
T = int(input().strip()) 
15
for _ in range(T):
16
    n = int(input().strip()) 
17
    values = list(map(int, input().strip().split()))
18
    print("" "".join(map(str, compute_product_array(n, values))))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833272
1387833274,h1032231265,unknown,unknown,"1
def solve_test_cases():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().strip().split(""\n"")
5
6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
10
    results = []
11
12
    for _ in range(T):
13
        # Read N and K
14
        N, K = map(int, data[idx].split())
15
        idx += 1
16
        # Read energy levels
17
        energy = list(map(int, data[idx].split()))
18
        idx += 1
19
20
        total_energy = sum(energy)
21
22
        # If the total energy is not divisible by N, it's impossible
23
        if total_energy % N != 0:
24
            results.append(""-1"")
25
            continue
26
27
        target_energy = total_energy // N
28
        operations = 0
29
        balance = 0
30
        possible = True
31
32
        # Check and calculate the number of operations required
33
        for e in energy:
34
            diff = e - target_energy
35
            balance += diff
36
            if balance % K != 0:
37
                possible = False
38
                break
39
            operations += abs(balance // K)
40
41
        results.append(str(operations) if possible else ""-1"")
42
43
    # Output all results
44
    sys.stdout.write(""\n"".join(results) + ""\n"")
45
46
if __name__ == ""__main__"":
47
    solve_test_cases()",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833274
1387833267,adityatripathi27,unknown,unknown,"1
def solve():
2
    t = int(input())  # Number of test cases
3
    for _ in range(t):
4
        n = int(input())  # Size of the array
5
        nums = list(map(int, input().split()))  # Array of integers
6
        7
        # Compute the total sum of the array
8
        total_sum = sum(nums)
9
        10
        # Initialize the prefix sum
11
        prefix_sum = 0
12
        max_diff = 0
13
        14
        # Iterate over all possible partitions (from 1 to n-1)
15
        for i in range(n - 1):
16
            prefix_sum += nums[i]
17
            # Calculate the absolute difference between the two subarrays
18
            max_diff = max(max_diff, abs(prefix_sum - (total_sum - prefix_sum)))
19
        20
        print(max_diff)
21
22
# Run the function
23
solve()
24",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833267
1387833268,h1032220480,unknown,unknown,"1
def calculate_product_exclude_self(test_cases):
2
    results = []
3
    for values in test_cases:
4
        n = len(values)
5
        # Initialize prefix and suffix arrays
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result array
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    return results
24
25
# Input handling
26
t = int(input())
27
test_cases = []
28
for _ in range(t):
29
    n = int(input())
30
    values = list(map(int, input().split()))
31
    test_cases.append(values)
32
33
# Processing and Output
34
results = calculate_product_exclude_self(test_cases)
35
for res in results:
36
    print("" "".join(map(str, res)))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833268
1387833269,adiv40816,unknown,unknown,"1
import sys
2
3
def min_operations_to_equalize(n, k, energy):
4
    total_energy = sum(energy)
5
    6
    # If total energy is not divisible by n, it's impossible to equalize
7
    if total_energy % n != 0:
8
        return -1
9
    10
    target = total_energy // n  # Each station should have this much energy
11
    operations = 0
12
    13
    for i in range(n):
14
        diff = energy[i] - target
15
        # If diff is not a multiple of k, we cannot transfer it
16
        if diff % k != 0:
17
            return -1
18
        operations += abs(diff) // k
19
    20
    return operations // 2  # Each transfer is counted twice
21
22
def main():
23
    t = int(sys.stdin.readline().strip())
24
    results = []
25
    for _ in range(t):
26
        n, k = map(int, sys.stdin.readline().strip().split())
27
        energy = list(map(int, sys.stdin.readline().strip().split()))
28
        results.append(str(min_operations_to_equalize(n, k, energy)))
29
    30
    sys.stdout.write(""\n"".join(results) + ""\n"")
31
32
if __name__ == ""__main__"":
33
    main()
34",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833269
1387833265,suryampandey5942,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
        11
    int t;
12
    cin>>t;
13
    14
    while(t--)
15
    {
16
        int n;
17
        cin>>n;
18
        19
        vector<int> vec1(n);
20
        21
        for(int i=0;i<n;i++)
22
        {   
23
            int dummy;
24
            cin>>dummy;
25
            vec1[i]=dummy;
26
        }
27
        28
        vector<int> ans(n);
29
        30
        for(int i=0;i<n;i++)
31
        {
32
            long long anss=1;
33
            for(int j=0;j<n;j++)
34
            {
35
                 if(i==j) continue;
36
                37
                 anss=anss*vec1[j];
38
            }
39
            ans[i]=anss;
40
          41
        }
42
        43
        for(auto it:ans)
44
        {
45
            cout<<it<<"" "";
46
        }cout<<endl;
47
    }
48
    return 0;
49
}
50",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833265
