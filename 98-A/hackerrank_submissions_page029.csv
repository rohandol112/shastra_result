submission_id,username,problem_name,language,code,page,url
1387834222,h1032221739,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        result = [1] * n
6
        prefix = 1
7
        for i in range(n):
8
            result[i] = prefix
9
            prefix *= values[i]
10
        suffix = 1
11
        for i in range(n - 1, -1, -1):
12
            result[i] *= suffix
13
            suffix *= values[i]
14
        results.append(result)
15
    return results
16
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    n = int(input())
21
    values = list(map(int, input().split()))
22
    test_cases.append((n, values))
23
24
results = product_except_self(test_cases)
25
for result in results:
26
    print("" "".join(map(str, result)))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834222
1387834227,mlal42239,unknown,unknown,"1
def solve():
2
    t = int(input())  
3
    for _ in range(t):
4
        n = int(input())  
5
        nums = list(map(int, input().split()))  
6
        7
        8
        total_sum = sum(nums)
9
        10
       11
        left_sum = 0
12
        max_difference = 0
13
        14
       15
        for i in range(n - 1): 
16
            left_sum += nums[i]
17
            right_sum = total_sum - left_sum
18
            max_difference = max(max_difference, abs(left_sum - right_sum))
19
        20
        print(max_difference)
21
22
23
solve()",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834227
1387834217,h1032221495,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
4
    for _ in range(t):
5
        n = test_cases[_][0]
6
        nums = test_cases[_][1]
7
8
        # Prefix and suffix sums
9
        prefix_sum = [0] * n
10
        suffix_sum = [0] * n
11
12
        # Compute prefix sum
13
        prefix_sum[0] = nums[0]
14
        for i in range(1, n):
15
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
16
17
        # Compute suffix sum
18
        suffix_sum[n - 1] = nums[n - 1]
19
        for i in range(n - 2, -1, -1):
20
            suffix_sum[i] = suffix_sum[i + 1] + nums[i]
21
22
        # Calculate the maximum absolute difference
23
        max_diff = 0
24
        for i in range(n - 1):
25
            left_sum = prefix_sum[i]
26
            right_sum = suffix_sum[i + 1]
27
            max_diff = max(max_diff, abs(left_sum - right_sum))
28
29
        results.append(max_diff)
30
31
    return results
32
33
# Input reading
34
t = int(input())
35
test_cases = []
36
for _ in range(t):
37
    n = int(input())
38
    nums = list(map(int, input().split()))
39
    test_cases.append((n, nums))
40
41
# Solve and output results
42
results = max_absolute_difference(t, test_cases)
43
for result in results:
44
    print(result)",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834217
1387834218,h1032220352,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    idx = 0  
7
    T = int(data[idx])  
8
    idx += 1  
9
    results = []
10
    11
    for _ in range(T):
12
        num_stations, transfer_units = map(int, data[idx].split())  
13
        idx += 1
14
        station_energies = list(map(int, data[idx].split()))
15
        idx += 1
16
        17
        total_energy = sum(station_energies)
18
        19
        if total_energy % num_stations != 0:
20
            results.append(-1)
21
            continue
22
        23
        target_energy = total_energy // num_stations
24
        num_operations = 0
25
        balance = 0
26
        27
        for i in range(num_stations):
28
            diff = station_energies[i] - target_energy
29
            balance += diff
30
            if balance % transfer_units != 0:
31
                num_operations = -1
32
                break
33
            num_operations += abs(balance // transfer_units)
34
        35
        results.append(num_operations)
36
    37
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
38
39
solve()
40",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834218
1387834221,parmesh214,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    total_energy = sum(energy)
3
    if total_energy % N != 0:
4
        return -1
5
    target = total_energy // N
6
    operations = 0
7
    balance = 0
8
    for i in range(N):
9
        balance += energy[i] - target
10
        if balance % K != 0:
11
            return -1
12
        operations += abs(balance // K)
13
    return operations
14
15
def solve():
16
    T = int(input())
17
    for _ in range(T):
18
        N, K = map(int, input().split())
19
        energy = list(map(int, input().split()))
20
        print(min_operations_to_equalize(N, K, energy))
21
22
if __name__ == ""__main__"":
23
    solve()
24",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834221
1387834212,siddhinnaik05,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <cmath>
5
using namespace std;
6
7
void solve() {
8
    int T;
9
    cin >> T; // Number of test cases
10
11
    while (T--) {
12
        int N, K;
13
        cin >> N >> K; // Number of stations and energy transfer units per operation
14
15
        vector<int> energy(N);
16
        long long totalEnergy = 0;
17
18
        for (int i = 0; i < N; i++) {
19
            cin >> energy[i];
20
            totalEnergy += energy[i];
21
        }
22
23
        // If total energy is not divisible by N, equal distribution is impossible
24
        if (totalEnergy % N != 0) {
25
            cout << -1 << endl;
26
            continue;
27
        }
28
29
        int target = totalEnergy / N; // Target energy for each station
30
        long long operations = 0, imbalance = 0;
31
32
        for (int i = 0; i < N; i++) {
33
            // Calculate imbalance at this station
34
            imbalance += (energy[i] - target);
35
            // Operations required to equalize this imbalance
36
            operations += abs(imbalance) / K;
37
38
            // If K does not perfectly divide the imbalance, equalization is impossible
39
            if (imbalance % K != 0) {
40
                operations = -1;
41
                break;
42
            }
43
        }
44
45
        cout << (operations == -1 ? -1 : operations) << endl;
46
    }
47
}
48
49
int main() {
50
    solve();
51
    return 0;
52
}
53
54",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834212
1387834211,panoop2005_ap,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
11
        while (T-- > 0) {
12
            int N = scanner.nextInt();
13
            int K = scanner.nextInt();
14
            int[] energy = new int[N];
15
            int sum = 0;
16
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextInt();
19
                sum += energy[i];
20
            }
21
22
            if (sum % N != 0) {
23
                System.out.println(-1);
24
                continue;
25
            }
26
27
            int target = sum / N;
28
            int operations = 0;
29
            int imbalance = 0;
30
31
            for (int i = 0; i < N; i++) {
32
                imbalance += energy[i] - target;
33
                if (imbalance % K != 0) {
34
                    operations = -1;
35
                    break;
36
                }
37
                operations += Math.abs(imbalance) / K;
38
            }
39
40
            System.out.println(operations);
41
        }
42
        scanner.close();
43
    }
44
}",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834211
1387834213,vinayakdasari201,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    total_energy = sum(energy)
3
    4
    # If total energy cannot be evenly distributed among stations, return -1
5
    if total_energy % N != 0:
6
        return -1
7
8
    target = total_energy // N  # Each station should have this amount of energy
9
    operations = 0
10
    balance = 0
11
12
    # Check if we can equalize using only K transfers
13
    for i in range(N):
14
        diff = energy[i] - target  # Difference from required energy
15
        balance += diff  # Track excess/deficit energy
16
        17
        # If balance cannot be fixed using K moves, it's impossible
18
        if balance % K != 0:
19
            return -1
20
21
        operations += abs(balance) // K  # Count moves required
22
    23
    return operations
24
25
# Read input
26
T = int(input())  # Number of test cases
27
for _ in range(T):
28
    N, K = map(int, input().split())  # Read N and K
29
    energy = list(map(int, input().split()))  # Read energy levels
30
    31
    # Compute and print result
32
    print(min_operations_to_equalize(N, K, energy))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834213
1387834210,smeetadeshra,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    for test in test_cases:
4
        n, nums = test
5
        prefix_sum = [0] * n
6
        prefix_sum[0] = nums[0]
7
        for i in range(1, n):
8
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
9
        total_sum = prefix_sum[-1]
10
        max_diff1 = 0
11
        for i in range(n - 1):
12
            sum1 = prefix_sum[i] 
13
            sum2 = total_sum - sum1 
14
            max_diff1 = max(max_diff1, abs(sum1 - sum2))
15
        results.append(max_diff1)
16
    return results
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    n = int(input())
21
    nums = list(map(int, input().split()))
22
    test_cases.append((n, nums))
23
output1 = max_absolute_difference(t, test_cases)
24
for res in output1:
25
    print(res)",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834210
