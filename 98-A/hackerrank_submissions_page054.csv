submission_id,username,problem_name,language,code,page,url
1387833743,h1032221046,unknown,unknown,"1
def min_operations_to_equalize(T, test_cases):
2
    results = []
3
4
    for test_case in test_cases:
5
        N, K, energy = test_case
6
        total_energy = sum(energy)
7
8
        # Check if equalization is possible
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
13
        target = total_energy // N
14
        transfers = 0
15
        imbalance = 0
16
17
        # Calculate imbalance and transfers needed
18
        for i in range(N):
19
            imbalance += energy[i] - target
20
            if imbalance % K != 0:
21
                results.append(-1)
22
                break
23
            transfers += abs(imbalance) // K
24
        else:
25
            results.append(transfers)
26
27
    return results
28
29
30
# Input reading
31
T = int(input())  # Number of test cases
32
test_cases = []
33
34
for _ in range(T):
35
    N, K = map(int, input().split())
36
    energy = list(map(int, input().split()))
37
    test_cases.append((N, K, energy))
38
39
# Process test cases
40
results = min_operations_to_equalize(T, test_cases)
41
42
# Output results
43
for result in results:
44
    print(result)
45",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833743
1387833744,h1032220220,unknown,unknown,"1
def maxAbsDifference(t, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, nums = case
6
        total_sum = sum(nums)
7
        8
  9
        left_sum = 0
10
        max_diff = 0
11
        12
13
        for i in range(n - 1): 
14
            left_sum += nums[i]
15
            right_sum = total_sum - left_sum
16
            diff = abs(left_sum - right_sum)
17
            max_diff = max(max_diff, diff)
18
        19
        results.append(max_diff)
20
    21
    return results
22
23
24
t = int(input()) 
25
test_cases = []
26
for _ in range(t):
27
    n = int(input())  
28
    nums = list(map(int, input().split())) 
29
    test_cases.append((n, nums))
30
31
32
results = maxAbsDifference(t, test_cases)
33
34
35
for result in results:
36
    print(result)
37",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833744
1387833740,h1032220053,unknown,unknown,"1
def max_absolute_difference(nums, n):
2
    total_sum = sum(nums)
3
    left_sum = 0
4
    max_diff = 0
5
6
    for i in range(n - 1):
7
        left_sum += nums[i]
8
        right_sum = total_sum - left_sum
9
        max_diff = max(max_diff, abs(left_sum - right_sum))
10
    11
    return max_diff
12
13
# Input handling
14
t = int(input())
15
results = []
16
17
for _ in range(t):
18
    n = int(input())
19
    nums = list(map(int, input().split()))
20
    results.append(max_absolute_difference(nums, n))
21
22
# Output results
23
print(*results, sep=""\n"")
24",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833740
1387833736,warangsmit,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n,k=map(int,input().split())
4
    arr=list(map(int,input().split()))
5
    summ=sum(arr)
6
    if summ%n:print(-1)
7
    else:
8
        avg=summ//n
9
        bal=[i-avg for i in arr]
10
        ans=0
11
        total=0
12
        for i in bal:
13
            total+=i
14
            ans+=abs(total)//k
15
        print(ans)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833736
1387833737,ravislprajapati,unknown,unknown,"1
def max_absolute_difference(nums):
2
    """"""
3
    Calculates the maximum absolute difference between the sums of two contiguous subarrays.
4
5
    Args:
6
      nums: A list of integers.
7
8
    Returns:
9
      The maximum absolute difference.
10
    """"""
11
12
    n = len(nums)
13
    prefix_sum = [0] * (n + 1)
14
15
    # Calculate prefix sum
16
    for i in range(1, n + 1):
17
        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
18
19
    max_diff = 0
20
    for i in range(1, n):
21
        left_sum = prefix_sum[i]
22
        right_sum = prefix_sum[n] - left_sum
23
        max_diff = max(max_diff, abs(left_sum - right_sum))
24
25
    return max_diff
26
27
# Get input
28
t = int(input())
29
30
for _ in range(t):
31
    n = int(input())
32
    nums = list(map(int, input().split()))
33
    result = max_absolute_difference(nums)
34
    print(result)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833737
1387833738,samadshaikh22005,unknown,unknown,"1
2
#include <iostream>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int n;
11
        cin >> n;
12
        int values[n], result[n];
13
        14
        for (int i = 0; i < n; i++) {
15
            cin >> values[i];
16
        }
17
        18
        result[0] = 1;
19
        for (int i = 1; i < n; i++) {
20
            result[i] = result[i - 1] * values[i - 1];
21
        }
22
        23
        int right_product = 1;
24
        for (int i = n - 1; i >= 0; i--) {
25
            result[i] *= right_product;
26
            right_product *= values[i];
27
        }
28
        29
        for (int i = 0; i < n; i++) {
30
            cout << result[i] << "" "";
31
        }
32
        cout << endl;
33
    }
34
}
35
36
int main() {
37
    solve();
38
    return 0;
39
}
40",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833738
1387833726,h1032220736,unknown,unknown,"1
def power_station_equalizer(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
7
        # Check if equal distribution is possible
8
        if total_energy % N != 0:
9
            results.append(-1)
10
            continue
11
12
        target_energy = total_energy // N
13
        operations = 0
14
        balance = 0
15
        is_possible = True
16
17
        for i in range(N):
18
            diff = energy[i] - target_energy
19
            balance += diff
20
21
            # Check if balance can be corrected in K-unit operations
22
            if abs(balance) % K != 0:
23
                is_possible = False
24
                break
25
26
            operations += abs(balance // K)
27
28
        results.append(operations if is_possible else -1)
29
30
    return results
31
32
33
# Input reading
34
T = int(input())
35
test_cases = []
36
37
for _ in range(T):
38
    N, K = map(int, input().split())
39
    energy = list(map(int, input().split()))
40
    test_cases.append((N, K, energy))
41
42
# Get and print results
43
results = power_station_equalizer(test_cases)
44
for result in results:
45
    print(result)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833726
1387833727,h1032221356,unknown,unknown,"1
def equalize_energy():
2
    T = int(input()) 
3
    results = []
4
    5
    for _ in range(T):
6
        7
        N, K = map(int, input().split())
8
        9
        energy = list(map(int, input().split()))
10
        11
        total_energy = sum(energy)
12
        13
        14
        if total_energy % N != 0:
15
            results.append(-1)
16
            continue
17
        18
        target = total_energy // N
19
        balance = 0
20
        operations = 0
21
        possible = True
22
        23
        24
        for e in energy:
25
            26
            balance += e - target
27
            28
            if balance % K != 0:
29
                possible = False
30
                break
31
            32
            operations += abs(balance) // K
33
        34
        if possible:
35
            results.append(operations)
36
        else:
37
            results.append(-1)
38
    39
    40
    print(""\n"".join(map(str, results)))
41
42
43
equalize_energy()
44",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833727
1387833733,h1032220062,unknown,unknown,"1
def solve_testcase(n, nums):
2
3
    # If array has only 2 elements, return their absolute difference
4
5
    if n == 2:
6
7
        return abs(nums[0] - nums[1])
8
9
    10
11
    # Calculate the total sum of the array
12
13
    total_sum = sum(nums)
14
15
    16
17
    max_diff = 0
18
19
    left_sum = 0
20
21
    22
23
    # Try each possible partition point
24
25
    # We need to ensure both subarrays are non-empty,
26
27
    # so we only go up to n-1 (leaving at least one element for the right subarray)
28
29
    for i in range(n-1):
30
31
        # Add current element to left sum
32
33
        left_sum += nums[i]
34
35
        # Right sum is the remaining elements
36
37
        right_sum = total_sum - left_sum
38
39
        # Calculate absolute difference
40
41
        curr_diff = abs(left_sum - right_sum)
42
43
        # Update max_diff if current difference is larger
44
45
        max_diff = max(max_diff, curr_diff)
46
47
    48
49
    return max_diff
50
51
def main():
52
53
    # Read number of test cases
54
55
    t = int(input())
56
57
    58
59
    # Process each test case
60
61
    for _ in range(t):
62
63
        # Read array size
64
65
        n = int(input())
66
67
        # Read array elements
68
69
        nums = list(map(int, input().split()))
70
71
        72
73
        # Solve current test case
74
75
        result = solve_testcase(n, nums)
76
77
        78
79
        # Print result
80
81
        print(result)
82
83
if __name__ == ""__main__"":
84
85
    main()",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833733
1387833724,h1032221631,unknown,unknown,"1
def solve_product_excluding_self(test_cases):
2
    results = []
3
    for t in range(test_cases):
4
        n = int(input())
5
        values = list(map(int, input().split()))
6
        if n == 1:
7
            results.append([1])
8
            continue
9
10
        prefix = [1] * n
11
        suffix = [1] * n
12
        result = [0] * n
13
        for i in range(1, n):
14
            prefix[i] = prefix[i - 1] * values[i - 1]
15
16
        for i in range(n - 2, -1, -1):
17
            suffix[i] = suffix[i + 1] * values[i + 1]
18
        for i in range(n):
19
            result[i] = prefix[i] * suffix[i]
20
21
        results.append(result)
22
    for res in results:
23
        print("" "".join(map(str, res)))
24
T = int(input())
25
solve_product_excluding_self(T)
26
            ",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833724
