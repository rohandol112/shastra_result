submission_id,username,problem_name,language,code,page,url
1387832943,h1032220810,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    values = list(map(int, input().split()))
4
5
    result = [0] * n
6
7
    for i in range(n):
8
        product = 1
9
        for j in range(n):
10
            if i != j:
11
                product *= values[j]
12
        result[i] = product
13
14
    print(*result)
15
16
17
t = int(input())
18
for _ in range(t):
19
    solve()",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832943
1387832944,Sanika2112,unknown,unknown,"1
def max_absolute_difference(n, nums):
2
    prefix_sum = [0] * n
3
    suffix_sum = [0] * n
4
    5
    prefix_sum[0] = nums[0]
6
    suffix_sum[n-1] = nums[n-1]
7
    8
    for i in range(1, n):
9
        prefix_sum[i] = prefix_sum[i-1] + nums[i]
10
    11
    for i in range(n-2, -1, -1):
12
        suffix_sum[i] = suffix_sum[i+1] + nums[i]
13
    14
    max_diff = 0
15
    16
    for i in range(n-1):
17
        left_sum = prefix_sum[i]
18
        right_sum = suffix_sum[i+1]
19
        max_diff = max(max_diff, abs(left_sum - right_sum))
20
    21
    return max_diff
22
23
# Reading input
24
t = int(input().strip())
25
results = []
26
27
for _ in range(t):
28
    n = int(input().strip())
29
    nums = list(map(int, input().strip().split()))
30
    result = max_absolute_difference(n, nums)
31
    results.append(result)
32
33
# Output the results
34
for result in results:
35
    print(result)
36",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387832944
1387832945,h1032221771,unknown,unknown,"1
def calculate_results(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
8
        prefix = [1] * n
9
        suffix = [1] * n
10
        11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        for i in range(n - 2, -1, -1):
15
            suffix[i] = suffix[i + 1] * values[i + 1]
16
        17
        result = [prefix[i] * suffix[i] for i in range(n)]
18
        results.append(result)
19
    20
    return results
21
22
T = int(input())
23
test_cases = []
24
25
for _ in range(T):
26
    n = int(input())
27
    values = list(map(int, input().split()))
28
    test_cases.append((n, values))
29
30
output = calculate_results(T, test_cases)
31
for res in output:
32
    print("" "".join(map(str, res)))
33",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832945
1387832940,cjain1725,unknown,unknown,"1
def can_equalize(N, K, energy):
2
    """"""
3
    Determines if it's possible to equalize energy and returns minimum operations needed
4
    5
    Args:
6
        N (int): Number of power stations
7
        K (int): Units of energy that can be transferred in one operation
8
        energy (list): Array of energy values for each station
9
        10
    Returns:
11
        int: Minimum number of operations needed, or -1 if impossible
12
    """"""
13
    # Calculate total energy
14
    total_energy = sum(energy)
15
    16
    # Check if equal distribution is possible
17
    if total_energy % N != 0:
18
        return -1
19
    20
    # Target energy level for each station
21
    target = total_energy // N
22
    23
    # Check if each station can reach target with given K
24
    operations = 0
25
    diff_sum = 0  # Track total energy difference
26
    27
    # First pass: calculate required operations
28
    for i in range(N-1):
29
        diff = energy[i] - target
30
        diff_sum += diff
31
        # If absolute difference is not divisible by K, equalization is impossible
32
        if abs(diff_sum) % K != 0:
33
            return -1
34
        if diff_sum != 0:
35
            operations += 1
36
    37
    # Check last station
38
    final_diff = energy[N-1] - target
39
    if final_diff != -diff_sum:
40
        return -1
41
    42
    # If we made it here and diff_sum is not 0, we need one more operation
43
    if diff_sum != 0:
44
        operations += 1
45
    46
    return operations
47
48
def main():
49
    # Read number of test cases
50
    T = int(input())
51
    52
    # Process each test case
53
    for _ in range(T):
54
        # Read N and K
55
        N, K = map(int, input().split())
56
        57
        # Read energy values
58
        energy = list(map(int, input().split()))
59
        60
        # Calculate and print result
61
        result = can_equalize(N, K, energy)
62
        print(result)
63
64
if __name__ == ""__main__"":
65
    main()",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832940
1387832941,khushidoshi1978,unknown,unknown,"1
def min_operations_to_equalize_energy(t, test_cases):
2
    for n, k, energy in test_cases:
3
        total_energy = sum(energy)
4
        5
        6
        if total_energy % n != 0:
7
            print(-1)
8
            continue
9
        10
      11
        target_energy = total_energy // n
12
        13
        operations = 0
14
        balance = 0
15
        possible = True
16
        17
        for i in range(n):
18
           19
            diff = energy[i] - target_energy
20
            balance += diff
21
            22
            23
            if balance % k != 0:
24
                possible = False
25
                break
26
            27
           28
            operations += abs(balance // k)
29
        30
       31
        if possible:
32
            print(operations)
33
        else:
34
            print(-1)
35
36
37
T = int(input())  
38
test_cases = []
39
40
for _ in range(T):
41
    n, k = map(int, input().split())  
42
    energy = list(map(int, input().split()))  
43
    test_cases.append((n, k, energy))
44
45
46
min_operations_to_equalize_energy(T, test_cases)
47",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832941
1387832942,maurya_anjali061,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    total_energy = sum(energy)
3
    4
    # If the total energy is not divisible by N, it's impossible to equalize
5
    if total_energy % N != 0:
6
        return -1
7
    8
    target_energy = total_energy // N
9
    operations = 0
10
    cumulative_balance = 0
11
    12
    # Traverse through each station and compute the cumulative balance
13
    for i in range(N):
14
        # Calculate the difference between the current energy and the target energy
15
        energy_difference = energy[i] - target_energy
16
        cumulative_balance += energy_difference
17
        18
        # Count the number of operations needed to balance up to the current station
19
        operations += abs(cumulative_balance) // K
20
    21
    return operations
22
23
# Read input
24
T = int(input())  # Number of test cases
25
for _ in range(T):
26
    N, K = map(int, input().split())  # Number of stations (N) and transfer units (K)
27
    energy = list(map(int, input().split()))  # Energy at each station
28
    result = min_operations_to_equalize(N, K, energy)
29
    print(result)
30",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832942
1387832936,h1032221377,unknown,unknown,"1
def minimum_operations_to_equalize(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        N, K = test_cases[t][:2]
6
        energy = test_cases[t][2]
7
        8
        total_energy = sum(energy)
9
        10
        # If the total energy is not divisible by N, it's impossible to equalize
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
        15
        target = total_energy // N
16
        operations = 0
17
        excess_energy = 0
18
        19
        # Traverse the array, simulating the circular transfer
20
        for i in range(N):
21
            # Calculate the difference between current station energy and target
22
            excess_energy += energy[i] - target
23
            24
            # The number of operations required for this difference to propagate
25
            if excess_energy % K != 0:
26
                operations = -1
27
                break
28
            29
            operations += abs(excess_energy) // K
30
        31
        results.append(operations if operations != -1 else -1)
32
    33
    return results
34
35
36
# Input handling
37
T = int(input())
38
test_cases = []
39
for _ in range(T):
40
    N, K = map(int, input().split())
41
    energy = list(map(int, input().split()))
42
    test_cases.append((N, K, energy))
43
44
# Output the results
45
results = minimum_operations_to_equalize(T, test_cases)
46
for res in results:
47
    print(res)",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832936
1387832938,h1032231265,unknown,unknown,"1
def solve():
2
   3
    T = int(input())
4
    5
    for _ in range(T):
6
       7
        n = int(input())
8
        9
       10
        values = list(map(int, input().split()))
11
        12
        13
        result = [1] * n
14
        15
       16
        left_product = 1
17
        for i in range(n):
18
            result[i] = left_product
19
            left_product *= values[i]
20
        21
      22
        right_product = 1
23
        for i in range(n-1, -1, -1):
24
            result[i] *= right_product
25
            right_product *= values[i]
26
        27
       28
        print("" "".join(map(str, result)))
29
30
31
solve()
32",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832938
1387832935,siddhikubal30,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read the number of test cases
3
    for _ in range(T):
4
        n = int(input())  # Number of nodes in this test case
5
        values = list(map(int, input().split()))  # Read the values array
6
        7
        # Step 1: Create the prefix product array
8
        prefix = [1] * n
9
        for i in range(1, n):
10
            prefix[i] = prefix[i - 1] * values[i - 1]
11
        12
        # Step 2: Create the suffix product array
13
        suffix = [1] * n
14
        for i in range(n - 2, -1, -1):
15
            suffix[i] = suffix[i + 1] * values[i + 1]
16
        17
        # Step 3: Compute the result array by multiplying prefix[i] and suffix[i]
18
        result = [prefix[i] * suffix[i] for i in range(n)]
19
        20
        # Step 4: Print the result for this test case
21
        print("" "".join(map(str, result)))
22
23
# Run the solution
24
solve()
25",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832935
1387832933,h1032221056,unknown,unknown,"1
def product_array(arr):
2
    n = len(arr)
3
    left = [1] * n
4
    right = [1] * n
5
6
   7
    for i in range(1, n):
8
        left[i] = left[i-1] * arr[i-1]
9
10
   11
    for i in range(n-2, -1, -1):
12
        right[i] = right[i+1] * arr[i+1]
13
14
    15
    result = [left[i] * right[i] for i in range(n)]
16
17
    return result
18
19
20
T = int(input())
21
22
for _ in range(T):
23
    n = int(input())
24
    arr = list(map(int, input().split()))
25
    result = product_array(arr)
26
    print(*result)",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832933
