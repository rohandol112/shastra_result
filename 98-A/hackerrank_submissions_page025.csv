submission_id,username,problem_name,language,code,page,url
1387834332,h1032220720,unknown,unknown,"1
def solve():
2
    t = int(input())  # Number of test cases
3
    for _ in range(t):
4
        n = int(input())  # Size of the array
5
        nums = list(map(int, input().split()))  # Array of integers
6
        7
        # Compute the total sum of the array
8
        total_sum = sum(nums)
9
        10
        # Initialize the prefix sum
11
        prefix_sum = 0
12
        max_diff = 0
13
        14
        # Iterate over all possible partitions (from 1 to n-1)
15
        for i in range(n - 1):
16
            prefix_sum += nums[i]
17
            # Calculate the absolute difference between the two subarrays
18
            max_diff = max(max_diff, abs(prefix_sum - (total_sum - prefix_sum)))
19
        20
        print(max_diff)
21
22
# Run the function
23
solve()
24",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834332
1387834336,rahulyadav2005a1,unknown,unknown,"1
def moe(test_cases):
2
3
    results = []
4
5
    for t in range(len(test_cases)):
6
7
        N, K, energy = test_cases[t]
8
9
        total_energy = sum(energy)
10
11
        if total_energy % N != 0:
12
13
            results.append(-1)
14
15
            continue
16
17
        18
19
        target = total_energy // N
20
21
        operations = 0
22
23
        balance = 0  
24
25
        for i in range(N):
26
27
            balance += energy[i] - target
28
29
            if balance % K != 0:
30
31
                operations = -1
32
33
                break
34
35
            operations += abs(balance) // K
36
37
        38
39
        results.append(operations if operations != -1 else -1)
40
41
    42
43
    return results
44
45
T = int(input())
46
47
test_cases = []
48
49
for _ in range(T):
50
51
    N, K = map(int, input().split())
52
53
    energy = list(map(int, input().split()))
54
55
    test_cases.append((N, K, energy))
56
57
results = moe(test_cases)
58
59
for res in results:
60
61
    print(res)",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834336
1387834344,saurabhshuklaaa1,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        N, K = map(int, input().split())
5
        energy = list(map(int, input().split()))
6
        7
        total_energy = sum(energy)
8
        9
        if total_energy % N != 0:
10
            print(-1)
11
            continue
12
        13
        target_energy = total_energy // N
14
        operations = 0
15
        current_balance = 0
16
        17
        for i in range(N):
18
            current_balance += energy[i] - target_energy
19
            operations += abs(current_balance) // K
20
            21
            if abs(current_balance) % K != 0:
22
                operations = -1
23
                break
24
        25
        print(operations)
26
27
solve()",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834344
1387834323,codedot,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    energy = list(map(int, input().split()))
5
    6
    total_energy = sum(energy)
7
    8
    if total_energy % n != 0:
9
        print(-1)
10
        continue
11
    12
    target = total_energy // n
13
    operations = 0
14
    current_balance = 0
15
    16
    for i in range(n):
17
        current_balance += energy[i] - target
18
        19
        if current_balance > 0:
20
            operations += (current_balance + k - 1) // k
21
            22
    print(operations)
23",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834323
1387834325,rajnishjha,unknown,unknown,"1
def minimum_operations(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        N, K = test_cases[t][0]
6
        energy = test_cases[t][1]
7
        8
        total_energy = sum(energy)
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target_energy = total_energy // N
14
        operations = 0
15
        16
        for e in energy:
17
            diff = e - target_energy
18
            if diff % K != 0:
19
                results.append(-1)
20
                break
21
            operations += abs(diff) // K
22
        else:
23
            results.append(operations // 2)
24
    25
    return results
26
27
import sys
28
input = sys.stdin.read
29
data = input().splitlines()
30
31
T = int(data[0])
32
test_cases = []
33
line = 1
34
35
for _ in range(T):
36
    N, K = map(int, data[line].split())
37
    energy = list(map(int, data[line + 1].split()))
38
    test_cases.append(((N, K), energy))
39
    line += 2
40
41
results = minimum_operations(T, test_cases)
42
for res in results:
43
    print(res)
44",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834325
1387834326,snehstorage,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
7
8
def product_except_self(values):
9
result = []
10
n= len(values)
11
12
for i in range(n):
13
product = 1
14
for j in range(n):
15
if j != i :
16
product *= values[j]
17
result.append(product)
18
19
return result
20
21
t= int(input())
22
23
for _in range(t):
24
n = int(input())
25
values= list(map(int,input().split()))
26
result= product_except_self(values)
27
print(*result)",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834326
1387834314,panoop2005_ap,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
11
        while (T-- > 0) {
12
            int N = scanner.nextInt();
13
            int K = scanner.nextInt();
14
            int[] energy = new int[N];
15
            long sum = 0;
16
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextInt();
19
                sum += energy[i];
20
            }
21
22
            if (sum % N != 0) {
23
                System.out.println(-1);
24
                continue;
25
            }
26
27
            int target = (int) (sum / N);
28
            long imbalance = 0;
29
            long operations = 0;
30
31
            for (int i = 0; i < N; i++) {
32
                imbalance += energy[i] - target;
33
                if (imbalance % K != 0) {
34
                    operations = -1;
35
                    break;
36
                }
37
                operations += Math.abs(imbalance) / K;
38
            }
39
40
            System.out.println(operations);
41
        }
42
        scanner.close();
43
    }
44
}",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834314
1387834309,1_ashwarya,unknown,unknown,"1
def min_operations(N, K, energy):
2
    total_energy = sum(energy)
3
    4
    if total_energy % N != 0:
5
        return -1
6
    7
    target = total_energy // N
8
    operations = 0
9
    current_balance = 0
10
    11
    for i in range(N):
12
        diff = energy[i] - target
13
        current_balance += diff
14
  15
        operations += abs(current_balance) // K
16
    17
    return operations
18
19
T = int(input())  
20
21
for _ in range(T):
22
    N, K = map(int, input().split())
23
    energy = list(map(int, input().split()))
24
    25
    result = min_operations(N, K, energy)
26
    print(result)
27",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834309
1387834317,meetshah1785,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
         Scanner in = new Scanner(System.in);
8
        int T = in.nextInt(); 
9
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
10
        while (T-- > 0) {
11
        int N = in.nextInt();
12
        long K = in.nextLong();
13
        14
        long[] energy = new long[N];
15
        long total = 0;
16
        for (int i = 0; i < N; i++) {
17
            energy[i] = in.nextLong();
18
            total += energy[i];
19
        }
20
        21
       22
        if (total % N != 0) {
23
           24
            System.out.println(-1);
25
            continue;
26
        }
27
        long M = total / N;  
28
        29
  30
        long[] p = new long[N + 1];
31
        p[0] = 0;
32
        for (int i = 1; i <= N; i++) {
33
            p[i] = p[i - 1] + (energy[i - 1] - M);
34
        }
35
        long r = ((p[0] % K) + K) % K; 
36
        boolean feasible = true;
37
        for (int i = 1; i <= N; i++) {
38
            long remainder = ((p[i] % K) + K) % K;
39
            if (remainder != r) {
40
                feasible = false;
41
                break;
42
            }
43
        }
44
        if (!feasible) {
45
            System.out.println(-1);
46
            continue;
47
        }
48
        49
        50
        Arrays.sort(p);
51
        long median = p[(N) / 2]; 
52
        53
  54
        long modK = (median % K + K) % K;
55
        long diffToR = (r - modK + K) % K;  
56
        57
58
        long x1 = median + diffToR;  
59
      60
        long x2 = x1 - K;  
61
        62
        long cost1 = totalCost(p, x1, K);
63
        long cost2 = totalCost(p, x2, K);
64
        65
      66
        System.out.println(Math.min(cost1, cost2));
67
    }
68
    69
    in.close();
70
}
71
72
73
private static long totalCost(long[] p, long x, long K) {
74
    long cost = 0;
75
    for (long val : p) {
76
       77
        cost += Math.abs((val - x) / K);
78
    }
79
    return cost;
80
}
81
82
}",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834317
1387834306,h1032220319,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <numeric>
6
using namespace std;
7
8
void helper(){
9
    int n,k;
10
    cin>>n>>k;
11
    12
    vector<int>energy(n);
13
    for(int i=0;i<n;i++){
14
        cin>>energy[i];
15
    }
16
    long long totalEnergy =accumulate(energy.begin(),energy.end(),0LL);
17
    18
    if(totalEnergy%n!=0){
19
        cout<<-1<<""\n""; return;
20
    }
21
    int targetEnergy=totalEnergy/n;
22
    long long operations=0;
23
    24
    for(int i=0;i<n;i++){
25
        int diff=energy[i]-targetEnergy;
26
        if(diff%k!=0){
27
            cout<<-1 <<""\n"";
28
            return;
29
        }
30
        operations+=abs(diff/k);
31
    }  cout<<operations/2<<""\n"";
32
}
33
34
int main() {
35
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
36
   int input;
37
    cin>> input;
38
    while(input--){
39
        helper();
40
    }
41
    42
    return 0;
43
}
44",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834306
