submission_id,username,problem_name,language,code,page,url
1387834082,ktiwari3215,unknown,unknown,"1
def solve():
2
    t = int(input())  # number of test cases
3
    for _ in range(t):
4
        n = int(input())  # size of the array
5
        nums = list(map(int, input().split()))  # the array
6
        7
        # Calculate the total sum of the array
8
        total_sum = sum(nums)
9
        10
        # Variables to track the left sum and maximum absolute difference
11
        left_sum = 0
12
        max_difference = 0
13
        14
        # Iterate to find the maximum absolute difference
15
        for i in range(n - 1):  # We stop at n-1 since we need non-empty right subarray
16
            left_sum += nums[i]
17
            right_sum = total_sum - left_sum
18
            max_difference = max(max_difference, abs(left_sum - right_sum))
19
        20
        print(max_difference)
21
22
# Call the function to solve the problem
23
solve()",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834082
1387834084,damodarryadav,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
#include <cmath>
6
7
using namespace std;
8
9
int main() {
10
11
    int T; // Number of test cases
12
13
    cin >> T;
14
15
    while (T--) {
16
17
        int N, K; // Number of stations and energy transfer per operation
18
19
        cin >> N >> K;
20
21
        vector<long long> energy(N);
22
23
        long long totalEnergy = 0;
24
25
        // Input energy of each station
26
27
        for (int i = 0; i < N; ++i) {
28
29
            cin >> energy[i];
30
31
            totalEnergy += energy[i];
32
33
        }
34
35
        // Check if equalization is possible
36
37
        if (totalEnergy % N != 0) {
38
39
            cout << -1 << endl; // Impossible to equalize
40
41
            continue;
42
43
        }
44
45
        long long targetEnergy = totalEnergy / N;
46
47
        long long balance = 0; // Cumulative balance
48
49
        long long operations = 0;
50
51
        bool possible = true;
52
53
        for (int i = 0; i < N; ++i) {
54
55
            // Difference between current energy and target
56
57
            long long diff = energy[i] - targetEnergy;
58
59
            balance += diff; // Maintain cumulative balance
60
61
            62
63
            // If balance cannot be resolved with K, it's impossible
64
65
            if (abs(balance) % K != 0) {
66
67
                possible = false;
68
69
                break;
70
71
            }
72
73
            // Accumulate total operations needed
74
75
            operations += abs(balance) / K;
76
77
        }
78
79
        if (possible) {
80
81
            cout << operations << endl;
82
83
        } else {
84
85
            cout << -1 << endl;
86
87
        }
88
89
    }
90
91
    return 0;
92
93
}",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834084
1387834083,gusingevivek,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    """"""
3
    Calculate minimum operations needed to equalize energy in circular power stations
4
    5
    Args:
6
        N (int): Number of power stations
7
        K (int): Units of energy that can be transferred in one operation
8
        energy (list): Array of energy values for each station
9
        10
    Returns:
11
        int: Minimum number of operations needed, or -1 if impossible
12
    """"""
13
    # Check if already equal
14
    if len(set(energy)) == 1:
15
        return 0
16
        17
    # Calculate total energy and target
18
    total = sum(energy)
19
    if total % N != 0:
20
        return -1
21
    target = total // N
22
    23
    # Compute differences from target
24
    diffs = [(x - target) for x in energy]
25
    26
    # Verify if equalization is possible with given K
27
    if any(abs(d) % K != 0 for d in diffs):
28
        return -1
29
    30
    # Count operations
31
    operations = 0
32
    running_diff = 0
33
    34
    # Count transfers needed for each position except last
35
    for i in range(N-1):
36
        running_diff += diffs[i]
37
        if running_diff != 0:
38
            if abs(running_diff) % K != 0:
39
                return -1
40
            operations += abs(running_diff) // K
41
    42
    # Check if final position balances out
43
    running_diff += diffs[N-1]
44
    if running_diff != 0:
45
        return -1
46
        47
    return operations
48
49
def main():
50
    T = int(input())
51
    for _ in range(T):
52
        N, K = map(int, input().split())
53
        energy = list(map(int, input().split()))
54
        result = min_operations_to_equalize(N, K, energy)
55
        print(result)
56
57
if __name__ == ""__main__"":
58
    main()",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834083
1387834078,singhark94,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <tuple>
4
#include <numeric>
5
#include <cmath>
6
using namespace std;
7
8
vector<int> minOperations(vector<tuple<int, int, vector<int>>>& test_cases) {
9
    vector<int> results;
10
11
    for (const auto& test_case : test_cases) {
12
        int N, K;
13
        vector<int> energy;
14
        tie(N, K, energy) = test_case;
15
16
        long long total_energy = accumulate(energy.begin(), energy.end(), 0LL);
17
        if (total_energy % N != 0) {
18
            results.push_back(-1);
19
            continue;
20
        }
21
22
        long long target = total_energy / N;
23
        long long operations = 0;
24
        long long balance = 0;
25
        bool possible = true;
26
27
        for (int i = 0; i < N; ++i) {
28
            balance += energy[i] - target;
29
            if (balance % K != 0) {
30
                possible = false;
31
                break;
32
            }
33
            operations += abs(balance) / K;
34
        }
35
36
        results.push_back(possible ? operations : -1);
37
    }
38
39
    return results;
40
}
41
42
int main() {
43
    int T;
44
    cin >> T;
45
    vector<tuple<int, int, vector<int>>> test_cases(T);
46
47
    for (int t = 0; t < T; ++t) {
48
        int N, K;
49
        cin >> N >> K;
50
        vector<int> energy(N);
51
        for (int i = 0; i < N; ++i) {
52
            cin >> energy[i];
53
        }
54
        test_cases[t] = make_tuple(N, K, energy);
55
    }
56
57
    vector<int> results = minOperations(test_cases);
58
    for (int res : results) {
59
        cout << res << endl;
60
    }
61
62
    return 0;
63
}
64
65",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834078
1387834079,ng873042,unknown,unknown,"1
def max_absolute_difference(nums):
2
3
    total_sum = sum(nums)
4
5
    left_sum = 0
6
7
    max_diff = 0
8
9
    # Iterate through possible partition points
10
11
    for i in range(len(nums) - 1):
12
13
        left_sum += nums[i]
14
15
        right_sum = total_sum - left_sum
16
17
        max_diff = max(max_diff, abs(left_sum - right_sum))
18
19
    return max_diff
20
21
# Read input
22
23
T = int(input())  # Number of test cases
24
25
for _ in range(T):
26
27
    N = int(input())  # Array size
28
29
    nums = list(map(int, input().split()))  # Read the array
30
31
    print(max_absolute_difference(nums))  # Print result",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834079
1387834070,h1032220866,unknown,unknown,"1
T = int(input())
2
for i in range(T):
3
    n = int(input())
4
    x = 0
5
    l = list(map(int, input().split()))  
6
    result = [1] * n
7
8
    left_prod = 1
9
    for i in range(n):
10
        result[i] = left_prod
11
        left_prod *= l[i]
12
13
    right_prod = 1
14
    for i in range(n - 1, -1, -1):
15
        result[i] *= right_prod
16
        right_prod *= l[i]
17
18
    print(*result)
19",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834070
1387834073,h1032220179,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
    # Compute the prefix sum array
5
    prefix_sum = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
8
    9
    max_diff = 0
10
    11
    # Iterate through all possible split points
12
    for i in range(1, n):
13
        left_sum = prefix_sum[i]
14
        right_sum = prefix_sum[n] - prefix_sum[i]
15
        current_diff = abs(left_sum - right_sum)
16
        17
        # Update the maximum difference
18
        if current_diff > max_diff:
19
            max_diff = current_diff
20
    21
    return max_diff
22
23
def main():
24
    import sys
25
    input = sys.stdin.read
26
    data = input().split()
27
    28
    idx = 0
29
    t = int(data[idx])  # Number of test cases
30
    idx += 1
31
    32
    for _ in range(t):
33
        n = int(data[idx])  # Size of the array
34
        idx += 1
35
        nums = list(map(int, data[idx:idx + n]))  # Array elements
36
        idx += n
37
        38
        result = max_absolute_difference(nums)
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834073
1387834075,h1032220176,unknown,unknown,"1
def solve():
2
    3
    T = int(raw_input())
4
    5
    for _ in range(T):
6
       7
        n = int(raw_input())
8
      9
        values = map(int, raw_input().split())
10
        11
        12
        result = [1] * n
13
        14
     15
        left_product = 1
16
        for i in range(n):
17
            result[i] *= left_product
18
            left_product *= values[i]
19
        20
        21
        right_product = 1
22
        for i in range(n-1, -1, -1):
23
            result[i] *= right_product
24
            right_product *= values[i]
25
        26
        print "" "".join(map(str, result))
27
28
29
solve()
30",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834075
1387834069,h1032221701,unknown,unknown,"1
import sys
2
3
def minimum_operations_to_equalize_energy(test_cases):
4
    results = []
5
    for n, k, energy in test_cases:
6
        total_energy = sum(energy)
7
        8
        # Check if equalization is possible
9
        if total_energy % n != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // n
14
        balance = 0
15
        operations = 0
16
        possible = True
17
        18
        # Calculate the number of operations
19
        for e in energy:
20
            diff = e - target
21
            if diff % k != 0:
22
                possible = False
23
                break
24
            balance += diff // k
25
            operations += abs(balance)
26
        27
        # Check if balancing is possible
28
        results.append(operations if possible else -1)
29
    30
    return results
31
32
# Input Reading
33
input_data = sys.stdin.read().strip()  # Read all input at once
34
35
if input_data:  # Check if input is provided
36
    lines = input_data.splitlines()  # Split input into lines
37
38
    T = int(lines[0])  # Number of test cases
39
    test_cases = []
40
    index = 1
41
42
    for _ in range(T):
43
        n, k = map(int, lines[index].split())
44
        energy = list(map(int, lines[index + 1].split()))
45
        test_cases.append((n, k, energy))
46
        index += 2
47
48
    # Compute and Output Results
49
    results = minimum_operations_to_equalize_energy(test_cases)
50
    print(""\n"".join(map(str, results)))
51
else:
52
    print(""No input provided."")
53",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834069
