submission_id,username,problem_name,language,code,page,url
1387833261,prathameshbhoit1,unknown,unknown,"1
def can_equalize(n: int, k: int, stations: list) -> int:
2
    # Calculate total energy and target energy per station
3
    total_energy = sum(stations)
4
    5
    # Check if total energy is divisible by number of stations
6
    if total_energy % n != 0:
7
        return -1
8
    9
    target_energy = total_energy // n
10
    11
    # If already equalized, return 0
12
    if all(x == target_energy for x in stations):
13
        return 0
14
    15
    # Check if K can be used to equalize
16
    for station in stations:
17
        if abs(station - target_energy) % k != 0:
18
            return -1
19
    20
    # Calculate minimum operations needed
21
    operations = 0
22
    for i in range(n):
23
        if stations[i] == target_energy:
24
            continue
25
            26
        # Calculate how many units need to be moved
27
        diff = stations[i] - target_energy
28
        # Calculate how many operations needed for this station
29
        ops = abs(diff) // k
30
        operations += ops
31
    32
    # Since we counted both giving and receiving operations,
33
    # we need to divide by 2 to get actual number of operations
34
    return operations // 2
35
36
def solve_test_cases():
37
    # Read number of test cases
38
    t = int(input())
39
    40
    results = []
41
    for _ in range(t):
42
        # Read N and K
43
        n, k = map(int, input().split())
44
        # Read station energies
45
        stations = list(map(int, input().split()))
46
        # Solve for this test case
47
        result = can_equalize(n, k, stations)
48
        results.append(result)
49
    50
    # Print results
51
    for result in results:
52
        print(result)
53
54
# Run the solution
55
if __name__ == ""__main__"":
56
    solve_test_cases()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833261
1387833264,angelaanindyajo1,unknown,unknown,"1
def compute_product_array(n, values):
2
    prefix = [1] * n
3
    for i in range(1, n):
4
        prefix[i] = prefix[i - 1] * values[i - 1]
5
    6
    suffix = [1] * n
7
    for i in range(n - 2, -1, -1):
8
        suffix[i] = suffix[i + 1] * values[i + 1]
9
    10
    result = [prefix[i] * suffix[i] for i in range(n)]
11
    12
    return result
13
14
T = int(input().strip()) 
15
for _ in range(T):
16
    n = int(input().strip()) 
17
    values = list(map(int, input().strip().split()))
18
    print("" "".join(map(str, compute_product_array(n, values))))",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833264
1387833262,prashant_ps9833,unknown,unknown,"1
def min_operations_to_equalize_energy(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, k, energy = case
6
        total_energy = sum(energy)
7
8
        if total_energy % n != 0:
9
            results.append(-1)
10
            continue
11
        12
        target_energy = total_energy // n
13
        diffs = [energy[i] - target_energy for i in range(n)]
14
        15
        if any(diff % k != 0 for diff in diffs):
16
            results.append(-1)
17
            continue
18
19
        pos_diff = 0
20
        neg_diff = 0
21
        for diff in diffs:
22
            if diff > 0:
23
                pos_diff += diff // k
24
            elif diff < 0:
25
                neg_diff += abs(diff) // k
26
        27
        if pos_diff == neg_diff:
28
            results.append(pos_diff)
29
        else:
30
            results.append(-1)
31
    32
    return results
33
34
T = int(input())
35
test_cases = []
36
37
for _ in range(T):
38
    n, k = map(int, input().split())
39
    energy = list(map(int, input().split()))
40
    test_cases.append((n, k, energy))
41
42
for result in min_operations_to_equalize_energy(test_cases):
43
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833262
1387833257,khushidoshi1978,unknown,unknown,"1
def product_of_all_except_self(test_cases):
2
    for case in test_cases:
3
        n, values = case
4
        result = [1] * n
5
6
        7
        prefix_product = 1
8
        for i in range(n):
9
            result[i] = prefix_product
10
            prefix_product *= values[i]
11
12
        13
        suffix_product = 1
14
        for i in range(n-1, -1, -1):
15
            result[i] *= suffix_product
16
            suffix_product *= values[i]
17
18
        19
        print("" "".join(map(str, result)))
20
21
22
T = int(input())  
23
test_cases = []
24
for _ in range(T):
25
    n = int(input())  
26
    values = list(map(int, input().split()))  
27
    test_cases.append((n, values))
28
product_of_all_except_self(test_cases)
29",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833257
1387833259,amanpandey9295,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
long long calculateOperations(int n, int k, int *energy) {
5
    long long total_energy = 0;
6
7
    // Calculate total energy
8
    for (int i = 0; i < n; i++) {
9
        total_energy += energy[i];
10
    }
11
12
    // Check if equalization is possible
13
    if (total_energy % n != 0) {
14
        return -1; // Not possible to equalize
15
    }
16
17
    long long target_energy = total_energy / n;
18
    long long current_balance = 0;
19
    long long operations = 0;
20
21
    // Traverse stations to calculate operations
22
    for (int i = 0; i < n; i++) {
23
        current_balance += (energy[i] - target_energy);
24
        25
        // The absolute value of current_balance represents how much energy
26
        // needs to be redistributed so far
27
        operations += llabs(current_balance);
28
    }
29
30
    return operations / k; // Divide by K (units of energy per operation)
31
}
32
33
int main() {
34
    int T;
35
    scanf(""%d"", &T); // Number of test cases
36
37
    while (T--) {
38
        int n, k;
39
        scanf(""%d %d"", &n, &k);
40
41
        int *energy = (int *)malloc(n * sizeof(int));
42
        for (int i = 0; i < n; i++) {
43
            scanf(""%d"", &energy[i]);
44
        }
45
46
        // Calculate and print the result for this test case
47
        printf(""%lld\n"", calculateOperations(n, k, energy));
48
49
        free(energy);
50
    }
51
52
    return 0;
53
}
54
55",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833259
1387833260,h1032220703,unknown,unknown,"1
import java.util.*;
2
3
public class PowerStationEqualizer {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read number of test cases
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            // Read N and K
12
            int N = scanner.nextInt();
13
            int K = scanner.nextInt();
14
            15
            // Read energy levels
16
            int[] energy = new int[N];
17
            long totalEnergy = 0;
18
            for (int i = 0; i < N; i++) {
19
                energy[i] = scanner.nextInt();
20
                totalEnergy += energy[i];
21
            }
22
23
            // Check if equal distribution is possible
24
            if (totalEnergy % N != 0) {
25
                System.out.println(-1);
26
                continue;
27
            }
28
29
            int targetEnergy = (int) (totalEnergy / N);
30
            long operations = 0;
31
            long balance = 0; // Net balance carried over stations
32
33
            for (int i = 0; i < N; i++) {
34
                int diff = energy[i] - targetEnergy;
35
                balance += diff;
36
                37
                // Check if balance can be corrected in K-unit operations
38
                if (balance % K != 0) {
39
                    System.out.println(-1);
40
                    break;
41
                }
42
                43
                operations += Math.abs(balance / K);
44
45
                if (i == N - 1) {
46
                    System.out.println(operations);
47
                }
48
            }
49
        }
50
51
        scanner.close();
52
    }
53
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833260
1387833253,h1032220810,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    nums = list(map(int, input().split()))
4
5
    max_diff = 0
6
    total_sum = sum(nums)
7
    current_sum = 0
8
9
    for i in range(n - 1):
10
        current_sum += nums[i]
11
        sum1 = current_sum
12
        sum2 = total_sum - sum1
13
        diff = abs(sum1 - sum2)
14
        max_diff = max(max_diff, diff)
15
16
    print(max_diff)
17
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833253
1387833254,sahilgupta75070,unknown,unknown,"1
def solve():
2
    # Read the number of test cases
3
    T = int(input())  
4
    5
    # Iterate over each test case
6
    for _ in range(T):
7
        # Read the number of nodes in this test case
8
        n = int(input())  
9
        10
        # Read the list of node values
11
        values = list(map(int, input().split())) 
12
        13
        # Initialize total product and zero count variables
14
        total_product = 1
15
        zero_count = 0
16
        zero_index = -1
17
        18
        # First pass: Calculate the total product and count zeroes
19
        for i in range(n):
20
            if values[i] != 0:
21
                total_product *= values[i]
22
            else:
23
                zero_count += 1
24
                zero_index = i
25
        26
        # Prepare the result array based on the number of zeroes
27
        result = []
28
        29
        if zero_count > 1:
30
            # If there are more than one zero, all results will be zero
31
            result = [0] * n
32
        elif zero_count == 1:
33
            # If there is exactly one zero, only the position with the zero will have the product
34
            for i in range(n):
35
                if i == zero_index:
36
                    result.append(total_product)
37
                else:
38
                    result.append(0)
39
        else:
40
            # If there are no zeros, we can directly compute result[i] = total_product / values[i]
41
            for i in range(n):
42
                result.append(total_product // values[i])  # Integer division
43
        44
        # Print the result for the current test case
45
        print("" "".join(map(str, result)))
46
47
# Call the function to process the input and produce the output
48
solve()
49",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833254
1387833255,h1032231268,unknown,unknown,"1
def solve_testcase(n, nums):
2
    # If array has only 2 elements, return their absolute difference
3
    if n == 2:
4
        return abs(nums[0] - nums[1])
5
    6
    # Calculate the total sum of the array
7
    total_sum = sum(nums)
8
    9
    max_diff = 0
10
    left_sum = 0
11
    12
    # Try each possible partition point
13
    # We need to ensure both subarrays are non-empty,
14
    # so we only go up to n-1 (leaving at least one element for the right subarray)
15
    for i in range(n-1):
16
        # Add current element to left sum
17
        left_sum += nums[i]
18
        # Right sum is the remaining elements
19
        right_sum = total_sum - left_sum
20
        # Calculate absolute difference
21
        curr_diff = abs(left_sum - right_sum)
22
        # Update max_diff if current difference is larger
23
        max_diff = max(max_diff, curr_diff)
24
    25
    return max_diff
26
27
def main():
28
    # Read number of test cases
29
    t = int(input())
30
    31
    # Process each test case
32
    for _ in range(t):
33
        # Read array size
34
        n = int(input())
35
        # Read array elements
36
        nums = list(map(int, input().split()))
37
        38
        # Solve current test case
39
        result = solve_testcase(n, nums)
40
        41
        # Print result
42
        print(result)
43
44
if __name__ == ""__main__"":
45
    main()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833255
1387833252,h1032231273,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read number of test cases
3
    for _ in range(T):
4
        N, K = map(int, input().split())  # Read N and K
5
        energy = list(map(int, input().split()))  # Read energy array
6
        7
        # Step 1: Check if the total energy is divisible by N
8
        total_energy = sum(energy)
9
        10
        # If total energy is not divisible by N, return -1
11
        if total_energy % N != 0:
12
            print(-1)
13
            continue
14
        15
        target = total_energy // N  # Target energy each station should have
16
        operations = 0  # To count the number of operations
17
        18
        balance = 0  # To keep track of surplus or deficit of energy
19
        possible = True
20
        21
        for i in range(N):
22
            # Calculate the difference between current station energy and target
23
            energy_diff = energy[i] - target
24
            balance += energy_diff  # Update the balance
25
            # The balance must be a multiple of K to be valid
26
            if balance % K != 0:
27
                possible = False
28
                break
29
            # The absolute value of balance tells how many moves are needed
30
            operations += abs(balance) // K
31
        32
        if possible:
33
            print(operations)
34
        else:
35
            print(-1)
36
37
# Run the solution
38
solve()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833252
