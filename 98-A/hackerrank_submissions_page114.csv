submission_id,username,problem_name,language,code,page,url
1387832753,suman197960,unknown,unknown,"1
def calculate_result(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
        8
        # Initialize prefix and suffix arrays
9
        prefix = [1] * n
10
        suffix = [1] * n
11
        result = [1] * n
12
        13
        # Calculate prefix products
14
        for i in range(1, n):
15
            prefix[i] = prefix[i - 1] * values[i - 1]
16
        17
        # Calculate suffix products
18
        for i in range(n - 2, -1, -1):
19
            suffix[i] = suffix[i + 1] * values[i + 1]
20
        21
        # Calculate result using prefix and suffix
22
        for i in range(n):
23
            result[i] = prefix[i] * suffix[i]
24
        25
        results.append(result)
26
    27
    return results
28
29
# Input reading
30
T = int(input())
31
test_cases = []
32
33
for _ in range(T):
34
    n = int(input())
35
    values = list(map(int, input().split()))
36
    test_cases.append((n, values))
37
38
# Calculate results
39
results = calculate_result(T, test_cases)
40
41
# Output results
42
for res in results:
43
    print("" "".join(map(str, res)))
44",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832753
1387832759,aryaprzz1,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    // Function to calculate the product array
5
    public static long[] getProductArray(int[] arr, int n) {
6
        // Create result array to store products
7
        long[] result = new long[n];
8
        9
        // If array has less than 2 elements, return empty array
10
        if (n < 2) return result;
11
        12
        // Initialize the result array with 1
13
        Arrays.fill(result, 1);
14
        15
        // Calculate products of all elements to the left of each element
16
        long leftProduct = 1;
17
        for (int i = 0; i < n; i++) {
18
            result[i] *= leftProduct;
19
            leftProduct *= arr[i];
20
        }
21
        22
        // Calculate products of all elements to the right of each element
23
        // and multiply with existing left products
24
        long rightProduct = 1;
25
        for (int i = n - 1; i >= 0; i--) {
26
            result[i] *= rightProduct;
27
            rightProduct *= arr[i];
28
        }
29
        30
        return result;
31
    }
32
    33
    public static void main(String[] args) {
34
        Scanner scanner = new Scanner(System.in);
35
        36
        // Read number of test cases
37
        int T = scanner.nextInt();
38
        39
        while (T-- > 0) {
40
            // Read size of array
41
            int n = scanner.nextInt();
42
            43
            // Read array elements
44
            int[] arr = new int[n];
45
            for (int i = 0; i < n; i++) {
46
                arr[i] = scanner.nextInt();
47
            }
48
            49
            // Get product array
50
            long[] result = getProductArray(arr, n);
51
            52
            // Print result
53
            for (int i = 0; i < n; i++) {
54
                System.out.print(result[i] + (i < n-1 ? "" "" : """"));
55
            }
56
            System.out.println();
57
        }
58
        59
        scanner.close();
60
    }
61
}",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832759
1387832750,vg2556519,unknown,unknown,"1
def compute_product_array(n, values):
2
    prefix = [1] * n
3
    for i in range(1, n):
4
        prefix[i] = prefix[i - 1] * values[i - 1]
5
    6
    suffix = [1] * n
7
    for i in range(n - 2, -1, -1):
8
        suffix[i] = suffix[i + 1] * values[i + 1]
9
    10
    result = [prefix[i] * suffix[i] for i in range(n)]
11
    12
    return result
13
14
T = int(input().strip()) 
15
for _ in range(T):
16
    n = int(input().strip()) 
17
    values = list(map(int, input().strip().split()))
18
    print("" "".join(map(str, compute_product_array(n, values))))
19",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832750
1387832735,h1032221730,unknown,unknown,"1
def solve_testcase(n, values):
2
    # Initialize result array
3
    result = [1] * n
4
    5
    # Calculate prefix products
6
    # result[i] will first store product of all elements to the left of i
7
    prefix = 1
8
    for i in range(n):
9
        result[i] = prefix
10
        prefix *= values[i]
11
    12
    # Calculate suffix products and combine with prefix products
13
    # For each position, multiply its prefix product with suffix product
14
    suffix = 1
15
    for i in range(n-1, -1, -1):
16
        result[i] *= suffix
17
        suffix *= values[i]
18
    19
    return result
20
21
def main():
22
    # Read number of test cases
23
    T = int(input())
24
    25
    # Process each test case
26
    for _ in range(T):
27
        # Read input for current test case
28
        n = int(input())
29
        values = list(map(int, input().split()))
30
        31
        # Solve current test case
32
        result = solve_testcase(n, values)
33
        34
        # Print result
35
        print(*result)
36
37
if __name__ == ""__main__"":
38
    main()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832735
1387832743,nit_mishra3,unknown,unknown,"1
def calculate_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        prefix = [1] * n
6
        suffix = [1] * n
7
        result = [1] * n
8
9
        # Calculate prefix products
10
        for i in range(1, n):
11
            prefix[i] = prefix[i - 1] * values[i - 1]
12
13
        # Calculate suffix products
14
        for i in range(n - 2, -1, -1):
15
            suffix[i] = suffix[i + 1] * values[i + 1]
16
17
        # Calculate result using prefix and suffix
18
        for i in range(n):
19
            result[i] = prefix[i] * suffix[i]
20
21
        results.append(result)
22
    return results
23
24
25
# Input handling
26
T = int(input())  # Number of test cases
27
test_cases = []
28
for _ in range(T):
29
    n = int(input())
30
    values = list(map(int, input().split()))
31
    test_cases.append((n, values))
32
33
# Process and output results
34
outputs = calculate_products(test_cases)
35
for output in outputs:
36
    print("" "".join(map(str, output)))
37",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832743
