submission_id,username,problem_name,language,code,page,url
1387833535,harshpal0050,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result using prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Compute results
37
results = product_except_self(test_cases)
38
39
# Output results
40
for res in results:
41
    print("" "".join(map(str, res)))",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833535
1387833537,ravislprajapati,unknown,unknown,"1
def minimum_operations_to_equalize(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, K, energy = case
6
        total_energy = sum(energy)
7
        8
        # Check if equalization is possible
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // N
14
        balance = 0  # Tracks surplus/deficit of energy
15
        operations = 0
16
        17
        # Simulate the redistribution process
18
        for i in range(N):
19
            balance += (energy[i] - target)
20
            # If balance is non-zero, we need |balance| / K operations
21
            operations += abs(balance) // K
22
        23
        results.append(operations)
24
    25
    return results
26
27
# Input processing
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    N, K = map(int, input().split())
33
    energy = list(map(int, input().split()))
34
    test_cases.append((N, K, energy))
35
36
# Output results
37
for result in minimum_operations_to_equalize(T, test_cases):
38
    print(result)
39",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833537
1387833533,dhruvppaste20,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N, K;
9
        cin >> N >> K;
10
        vector<int> A(N);
11
        for (int i = 0; i < N; i++) {
12
            cin >> A[i];
13
        }
14
        if (K == 0) {
15
            bool allEqual = true;
16
            int first = A[0];
17
            for (int x : A) {
18
                if (x != first) {
19
                    allEqual = false;
20
                    break;
21
                }
22
            }
23
            cout << (allEqual ? 0 : -1) << endl;
24
            continue;
25
        }
26
        long long sum = accumulate(A.begin(), A.end(), 0LL);
27
        if (sum % N != 0) {
28
            cout << -1 << endl;
29
            continue;
30
        }
31
        long long target = sum / N;
32
        vector<int> delta(N);
33
        bool possible = true;
34
        for (int i = 0; i < N; i++) {
35
            delta[i] = A[i] - target;
36
            if (delta[i] % K != 0) {
37
                possible = false;
38
            }
39
        }
40
        if (!possible) {
41
            cout << -1 << endl;
42
            continue;
43
        }
44
        vector<int> d(N);
45
        for (int i = 0; i < N; i++) {
46
            d[i] = delta[i] / K;
47
        }
48
        vector<int> c(N, 0);
49
        for (int i = 1; i < N; i++) {
50
            c[i] = c[i - 1] + d[i];
51
        }
52
        int max_neg_c = -c[0];
53
        for (int i = 0; i < N; i++) {
54
            max_neg_c = max(max_neg_c, -c[i]);
55
        }
56
        long long sum_c = accumulate(c.begin(), c.end(), 0LL);
57
        long long total_ops = (long long)max_neg_c * N + sum_c;
58
        cout << total_ops << endl;
59
    }
60
    return 0;
61
}",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833533
1387833528,hamso2107,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
    # Compute the prefix sum array
5
    prefix_sum = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
8
    9
    max_diff = 0
10
    11
    # Iterate through all possible split points
12
    for i in range(1, n):
13
        left_sum = prefix_sum[i]
14
        right_sum = prefix_sum[n] - prefix_sum[i]
15
        current_diff = abs(left_sum - right_sum)
16
        17
        # Update the maximum difference
18
        if current_diff > max_diff:
19
            max_diff = current_diff
20
    21
    return max_diff
22
23
def main():
24
    import sys
25
    input = sys.stdin.read
26
    data = input().split()
27
    28
    idx = 0
29
    t = int(data[idx])  # Number of test cases
30
    idx += 1
31
    32
    for _ in range(t):
33
        n = int(data[idx])  # Size of the array
34
        idx += 1
35
        nums = list(map(int, data[idx:idx + n]))  # Array elements
36
        idx += n
37
        38
        result = max_absolute_difference(nums)
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833528
1387833529,cjain1725,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    """"""
3
    Calculate minimum operations needed to equalize energy in circular power stations
4
    5
    Args:
6
        N (int): Number of power stations
7
        K (int): Units of energy that can be transferred in one operation
8
        energy (list): Array of energy values for each station
9
        10
    Returns:
11
        int: Minimum number of operations needed, or -1 if impossible
12
    """"""
13
    # Check if already equal
14
    if len(set(energy)) == 1:
15
        return 0
16
        17
    # Calculate total energy and target
18
    total = sum(energy)
19
    if total % N != 0:
20
        return -1
21
    target = total // N
22
    23
    # Compute differences from target
24
    diffs = [(x - target) for x in energy]
25
    26
    # Verify if equalization is possible with given K
27
    if any(abs(d) % K != 0 for d in diffs):
28
        return -1
29
    30
    # Count operations
31
    operations = 0
32
    running_diff = 0
33
    34
    # Count transfers needed for each position except last
35
    for i in range(N-1):
36
        running_diff += diffs[i]
37
        if running_diff != 0:
38
            if abs(running_diff) % K != 0:
39
                return -1
40
            operations += abs(running_diff) // K
41
    42
    # Check if final position balances out
43
    running_diff += diffs[N-1]
44
    if running_diff != 0:
45
        return -1
46
        47
    return operations
48
49
def main():
50
    T = int(input())
51
    for _ in range(T):
52
        N, K = map(int, input().split())
53
        energy = list(map(int, input().split()))
54
        result = min_operations_to_equalize(N, K, energy)
55
        print(result)
56
57
if __name__ == ""__main__"":
58
    main()",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833529
1387833531,sanskriti_singh9,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    for _ in range(t):
4
        n = test_cases[_][0]
5
        nums = test_cases[_][1]
6
7
        # Compute prefix sums
8
        prefix_sum = [0] * n
9
        prefix_sum[0] = nums[0]
10
        for i in range(1, n):
11
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
12
13
        total_sum = prefix_sum[-1]  # Total sum of the array
14
        max_diff = 0
15
16
        # Compute maximum absolute difference by partitioning at every point
17
        for i in range(n - 1):
18
            left_sum = prefix_sum[i]
19
            right_sum = total_sum - left_sum
20
            max_diff = max(max_diff, abs(left_sum - right_sum))
21
22
        results.append(max_diff)
23
24
    return results
25
26
27
# Input
28
t = int(input())
29
test_cases = []
30
for _ in range(t):
31
    n = int(input())
32
    nums = list(map(int, input().split()))
33
    test_cases.append((n, nums))
34
35
# Output
36
output = max_absolute_difference(t, test_cases)
37
for res in output:
38
    print(res)
39",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833531
1387833524,manjesht78,unknown,unknown,"1
def product_except_self(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
8
        # Arrays to store prefix and suffix products
9
        prefix_products = [1] * n
10
        suffix_products = [1] * n
11
12
        # Compute prefix products
13
        for i in range(1, n):
14
            prefix_products[i] = prefix_products[i - 1] * values[i - 1]
15
16
        # Compute suffix products
17
        for i in range(n - 2, -1, -1):
18
            suffix_products[i] = suffix_products[i + 1] * values[i + 1]
19
20
        # Compute result array
21
        result = [prefix_products[i] * suffix_products[i] for i in range(n)]
22
        results.append(result)
23
24
    return results
25
26
# Input handling
27
if __name__ == ""__main__"":
28
    T = int(input())
29
    test_cases = []
30
31
    for _ in range(T):
32
        n = int(input())
33
        values = list(map(int, input().split()))
34
        test_cases.append((n, values))
35
36
    # Solve the problem
37
    results = product_except_self(T, test_cases)
38
39
    # Output results
40
    for result in results:
41
        print("" "".join(map(str, result)))
42",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833524
1387833525,adityadav0412,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums) 
3
    prefix_sum = [0] * (n + 1)
4
    for i in range(n):
5
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
6
    7
    max_diff = 0
8
    9
    for i in range(1, n):
10
        left_sum = prefix_sum[i]
11
        right_sum = prefix_sum[n] - prefix_sum[i]
12
        current_diff = abs(left_sum - right_sum)
13
        14
        if current_diff > max_diff:
15
            max_diff = current_diff
16
    17
    return max_diff
18
19
def main():
20
    import sys
21
    input = sys.stdin.read
22
    data = input().split()    
23
    idx = 0
24
    t = int(data[idx]) 
25
    idx += 1
26
    27
    for _ in range(t):
28
        n = int(data[idx])  
29
        idx += 1
30
        nums = list(map(int, data[idx:idx + n]))  
31
        idx += n
32
        33
        result = max_absolute_difference(nums)
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    main()",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833525
1387833526,yashdubeyenter15,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); 
8
        9
        while (T-- > 0) {
10
            int n = scanner.nextInt();
11
            int[] values = new int[n];
12
            13
           14
            for (int i = 0; i < n; i++) {
15
                values[i] = scanner.nextInt();
16
            }
17
            18
            19
            int[] result = productExceptSelf(values);
20
            printArray(result);
21
        }
22
        23
        scanner.close();
24
    }
25
    26
    private static int[] productExceptSelf(int[] nums) {
27
        int n = nums.length;
28
        int[] result = new int[n];
29
        30
        31
        result[0] = 1;
32
        for (int i = 1; i < n; i++) {
33
            result[i] = result[i-1] * nums[i-1];
34
        }
35
        36
        37
        int rightProduct = 1;
38
        for (int i = n-1; i >= 0; i--) {
39
            result[i] = result[i] * rightProduct;
40
            rightProduct *= nums[i];
41
        }
42
        43
        return result;
44
    }
45
    46
    private static void printArray(int[] arr) {
47
        for (int i = 0; i < arr.length; i++) {
48
            System.out.print(arr[i]);
49
            if (i < arr.length - 1) {
50
                System.out.print("" "");
51
            }
52
        }
53
        System.out.println();
54
    }
55
}",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833526
1387833523,h1032220347,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
4
def compute_product_array(n, values):
5
6
    prefix = [1] * n
7
8
    for i in range(1, n):
9
10
        prefix[i] = prefix[i - 1] * values[i - 1]
11
12
    13
14
    suffix = [1] * n
15
16
    for i in range(n - 2, -1, -1):
17
18
        suffix[i] = suffix[i + 1] * values[i + 1]
19
20
    21
22
    result = [prefix[i] * suffix[i] for i in range(n)]
23
24
    25
26
    return result
27
28
T = int(input().strip()) 
29
30
for _ in range(T):
31
32
    n = int(input().strip()) 
33
34
    values = list(map(int, input().strip().split()))
35
36
    print("" "".join(map(str, compute_product_array(n, values))))",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833523
