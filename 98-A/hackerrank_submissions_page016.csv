submission_id,username,problem_name,language,code,page,url
1387834627,codedot,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    num_stations, transfer_amount=map(int,input().split())
4
    energy_levels=list(map(int,input().split()))
5
    total_energy=sum(energy_levels)
6
    if total_energy%num_stations!=0:
7
        print(-1)
8
        continue
9
    desired_energy=total_energy//num_stations
10
    operations_needed=0
11
    current_surplus=0
12
    for i in range(num_stations):
13
        current_surplus+=energy_levels[i]-desired_energy
14
        if current_surplus>0:
15
            operations_needed+=(current_surplus+transfer_amount-1)//transfer_amount
16
    print(operations_needed)
17",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834627
1387834630,sushanttiwari074,unknown,unknown,"1
def min_operations_to_equalize(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, K, energies = case
6
        total_energy = sum(energies)
7
        8
        if total_energy % N != 0:
9
            results.append(-1)
10
            continue
11
        12
        target = total_energy // N
13
        operations = 0
14
        current_balance = 0
15
        16
        for energy in energies:
17
            current_balance += (energy - target)
18
            if current_balance > 0:
19
                operations += (current_balance + K - 1) // K  
20
            elif current_balance < 0:
21
                operations += (-current_balance + K - 1) // K  
22
        23
        results.append(operations)
24
    25
    return results
26
27
import sys
28
29
input = sys.stdin.read
30
data = input().splitlines()
31
32
T = int(data[0])  
33
test_cases = []
34
35
index = 1
36
for _ in range(T):
37
    N, K = map(int, data[index].split())
38
    index += 1
39
    energies = list(map(int, data[index].split()))
40
    test_cases.append((N, K, energies))
41
    index += 1
42
43
results = min_operations_to_equalize(test_cases)
44
for res in results:
45
    print(res)
46",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834630
1387834638,rajnishjha,unknown,unknown,"1
def solve():
2
    import sys
3
    data = sys.stdin.read().strip().split()
4
    t = int(data[0])
5
    idx = 1
6
7
    for _ in range(t):
8
        n = int(data[idx]); idx += 1
9
        nums = list(map(int, data[idx:idx+n]))
10
        idx += n
11
        12
        total_sum = sum(nums)
13
        14
        prefix_sum = 0
15
        max_diff = 0
16
17
        for i in range(n - 1):
18
            prefix_sum += nums[i]
19
            diff = abs(2 * prefix_sum - total_sum)
20
            if diff > max_diff:
21
                max_diff = diff
22
        23
        print(max_diff)
24
25
solve()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834638
1387834619,sg7859298,unknown,unknown,"1
import java.io.*;  
2
import java.util.*;  
3
4
public class Solution {  
5
6
    public static void main(String[] args) {  
7
        Scanner scanner = new Scanner(System.in);  
8
        int t = scanner.nextInt();  
9
        for (int k = 0; k < t; k++) {  
10
            int n = scanner.nextInt();  
11
            int kVal = scanner.nextInt();  
12
            int[] energies = new int[n];  
13
            for (int i = 0; i < n; i++) {  
14
                energies[i] = scanner.nextInt();  
15
            }  
16
17
            long totalEnergy = 0;  
18
            for (int energy : energies) {  
19
                totalEnergy += energy;  
20
            }  
21
22
            if (totalEnergy % n != 0) {  
23
                System.out.println(-1);  
24
                continue;  
25
            }  
26
27
            long targetEnergy = totalEnergy / n;  
28
            long[] diff = new long[n];  
29
            for (int i = 0; i < n; i++) {  
30
                diff[i] = energies[i] - targetEnergy;  
31
            }  
32
33
            long[] cDiff = new long[n];  
34
            for (int i = 1; i < n; i++) {  
35
                cDiff[i] = cDiff[i - 1] + diff[i - 1];  
36
            }  
37
38
            long operations = 0;  
39
            boolean isPossible = true;  
40
            for (int i = 1; i < n; i++) {  
41
                if (cDiff[i] % kVal != 0) {  
42
                    isPossible = false;  
43
                    break;  
44
                }  
45
                operations += Math.abs(cDiff[i]) / kVal;  
46
            }  
47
48
            if (isPossible) {  
49
                System.out.println(operations);  
50
            } else {  
51
                System.out.println(-1);  
52
            }  
53
        }  
54
        scanner.close();  
55
    }  
56
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834619
1387834621,shravanimargaj02,unknown,unknown,"1
def product_except_self(arr):
2
    n = len(arr)
3
    result = [1] * n
4
    5
    # Prefix product
6
    prefix = 1
7
    for i in range(n):
8
        result[i] = prefix
9
        prefix *= arr[i]
10
    11
    # Suffix product
12
    suffix = 1
13
    for i in range(n - 1, -1, -1):
14
        result[i] *= suffix
15
        suffix *= arr[i]
16
    17
    return result
18
19
# Input reading
20
t = int(input())  # Number of test cases
21
for _ in range(t):
22
    n = int(input())  # Length of the array
23
    arr = list(map(int, input().split()))
24
    print(*product_except_self(arr))
25",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834621
1387834624,vivekbhandari101,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <algorithm>
5
6
using namespace std;
7
8
int maxAbsDiff(const vector<int>& nums) {
9
    int n = nums.size();
10
    vector<int> prefix_sum(n);
11
    prefix_sum[0] = nums[0];
12
    for (int i = 1; i < n; ++i) {
13
        prefix_sum[i] = prefix_sum[i - 1] + nums[i];
14
    }
15
16
    int max_diff = 0;
17
    for (int i = 1; i < n; ++i) {
18
        int left_sum = prefix_sum[i - 1];
19
        int right_sum = prefix_sum[n - 1] - left_sum;
20
        max_diff = max(max_diff, abs(left_sum - right_sum));
21
    }
22
23
    return max_diff;
24
}
25
26
int main() {
27
    int t;
28
    cin >> t;
29
30
    while (t--) {
31
        int n;
32
        cin >> n;
33
34
        vector<int> nums(n);
35
        for (int i = 0; i < n; ++i) {
36
            cin >> nums[i];
37
        }
38
39
        int result = maxAbsDiff(nums);
40
        cout << result << endl;
41
    }
42
43
    return 0;
44
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834624
1387834611,warangsmit,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n,k=map(int,input().split())
4
    arr=list(map(int,input().split()))
5
    summ=sum(arr)
6
    if summ%n:print(-1)
7
    else:
8
        avg=summ//n
9
        arr=[i-avg for i in arr]
10
        ans=0
11
        total=0
12
        for i in arr:
13
            total+=i
14
            if total%k:
15
                print(-1)
16
                break
17
            ans+=abs(total)//k
18
        else:print(ans)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834611
1387834615,rajnishjha,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        N, K = test_cases[t][0]
6
        energy = test_cases[t][1]
7
8
        total_energy = sum(energy)
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
13
        target_energy = total_energy // N
14
        balance = 0
15
        operations = 0
16
17
        for e in energy:
18
            diff = e - target_energy
19
            if diff % K != 0:
20
                results.append(-1)
21
                break
22
            balance += diff // K
23
            operations += abs(diff // K)
24
        else:
25
            if balance != 0:
26
                results.append(-1)
27
            else:
28
                results.append(operations // 2)
29
30
    return results
31
32
33
# Input Handling
34
import sys
35
input = sys.stdin.read
36
data = input().splitlines()
37
38
T = int(data[0])
39
test_cases = []
40
line = 1
41
42
for _ in range(T):
43
    N, K = map(int, data[line].split())
44
    energy = list(map(int, data[line + 1].split()))
45
    test_cases.append(((N, K), energy))
46
    line += 2
47
48
# Compute results
49
results = equalize_energy(T, test_cases)
50
51
# Print results
52
for res in results:
53
    print(res)
54",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834615
1387834617,imharsh1910,unknown,unknown,"1
def equalize_energy(arr, k):
2
    n = len(arr)
3
    total_energy = sum(arr)
4
    5
   6
    if total_energy % n != 0:
7
        return -1
8
    9
    target = total_energy // n
10
    operations = 0
11
  12
    for i in range(n):
13
        diff = arr[i] - target
14
        if diff != 0:
15
            if diff % k != 0:
16
                return -1
17
            arr[i] -= diff
18
            arr[(i + 1) % n] += diff
19
            operations += abs(diff) // k
20
21
    return operations
22
23
T = int(input())
24
for _ in range(T):
25
    n, k = map(int, input().split())
26
    arr = list(map(int, input().split()))
27
    result = equalize_energy(arr, k)
28
    print(result)
29",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834617
1387834605,yrawal2004,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    total_energy = sum(energy)
3
4
    # If total energy cannot be evenly divided among stations, return -1
5
    if total_energy % N != 0:
6
        return -1
7
8
    target = total_energy // N  # Each station should have this much energy
9
    operations = 0
10
    balance = 0  # Keeps track of energy surplus/deficit as we move around
11
12
    for i in range(N):
13
        diff = energy[i] - target
14
        balance += diff
15
        16
        # If the transfer is not a multiple of K, it's impossible
17
        if balance % K != 0:
18
            return -1
19
20
        operations += abs(balance) // K  # Convert deficit/surplus into operations
21
22
    return operations
23
24
# Read number of test cases
25
T = int(input().strip())
26
27
for _ in range(T):
28
    N, K = map(int, input().strip().split())  # Read N and K
29
    energy = list(map(int, input().strip().split()))  # Read energy levels
30
    print(min_operations_to_equalize(N, K, energy))  # Compute and print result
31",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834605
