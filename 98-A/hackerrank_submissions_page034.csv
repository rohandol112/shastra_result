submission_id,username,problem_name,language,code,page,url
1387834117,ravislprajapati,unknown,unknown,"1
def min_operations_to_equalize_energy(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, K, energy = case
6
        total_energy = sum(energy)
7
        8
        # If total energy cannot be evenly distributed
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // N
14
        balance = 0  # Track energy flow
15
        operations = 0
16
        17
        for i in range(N):
18
            diff = energy[i] - target  # Calculate excess or deficit
19
            balance += diff  # Track the running balance
20
            21
            # Since we can only transfer exactly K units
22
            if balance % K != 0:
23
                results.append(-1)
24
                break
25
            26
            operations += abs(balance) // K  # Count required moves
27
        else:
28
            results.append(operations)
29
    30
    return results
31
32
# Taking input from user
33
T = int(input())
34
test_cases = []
35
for _ in range(T):
36
    N, K = map(int, input().split())
37
    energy = list(map(int, input().split()))
38
    test_cases.append((N, K, energy))
39
40
# Printing results
41
for result in min_operations_to_equalize_energy(T, test_cases):
42
    print(result)
43",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834117
1387834120,ambujbaranwal,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
import sys
4
5
input = sys.stdin.read
6
data = input().split()
7
idx = 0
8
T = int(data[idx])
9
idx += 1
10
for _ in range(T):
11
    N = int(data[idx])
12
    K = int(data[idx + 1])
13
    idx += 2
14
15
    arr = list(map(int, data[idx:idx + N]))
16
    idx += N
17
18
    sum_energy = sum(arr)
19
    if sum_energy % N != 0:
20
        print(-1)
21
        continue
22
    target = sum_energy // N
23
24
    possible = True
25
    delta = []
26
    for num in arr:
27
        diff = num - target
28
        if diff % K != 0:
29
            possible = False
30
        delta.append(diff // K)
31
32
    if not possible:
33
        print(-1)
34
        continue
35
36
37
    s = [0]
38
    current_sum = 0
39
    for i in range(1, N):
40
        current_sum += delta[i]
41
        s.append(current_sum)
42
43
    s.sort()
44
    median = s[len(s) // 2]
45
46
47
    total = 0
48
    for num in s:
49
        total += abs(num - median)
50
    print(total)
51
52
53
54",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834120
1387834122,samadshaikh22005,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
using namespace std;
5
6
void solve() {
7
    int T;
8
    cin >> T;
9
    10
    while (T--) {
11
        int N, K;
12
        cin >> N >> K;
13
        vector<int> energy(N);
14
        15
        int sum = 0;
16
        for (int i = 0; i < N; i++) {
17
            cin >> energy[i];
18
            sum += energy[i];
19
        }
20
        21
        if (sum % N != 0) {
22
            cout << -1 << endl;
23
            continue;
24
        }
25
        26
        int target = sum / N;
27
        int operations = 0;
28
        int balance = 0;
29
        30
        for (int i = 0; i < N; i++) {
31
            balance += energy[i] - target;
32
            // Only add to operations if the balance is not zero
33
            if (abs(balance) % K != 0) {
34
                operations = -1;
35
                break;
36
            }
37
            operations += abs(balance) / K;
38
        }
39
        40
        // If no operations needed (all stations already have the same energy)
41
        if (operations == 0 && balance == 0) {
42
            cout << 0 << endl;
43
        } else {
44
            cout << operations << endl;
45
        }
46
    }
47
}
48
49
int main() {
50
    solve();
51
    return 0;
52
}
53",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834122
1387834115,67_harshit_pras1,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
using namespace std;
5
6
int main() {
7
    int t;
8
    cin >> t;
9
    10
    while (t--) {
11
        int n, k;
12
        cin >> n >> k;
13
        14
        vector<long long> energy(n);
15
        long long total = 0;
16
        17
        for(int i = 0; i < n; i++) {
18
            cin >> energy[i];
19
            total += energy[i];
20
        }
21
        22
        if (total % n != 0) {
23
            cout << -1 << endl;
24
            continue;
25
        }
26
        27
        long long target = total / n;
28
        long long operations = 0;
29
        bool possible = true;
30
        31
        for(int i = 0; i < n && possible; i++) {
32
            long long diff = energy[i] - target;
33
            34
            if (diff == 0) continue;
35
            36
            if (abs(diff) % k != 0) {
37
                possible = false;
38
                break;
39
            }
40
            41
            operations += abs(diff) / k;
42
            43
            if (i == n-1) {
44
                if (diff != 0) possible = false;
45
            } else {
46
                energy[i+1] += diff;
47
            }
48
        }
49
        50
        if (!possible) {
51
            cout << -1 << endl;
52
        } else {
53
            cout << operations << endl;
54
        }
55
    }
56
    57
    return 0;
58
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834115
1387834113,3277kunaljain,unknown,unknown,"1
t = int(input())  
2
for _ in range(t):
3
    n = int(input()) 
4
    nums = list(map(int, input().split()))  
5
    total_sum = sum(nums)  
6
    prefix_sum = 0 
7
    max_diff = 0 
8
    for i in range(n - 1):
9
        prefix_sum += nums[i]  
10
        suffix_sum = total_sum - prefix_sum 
11
        max_diff = max(max_diff, abs(prefix_sum - suffix_sum)) 
12
    print(max_diff)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834113
1387834116,siddhantpal9082,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, nums = case
5
        prefix_sum = [0] * n
6
        prefix_sum[0] = nums[0]
7
        for i in range(1, n):
8
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
9
        10
        total_sum = prefix_sum[-1]
11
        max_diff = 0
12
13
        for i in range(n - 1):
14
            left_sum = prefix_sum[i]
15
            right_sum = total_sum - left_sum
16
            max_diff = max(max_diff, abs(left_sum - right_sum))
17
        18
        results.append(max_diff)
19
    20
    return results
21
22
23
if __name__ == ""__main__"":
24
    t = int(input())
25
    test_cases = []
26
    for _ in range(t):
27
        n = int(input())
28
        nums = list(map(int, input().split()))
29
        test_cases.append((n, nums))
30
    31
    results = max_absolute_difference(t, test_cases)
32
    for res in results:
33
        print(res)
34",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834116
1387834106,h1032221029,unknown,unknown,"1
def max_subarray_difference(nums):
2
    n = len(nums)
3
   4
    prefix_sum = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
7
    8
    max_diff = float('-inf')
9
 10
    for i in range(1, n):
11
     12
        left_sum = prefix_sum[i] 
13
        right_sum = prefix_sum[n] - prefix_sum[i]
14
        curr_diff = abs(left_sum - right_sum)
15
        max_diff = max(max_diff, curr_diff)
16
    17
    return max_diff
18
19
20
t = int(input())
21
22
23
for _ in range(t):
24
  25
    n = int(input())
26
    27
  28
    nums = list(map(int, input().split()))
29
    30
   31
    result = max_subarray_difference(nums)
32
    print(result)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834106
1387834109,ranegayatri625,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        result = [1] * n
6
        prefix = 1
7
        for i in range(n):
8
            result[i] = prefix
9
            prefix *= values[i]
10
        suffix = 1
11
        for i in range(n - 1, -1, -1):
12
            result[i] *= suffix
13
            suffix *= values[i]
14
        results.append(result)
15
    return results
16
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    n = int(input())
21
    values = list(map(int, input().split()))
22
    test_cases.append((n, values))
23
24
results = product_except_self(test_cases)
25
for result in results:
26
    print("" "".join(map(str, result)))",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834109
1387834111,codedot,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
 n,k=map(int,input().split())
4
 energy=list(map(int,input().split()))
5
 total_energy=sum(energy)
6
 if total_energy%n!=0:
7
  print(-1)
8
  continue
9
 target=total_energy//n
10
 operations=0
11
 for i in range(n):
12
  diff=energy[i]-target
13
  if diff>0:
14
   operations+=diff//k
15
 print(operations)
16",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834111
1387834104,parmesh214,unknown,unknown,"1
def min_operations(n, k, energy):
2
    total_energy = sum(energy)
3
    if total_energy % n != 0:
4
        return -1
5
6
    target_energy = total_energy // n
7
    operations = 0
8
9
    for i in range(n):
10
        diff = energy[i] - target_energy
11
        if diff > 0:
12
            operations += (diff + k - 1) // k
13
14
    return operations
15
16
t = int(input())
17
for _ in range(t):
18
    n, k = map(int, input().split())
19
    energy = list(map(int, input().split()))
20
    result = min_operations(n, k, energy)
21
    print(result)
22",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834104
