submission_id,username,problem_name,language,code,page,url
1387832913,h1032231332,unknown,unknown,"1
def compute_result(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, values = case
6
        7
        # Step 1: Initialize prefix and suffix arrays
8
        prefix = [1] * n
9
        suffix = [1] * n
10
        result = [1] * n
11
12
        # Step 2: Compute prefix products
13
        for i in range(1, n):
14
            prefix[i] = prefix[i - 1] * values[i - 1]
15
16
        # Step 3: Compute suffix products
17
        for i in range(n - 2, -1, -1):
18
            suffix[i] = suffix[i + 1] * values[i + 1]
19
20
        # Step 4: Compute result
21
        for i in range(n):
22
            result[i] = prefix[i] * suffix[i]
23
24
        results.append(result)
25
26
    return results
27
28
# Input handling
29
def main():
30
    T = int(input())  # Number of test cases
31
    test_cases = []
32
33
    for _ in range(T):
34
        n = int(input())  # Number of nodes
35
        values = list(map(int, input().split()))  # Node values
36
        test_cases.append((n, values))
37
38
    # Process test cases
39
    results = compute_result(test_cases)
40
41
    # Output results
42
    for result in results:
43
        print("" "".join(map(str, result)))
44
45
if __name__ == ""__main__"":
46
    main()
47",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832913
1387832914,01snehapandey01,unknown,unknown,"1
def solve_test_cases():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().strip().split(""\n"")
5
    6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
    10
    results = []
11
12
    for _ in range(T):
13
        n = int(data[idx])
14
        idx += 1
15
        values = list(map(int, data[idx].split()))
16
        idx += 1
17
18
        # Edge case handling is not necessary due to constraints n >= 2
19
20
        # Step 1: Calculate prefix and suffix products
21
        prefix = [1] * n
22
        suffix = [1] * n
23
        result = [0] * n
24
25
        # Build prefix product array
26
        prefix[0] = values[0]
27
        for i in range(1, n):
28
            prefix[i] = prefix[i - 1] * values[i]
29
30
        # Build suffix product array
31
        suffix[n - 1] = values[n - 1]
32
        for i in range(n - 2, -1, -1):
33
            suffix[i] = suffix[i + 1] * values[i]
34
35
        # Compute result for each node
36
        for i in range(n):
37
            left_product = prefix[i - 1] if i > 0 else 1
38
            right_product = suffix[i + 1] if i < n - 1 else 1
39
            result[i] = left_product * right_product
40
41
        results.append("" "".join(map(str, result)))
42
43
    # Print all results at once to avoid multiple I/O operations
44
    sys.stdout.write(""\n"".join(results) + ""\n"")
45
46
if __name__ == ""__main__"":
47
    solve_test_cases()
48",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832914
1387832918,aryaprzz1,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static int minOperationsToEqualize(int n, int k, long[] energy) {
5
        long totalEnergy = 0;
6
        for (long e : energy) {
7
            totalEnergy += e;
8
        }
9
        10
        if (totalEnergy % n != 0) {
11
            return -1;
12
        }
13
        14
        long targetEnergy = totalEnergy / n;
15
        16
        for (long e : energy) {
17
            if (Math.abs(e - targetEnergy) % k != 0) {
18
                return -1;
19
            }
20
        }
21
        22
        int operations = 0;
23
        for (int i = 0; i < n; i++) {
24
            long diff = energy[i] - targetEnergy;
25
            if (diff != 0) {
26
                operations += Math.abs(diff / k);
27
            }
28
        }
29
        30
        return operations / 2;
31
    }
32
    33
    public static void main(String[] args) {
34
        Scanner scanner = new Scanner(System.in);
35
        int t = scanner.nextInt();
36
        37
        while (t-- > 0) {
38
            int n = scanner.nextInt();
39
            int k = scanner.nextInt();
40
            41
            long[] energy = new long[n];
42
            for (int i = 0; i < n; i++) {
43
                energy[i] = scanner.nextLong();
44
            }
45
            46
            System.out.println(minOperationsToEqualize(n, k, energy));
47
        }
48
        49
        scanner.close();
50
    }
51
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832918
1387832905,h1032220220,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for values in test_cases:
5
        n = len(values)
6
        result = [1] * n
7
        8
9
        left_product = 1
10
        for i in range(n):
11
            result[i] = left_product
12
            left_product *= values[i]
13
        14
     15
        right_product = 1
16
        for i in range(n - 1, -1, -1):
17
            result[i] *= right_product
18
            right_product *= values[i]
19
        20
        results.append(result)
21
    22
    return results
23
24
T = int(input())
25
test_cases = []
26
27
for _ in range(T):
28
    n = int(input())
29
    values = list(map(int, input().split()))
30
    test_cases.append(values)
31
32
33
results = product_except_self(test_cases)
34
35
for result in results:
36
    print("" "".join(map(str, result)))",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832905
1387832910,h1032220703,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
    # Compute prefix sum to quickly calculate left and right sums
5
    prefix_sum = [0] * n
6
    prefix_sum[0] = nums[0]
7
    for i in range(1, n):
8
        prefix_sum[i] = prefix_sum[i - 1] + nums[i]
9
10
    total_sum = prefix_sum[-1]
11
    max_difference = 0
12
13
    # Iterate to split into two contiguous subarrays
14
    for i in range(n - 1):  # Skip last to ensure both subarrays are non-empty
15
        left_sum = prefix_sum[i]
16
        right_sum = total_sum - left_sum
17
        max_difference = max(max_difference, abs(left_sum - right_sum))
18
19
    return max_difference
20
21
22
# Reading input
23
t = int(input())
24
for _ in range(t):
25
    n = int(input())  # size of the array
26
    nums = list(map(int, input().strip().split()))  # array elements
27
    result = max_absolute_difference(nums)
28
    print(result)
29",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387832910
1387832912,swayam_prajapat1,unknown,unknown,"1
def product_except_self(test_cases):  
2
    results = []  
3
4
    for values in test_cases:  
5
        n = len(values)  
6
        total_product = 1  
7
        zero_count = 0  
8
        9
        # Calculate total product and count zeros  
10
        for value in values:  
11
            if value == 0:  
12
                zero_count += 1  
13
            else:  
14
                total_product *= value  
15
16
        # Prepare result array  
17
        result = []  
18
        for value in values:  
19
            if zero_count > 1:  
20
                result.append(0)  # More than one zero results in zero product  
21
            elif zero_count == 1:  
22
                result.append(total_product if value == 0 else 0)  # One zero results in total product of non-zero elements  
23
            else:  
24
                result.append(total_product // value)  # Normal case  
25
26
        results.append(result)  
27
28
    return results  
29
30
# Read input  
31
import sys  
32
input = sys.stdin.read  
33
data = input().strip().split('\n')  
34
35
T = int(data[0])  
36
test_cases = []  
37
index = 1  
38
for _ in range(T):  
39
    n = int(data[index])  # Read the number of nodes  
40
    values = list(map(int, data[index + 1].split()))  # Read the values  
41
    test_cases.append(values)  
42
    index += 2  # Move to the next test case  
43
44
# Get results  
45
results = product_except_self(test_cases)  
46
47
# Print results  
48
for result in results:  
49
    print("" "".join(map(str, result)))",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832912
1387832898,h1032220872,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
vector<vector<long long>> computeProducts(int T, vector<pair<int, vector<int>>>& testCases) {
6
    vector<vector<long long>> results;
7
8
    for (int t = 0; t < T; ++t) {
9
        int n = testCases[t].first;
10
        vector<int>& values = testCases[t].second;
11
        12
        // Result vector
13
        vector<long long> result(n, 1);
14
15
        // Compute prefix products
16
        long long prefix = 1;
17
        for (int i = 0; i < n; ++i) {
18
            result[i] = prefix;
19
            prefix *= values[i];
20
        }
21
22
        // Compute suffix products and multiply with prefix
23
        long long suffix = 1;
24
        for (int i = n - 1; i >= 0; --i) {
25
            result[i] *= suffix;
26
            suffix *= values[i];
27
        }
28
29
        results.push_back(result);
30
    }
31
32
    return results;
33
}
34
35
int main() {
36
    int T;
37
    cin >> T;  // Number of test cases
38
    vector<pair<int, vector<int>>> testCases;
39
40
    for (int t = 0; t < T; ++t) {
41
        int n;
42
        cin >> n;  // Number of nodes
43
        vector<int> values(n);
44
        for (int i = 0; i < n; ++i) {
45
            cin >> values[i];
46
        }
47
        testCases.emplace_back(n, values);
48
    }
49
50
    // Compute results
51
    vector<vector<long long>> results = computeProducts(T, testCases);
52
53
    // Output results
54
    for (const auto& result : results) {
55
        for (size_t i = 0; i < result.size(); ++i) {
56
            if (i > 0) cout << "" "";
57
            cout << result[i];
58
        }
59
        cout << endl;
60
    }
61
62
    return 0;
63
}
64",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832898
1387832903,yashrajverma0805,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        StringBuilder resultBuilder = new StringBuilder();
9
10
        int T = Integer.parseInt(br.readLine().trim()); // Number of test cases
11
        while (T-- > 0) {
12
            String[] firstLine = br.readLine().trim().split("" "");
13
            int N = Integer.parseInt(firstLine[0]); // Number of power stations
14
            long K = Long.parseLong(firstLine[1]); // Units of energy transferable in one operation
15
16
            String[] energyInput = br.readLine().trim().split("" "");
17
            long[] energy = new long[N];
18
            long totalEnergy = 0;
19
20
            for (int i = 0; i < N; i++) {
21
                energy[i] = Long.parseLong(energyInput[i]);
22
                totalEnergy += energy[i];
23
            }
24
25
            // If total energy is not divisible by N, it's impossible to equalize
26
            if (totalEnergy % N != 0) {
27
                resultBuilder.append(""-1\n"");
28
                continue;
29
            }
30
31
            long target = totalEnergy / N; // Energy each station should have
32
            long imbalance = 0;
33
            long operations = 0;
34
35
            // Calculate the number of operations needed to balance energy
36
            for (int i = 0; i < N; i++) {
37
                imbalance += (energy[i] - target); // Accumulated imbalance
38
                operations += Math.abs(imbalance); // Count the operations needed
39
            }
40
41
            // Append the result
42
            resultBuilder.append(operations).append(""\n"");
43
        }
44
45
        // Print all results at once
46
        System.out.print(resultBuilder.toString());
47
    }
48
}
49",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832903
1387832904,alstonsoares17,unknown,unknown,"1
def can_equalize(N, K, energy):
2
    total_energy = sum(energy)
3
    4
    if total_energy % N != 0:
5
        return -1
6
        7
    target_energy = total_energy // N
8
    operations = 0
9
    10
    differences = [energy[i] - target_energy for i in range(N)]
11
    12
    for diff in differences:
13
        if diff % K != 0:
14
            return -1
15
    16
    curr_transfer = 0
17
    for i in range(N-1):
18
        curr_transfer += differences[i]
19
        if curr_transfer != 0:
20
            operations += abs(curr_transfer) // K
21
    22
    curr_transfer += differences[N-1]
23
    if curr_transfer != 0:
24
        return -1
25
        26
    return operations
27
28
T = int(input())
29
for _ in range(T):
30
    N, K = map(int, input().split())
31
    energy = list(map(int, input().split()))
32
    result = can_equalize(N, K, energy)
33
    print(result)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387832904
1387832897,tanmoy2005barua,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for values in test_cases:
4
        n = len(values)
5
        result = [1] * n
6
        left_product = 1
7
        for i in range(n):
8
            result[i] = left_product
9
            left_product *= values[i]
10
        right_product = 1
11
        for i in range(n - 1, -1, -1):
12
            result[i] *= right_product
13
            right_product *= values[i]
14
        results.append(result)
15
    return results
16
17
try:
18
    T = int(input())
19
except EOFError:
20
    print(""No input provided."")
21
    T = 0
22
23
test_cases = []
24
for _ in range(T):
25
    n = int(input())
26
    values = list(map(int, input().split()))
27
    test_cases.append(values)
28
29
results = product_except_self(test_cases)
30
for result in results:
31
    print("" "".join(map(str, result)))
32",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387832897
