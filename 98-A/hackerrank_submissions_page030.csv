submission_id,username,problem_name,language,code,page,url
1387834205,h1032221532,unknown,unknown,"1
def minimum_operations_to_equalize(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        N, K, energy = t
6
        total_energy = sum(energy)
7
        8
        9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // N
14
        diffs = [energy[i] - target for i in range(N)]
15
        16
     17
        if any(diff % K != 0 for diff in diffs):
18
            results.append(-1)
19
            continue
20
        21
        22
        operations = 0
23
        imbalance = 0
24
        25
        for diff in diffs:
26
            imbalance += diff // K
27
            operations += abs(imbalance)
28
        29
        results.append(operations)
30
    31
    return results
32
33
34
35
T = int(input())
36
test_cases = []
37
38
for _ in range(T):
39
    N, K = map(int, input().split())
40
    energy = list(map(int, input().split()))
41
    test_cases.append((N, K, energy))
42
43
results = minimum_operations_to_equalize(test_cases)
44
45
for res in results:
46
    print(res)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834205
1387834206,utsavsingh2826,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ProductArray {
4
5
    6
7
    // Method to calculate the product array
8
9
    public static int[] productArray(int[] arr) {
10
11
        int n = arr.length;
12
13
        int[] left = new int[n];
14
15
        int[] right = new int[n];
16
17
        int[] result = new int[n];
18
19
        20
21
        // Initialize left and right product arrays
22
23
        left[0] = 1;
24
25
        right[n-1] = 1;
26
27
        28
29
        // Calculate left product array
30
31
        for (int i = 1; i < n; i++) {
32
33
            left[i] = left[i - 1] * arr[i - 1];
34
35
        }
36
37
        38
39
        // Calculate right product array
40
41
        for (int i = n - 2; i >= 0; i--) {
42
43
            right[i] = right[i + 1] * arr[i + 1];
44
45
        }
46
47
        48
49
        // Calculate result array
50
51
        for (int i = 0; i < n; i++) {
52
53
            result[i] = left[i] * right[i];
54
55
        }
56
57
        58
59
        return result;
60
61
    }
62
63
    public static void main(String[] args) {
64
65
        Scanner scanner = new Scanner(System.in);
66
67
        68
69
        // Get number of test cases
70
71
        int t = scanner.nextInt();
72
73
        74
75
        for (int i = 0; i < t; i++) {
76
77
            int n = scanner.nextInt();
78
79
            int[] arr = new int[n];
80
81
            82
83
            // Read array
84
85
            for (int j = 0; j < n; j++) {
86
87
                arr[j] = scanner.nextInt();
88
89
            }
90
91
            92
93
            // Get the product array
94
95
            int[] result = productArray(arr);
96
97
            98
99
            // Print the result array
100
101
            for (int j = 0; j < n; j++) {
102
103
                System.out.print(result[j] + "" "");
104
105
            }
106
107
            System.out.println();
108
109
        }
110
111
        112
113
        scanner.close();
114
115
    }
116
117
}
118
119
120
121
122
123",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834206
1387834208,h1032221348,unknown,unknown,"1
def minimum_operations_to_equalize_energy(t, test_cases):
2
    results = []
3
    4
    for i in range(t):
5
        n, k = test_cases[i][0]
6
        energy = test_cases[i][1]
7
        8
        total_energy = sum(energy)
9
        if total_energy % n != 0:
10
            results.append(-1)
11
            continue
12
        13
        target_energy = total_energy // n
14
        operations = 0
15
        balance = 0
16
        17
        for e in energy:
18
            balance += e - target_energy
19
            if balance % k != 0:
20
                results.append(-1)
21
                break
22
            operations += abs(balance) // k
23
        else:
24
            results.append(operations)
25
    26
    return results
27
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    energy = list(map(int, input().split()))
34
    test_cases.append(((n, k), energy))
35
36
37
output = minimum_operations_to_equalize_energy(T, test_cases)
38
for res in output:
39
    print(res)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834208
1387834199,jheelj86,unknown,unknown,"1
def solve_testcase(n, nums):
2
3
    if n == 2:
4
        return abs(nums[0] - nums[1])
5
    6
   7
    total_sum = sum(nums)
8
    9
    max_diff = 0
10
    left_sum = 0
11
    12
  13
    for i in range(n-1):
14
       15
        left_sum += nums[i]
16
    17
        right_sum = total_sum - left_sum
18
 19
        curr_diff = abs(left_sum - right_sum)
20
21
        max_diff = max(max_diff, curr_diff)
22
    23
    return max_diff
24
25
def main():
26
  27
    t = int(input())
28
    29
30
    for _ in range(t):
31
     32
        n = int(input())
33
    34
        nums = list(map(int, input().split()))
35
        36
       37
        result = solve_testcase(n, nums)
38
        39
      40
        print(result)
41
42
if __name__ == ""__main__"":
43
    main()",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834199
1387834198,vinayakdasari201,unknown,unknown,"1
def compute_product_excluding_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        total_product = 1
6
        zero_count = values.count(0)
7
8
        if zero_count > 1:
9
            results.append([0] * n)
10
        elif zero_count == 1:
11
            zero_index = values.index(0)
12
            product_except_zero = 1
13
            for i in range(n):
14
                if i != zero_index:
15
                    product_except_zero *= values[i]
16
            result = [0] * n
17
            result[zero_index] = product_except_zero
18
            results.append(result)
19
        else:
20
            for value in values:
21
                total_product *= value
22
            results.append([total_product // value for value in values])
23
24
    return results
25
26
T = int(input())
27
test_cases = [(int(input()), list(map(int, input().split()))) for _ in range(T)]
28
results = compute_product_excluding_self(test_cases)
29
for result in results:
30
    print(*result)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834198
1387834204,suryampandey5942,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
#include <algorithm>
5
using namespace std;
6
7
vector<int> max_absolute_difference(vector<pair<int, vector<int>>>& test_cases) {
8
    vector<int> results;
9
    10
    for (auto& t : test_cases) {
11
        int n = t.first;
12
        vector<int>& nums = t.second;
13
        14
        int total_sum = 0;
15
        for (int num : nums) {
16
            total_sum += num;
17
        }
18
        19
        int prefix_sum = 0;
20
        int max_diff = 0;
21
        22
        // Iterate through possible partitions
23
        for (int i = 0; i < n - 1; i++) {  // Last partition is invalid (requires two non-empty subarrays)
24
            prefix_sum += nums[i];
25
            int suffix_sum = total_sum - prefix_sum;
26
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum));
27
        }
28
        29
        results.push_back(max_diff);
30
    }
31
    32
    return results;
33
}
34
35
int main() {
36
    int t;
37
    cin >> t;
38
    39
    vector<pair<int, vector<int>>> test_cases;
40
    41
    for (int i = 0; i < t; i++) {
42
        int n;
43
        cin >> n;
44
        45
        vector<int> nums(n);
46
        for (int j = 0; j < n; j++) {
47
            cin >> nums[j];
48
        }
49
        50
        test_cases.push_back({n, nums});
51
    }
52
    53
    vector<int> results = max_absolute_difference(test_cases);
54
    55
    for (int res : results) {
56
        cout << res << endl;
57
    }
58
    59
    return 0;
60
}
61",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834204
1387834185,kaminiprasad32,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result using prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Compute results
37
results = product_except_self(test_cases)
38
39
# Output results
40
for res in results:
41
    print("" "".join(map(str, res)))",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834185
1387834188,h1032220872,unknown,unknown,"1
def moe(test_cases):
2
    results = []
3
4
    for t in range(len(test_cases)):
5
        N, K, energy = test_cases[t]
6
        total_energy = sum(energy)
7
        if total_energy % N != 0:
8
            results.append(-1)
9
            continue
10
        11
        target = total_energy // N
12
        operations = 0
13
        balance = 0  
14
        for i in range(N):
15
            balance += energy[i] - target
16
            if balance % K != 0:
17
                operations = -1
18
                break
19
            operations += abs(balance) // K
20
        21
        results.append(operations if operations != -1 else -1)
22
    23
    return results
24
25
T = int(input())
26
test_cases = []
27
28
for _ in range(T):
29
    N, K = map(int, input().split())
30
    energy = list(map(int, input().split()))
31
    test_cases.append((N, K, energy))
32
results = moe(test_cases)
33
for res in results:
34
    print(res)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834188
1387834186,h1032221739,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, nums = case
5
        total_sum = sum(nums)
6
        left_sum = 0
7
        max_diff = 0
8
        for i in range(n - 1):
9
            left_sum += nums[i]
10
            right_sum = total_sum - left_sum
11
            max_diff = max(max_diff, abs(left_sum - right_sum))
12
        results.append(max_diff)
13
    return results
14
15
16
t = int(input())
17
test_cases = []
18
for _ in range(t):
19
    n = int(input())
20
    nums = list(map(int, input().split()))
21
    test_cases.append((n, nums))
22
23
results = max_absolute_difference(test_cases)
24
for res in results:
25
    print(res)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834186
1387834183,h1032221495,unknown,unknown,"1
def minimum_operations_to_equalize(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        N, K = test_cases[t][0]
6
        energy = test_cases[t][1]
7
8
        total_energy = sum(energy)
9
10
        # Check if equalization is possible
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
15
        target_energy = total_energy // N
16
        operations = 0
17
        current_diff = 0
18
19
        for i in range(N):
20
            diff = energy[i] - target_energy
21
            current_diff += diff
22
23
            # If the current difference is not divisible by K, it's impossible to equalize
24
            if current_diff % K != 0:
25
                results.append(-1)
26
                break
27
28
            # Increment operations by the absolute value of current difference divided by K
29
            operations += abs(current_diff) // K
30
        else:
31
            results.append(operations)
32
33
    return results
34
35
# Input reading
36
T = int(input())
37
test_cases = []
38
for _ in range(T):
39
    N, K = map(int, input().split())
40
    energy = list(map(int, input().split()))
41
    test_cases.append(((N, K), energy))
42
43
# Solve and output results
44
results = minimum_operations_to_equalize(T, test_cases)
45
for result in results:
46
    print(result)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834183
