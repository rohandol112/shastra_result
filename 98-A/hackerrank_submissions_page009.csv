submission_id,username,problem_name,language,code,page,url
1387834903,dhruvsingh1604,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result using prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Compute results
37
results = product_except_self(test_cases)
38
39
# Output results
40
for res in results:
41
    print("" "".join(map(str, res)))",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834903
1387834915,karanmakan2250,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <cmath>
5
using namespace std;
6
7
vector<int> minimum_operations_to_equalize(int T, vector<pair<int, pair<int, vector<int>>>>& test_cases) {
8
    vector<int> results;
9
10
    for (auto& case_data : test_cases) {
11
        int N = case_data.first;
12
        int K = case_data.second.first;
13
        vector<int>& energy = case_data.second.second;
14
15
        // Calculate total energy and check if it's divisible by N
16
        long long total_energy = accumulate(energy.begin(), energy.end(), 0LL);
17
        if (total_energy % N != 0) {
18
            results.push_back(-1);
19
            continue;
20
        }
21
22
        int target = total_energy / N;
23
        vector<long long> diffs(N);
24
        for (int i = 0; i < N; ++i) {
25
            diffs[i] = energy[i] - target;
26
        }
27
28
        // Calculate prefix sums of diffs to determine feasibility
29
        long long prefix_sum = 0;
30
        long long operations = 0;
31
        bool possible = true;
32
33
        for (int i = 0; i < N; ++i) {
34
            prefix_sum += diffs[i];
35
            // If prefix_sum is not divisible by K, balancing is impossible
36
            if (prefix_sum % K != 0) {
37
                possible = false;
38
                break;
39
            }
40
            operations += abs(prefix_sum) / K;
41
        }
42
43
        results.push_back(possible ? operations : -1);
44
    }
45
46
    return results;
47
}
48
49
int main() {
50
    int T;
51
    cin >> T;
52
    vector<pair<int, pair<int, vector<int>>>> test_cases;
53
54
    for (int t = 0; t < T; ++t) {
55
        int N, K;
56
        cin >> N >> K;
57
        vector<int> energy(N);
58
        for (int i = 0; i < N; ++i) {
59
            cin >> energy[i];
60
        }
61
        test_cases.push_back({N, {K, energy}});
62
    }
63
64
    vector<int> results = minimum_operations_to_equalize(T, test_cases);
65
    for (int result : results) {
66
        cout << result << endl;
67
    }
68
69
    return 0;
70
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834915
1387834918,h1032221029,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N, K = map(int, input().split())
5
    energy = list(map(int, input().split()))
6
7
    total_energy = sum(energy)
8
9
    if total_energy % N != 0:
10
        print(-1)
11
        continue
12
    13
    target = total_energy // N
14
    balance = 0
15
    operations = 0
16
17
    for i in range(N):
18
        diff = energy[i] - target
19
        balance += diff
20
21
        if balance % K != 0:
22
            print(-1)
23
            break
24
        25
        operations += abs(balance) // K
26
    else:
27
        print(operations)",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834918
1387834888,mahakantsingh113,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
using namespace std;
5
6
int min_operations_to_equalize_energy(int T, vector<vector<int>>& test_cases) {
7
    for (int t = 0; t < T; t++) {
8
        int N = test_cases[t][0];
9
        int K = test_cases[t][1];
10
        vector<int> energy(test_cases[t].begin() + 2, test_cases[t].end()); // energy array
11
        12
        long long total_energy = 0;
13
        for (int i = 0; i < N; i++) {
14
            total_energy += energy[i];
15
        }
16
        17
        // If total energy is not divisible by N, it's impossible to equalize
18
        if (total_energy % N != 0) {
19
            cout << -1 << endl;
20
            continue;
21
        }
22
        23
        long long target = total_energy / N;  // The energy each station should have
24
        long long operations = 0;
25
        long long balance = 0;
26
        27
        for (int i = 0; i < N; i++) {
28
            long long diff = energy[i] - target;
29
            balance += diff;
30
            31
            // If balance is not divisible by K, it's impossible to balance
32
            if (balance % K != 0) {
33
                operations = -1;
34
                break;
35
            }
36
            37
            operations += abs(balance / K);
38
        }
39
        40
        cout << operations << endl;
41
    }
42
    return 0;
43
}
44
45
int main() {
46
    int T;
47
    cin >> T;
48
    49
    vector<vector<int>> test_cases;
50
    51
    for (int t = 0; t < T; t++) {
52
        int N, K;
53
        cin >> N >> K;
54
        55
        vector<int> energy(N);
56
        for (int i = 0; i < N; i++) {
57
            cin >> energy[i];
58
        }
59
        60
        test_cases.push_back({N, K});
61
        test_cases[t].insert(test_cases[t].end(), energy.begin(), energy.end());
62
    }
63
    64
    min_operations_to_equalize_energy(T, test_cases);
65
    return 0;
66
}
67",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834888
1387834890,uditbhagat3001,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
4
using namespace std;
5
6
vector<int> productArray(const vector<int>& nums) {
7
    int n = nums.size();
8
    vector<int> result(n, 1); // Initialize the result array with 1s
9
10
    // Calculate the left product and store it in result
11
    int leftProduct = 1;
12
    for (int i = 0; i < n; ++i) {
13
        result[i] = leftProduct;
14
        leftProduct *= nums[i];
15
    }
16
17
    // Calculate the right product and update result
18
    int rightProduct = 1;
19
    for (int i = n - 1; i >= 0; --i) {
20
        result[i] *= rightProduct;
21
        rightProduct *= nums[i];
22
    }
23
24
    return result;
25
}
26
27
int main() {
28
    int t;
29
    cin >> t; // Number of test cases
30
31
    while (t--) {
32
        int n;
33
        cin >> n; // Size of the array
34
35
        vector<int> nums(n);
36
        for (int i = 0; i < n; ++i) {
37
            cin >> nums[i]; // Input array elements
38
        }
39
40
        vector<int> result = productArray(nums);
41
42
        for (int i = 0; i < n; ++i) {
43
            cout << result[i] << "" "";
44
        }
45
        cout << endl;
46
    }
47
48
    return 0;
49
}
50",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834890
1387834893,gupta_aniket0408,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N, K = map(int, input().split())
5
    energy = list(map(int, input().split()))
6
7
    total_energy = sum(energy)
8
9
    if total_energy % N != 0:
10
        print(-1)
11
        continue
12
    13
    target = total_energy // N
14
    balance = 0
15
    operations = 0
16
17
    for i in range(N):
18
        diff = energy[i] - target
19
        balance += diff
20
21
        if balance % K != 0:
22
            print(-1)
23
            break
24
        25
        operations += abs(balance) // K
26
    else:
27
        print(operations)
28",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834893
1387834881,snehstorage,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
7
def max_abs_diff(nums):
8
    total_sum = sum(nums)
9
    max_diff = 0
10
    left_sum = 0
11
12
    for i in range(len(nums) - 1):
13
        left_sum += nums[i]
14
        right_sum = total_sum - left_sum
15
        max_diff = max(max_diff, abs(left_sum - right_sum))
16
17
    return max_diff
18
19
t = int(input())
20
21
for _ in range(t):
22
    n = int(input())
23
    nums = list(map(int, input().split()))
24
    print(max_abs_diff(nums))
25
26",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834881
1387834884,vighnesh97531,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, nums = t
6
        total_sum = sum(nums)
7
        prefix_sum = 0
8
        max_diff = 0
9
        10
        # Iterate through possible partitions
11
        for i in range(n - 1):  # Last partition is invalid (requires two non-empty subarrays)
12
            prefix_sum += nums[i]
13
            suffix_sum = total_sum - prefix_sum
14
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
15
        16
        results.append(max_diff)
17
    18
    return results
19
20
21
# Input handling
22
t = int(input())
23
test_cases = []
24
25
for _ in range(t):
26
    n = int(input())
27
    nums = list(map(int, input().split()))
28
    test_cases.append((n, nums))
29
30
# Compute results
31
results = max_absolute_difference(test_cases)
32
33
# Output results
34
for res in results:
35
    print(res)",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834884
1387834879,h1032221359,unknown,unknown,"1
import sys
2
3
def max_absolute_difference(n, nums):
4
    total_sum = sum(nums)
5
    max_diff = 0
6
    left_sum = 0
7
    8
    for i in range(n - 1):
9
        left_sum += nums[i]
10
        right_sum = total_sum - left_sum
11
        max_diff = max(max_diff, abs(left_sum - right_sum))
12
    13
    return max_diff
14
15
def main():
16
    input = sys.stdin.read
17
    data = input().split()
18
    index = 0
19
    20
    t = int(data[index])
21
    index += 1
22
    results = []
23
    24
    for _ in range(t):
25
        n = int(data[index])
26
        index += 1
27
        nums = list(map(int, data[index:index + n]))
28
        index += n
29
        30
        results.append(str(max_absolute_difference(n, nums)))
31
    32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834879
1387834876,shivangichouhan1,unknown,unknown,"1
def solve_product_distribution():
2
3
    # Read number of test cases
4
5
    T = int(input())
6
7
    8
9
    # Process each test case
10
11
    for _ in range(T):
12
13
        # Read number of nodes
14
15
        n = int(input())
16
17
        18
19
        # Read values array
20
21
        values = list(map(int, input().split()))
22
23
        24
25
        # Calculate result array
26
27
        result = []
28
29
        30
31
        # Calculate total product of all elements
32
33
        total_product = 1
34
35
        for val in values:
36
37
            total_product *= val
38
39
        40
41
        # For each position, divide total product by the value at that position
42
43
        for i in range(n):
44
45
            # Avoid division by zero
46
47
            if values[i] != 0:
48
49
                result.append(total_product // values[i])
50
51
            else:
52
53
                # If current value is 0, multiply all other values
54
55
                product = 1
56
57
                for j in range(n):
58
59
                    if j != i:
60
61
                        product *= values[j]
62
63
                result.append(product)
64
65
        66
67
        # Print result array elements in a single line
68
69
        print("" "".join(map(str, result)))
70
71
# Run the solution
72
73
if __name__ == ""__main__"":
74
75
    solve_product_distribution()",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834876
