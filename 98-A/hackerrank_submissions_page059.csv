submission_id,username,problem_name,language,code,page,url
1387833653,h1032220062,unknown,unknown,"1
def solve_testcase(n, values):
2
3
    # Initialize result array
4
5
    result = [1] * n
6
7
    8
9
    # Calculate prefix products
10
11
    # result[i] will first store product of all elements to the left of i
12
13
    prefix = 1
14
15
    for i in range(n):
16
17
        result[i] = prefix
18
19
        prefix *= values[i]
20
21
    22
23
    # Calculate suffix products and combine with prefix products
24
25
    # For each position, multiply its prefix product with suffix product
26
27
    suffix = 1
28
29
    for i in range(n-1, -1, -1):
30
31
        result[i] *= suffix
32
33
        suffix *= values[i]
34
35
    36
37
    return result
38
39
def main():
40
41
    # Read number of test cases
42
43
    T = int(input())
44
45
    46
47
    # Process each test case
48
49
    for _ in range(T):
50
51
        # Read input for current test case
52
53
        n = int(input())
54
55
        values = list(map(int, input().split()))
56
57
        58
59
        # Solve current test case
60
61
        result = solve_testcase(n, values)
62
63
        64
65
        # Print result
66
67
        print(*result)
68
69
if __name__ == ""__main__"":
70
71
    main()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833653
1387833654,radhikajoshi2519,unknown,unknown,"1
def minimum_operations():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N, K = map(int, input().split())  # Number of stations and units of energy per operation
7
        energy = list(map(int, input().split()))  # Energy levels at each station
8
        9
        # Check if equalization is possible
10
        total_energy = sum(energy)
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
        15
        # Target energy level for each station
16
        target_energy = total_energy // N
17
        18
        # Calculate difference array
19
        diff = [energy[i] - target_energy for i in range(N)]
20
        21
        # Check if all differences are divisible by K
22
        if any(d % K != 0 for d in diff):
23
            results.append(-1)
24
            continue
25
        26
        # Count the number of operations needed
27
        operations = 0
28
        balance = 0
29
        for d in diff:
30
            balance += d // K
31
            operations += abs(balance)
32
        33
        results.append(operations)
34
    35
    # Print the results for all test cases
36
    print(""\n"".join(map(str, results)))
37
38
39
# Call the function to execute
40
minimum_operations()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833654
1387833655,h1032221519,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
    # Compute the prefix sum array
5
    prefix_sum = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
8
    9
    max_diff = 0
10
    11
    # Iterate through all possible split points
12
    for i in range(1, n):
13
        left_sum = prefix_sum[i]
14
        right_sum = prefix_sum[n] - prefix_sum[i]
15
        current_diff = abs(left_sum - right_sum)
16
        17
        # Update the maximum difference
18
        if current_diff > max_diff:
19
            max_diff = current_diff
20
    21
    return max_diff
22
23
def main():
24
    import sys
25
    input = sys.stdin.read
26
    data = input().split()
27
    28
    idx = 0
29
    t = int(data[idx])  # Number of test cases
30
    idx += 1
31
    32
    for _ in range(t):
33
        n = int(data[idx])  # Size of the array
34
        idx += 1
35
        nums = list(map(int, data[idx:idx + n]))  # Array elements
36
        idx += n
37
        38
        result = max_absolute_difference(nums)
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833655
1387833648,shubhamgupta3009,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            int n = scanner.nextInt();
12
            int[] values = new int[n];
13
            long totalProduct = 1;
14
            int zeroCount = 0;
15
16
            for (int i = 0; i < n; i++) {
17
                values[i] = scanner.nextInt();
18
                if (values[i] == 0) {
19
                    zeroCount++;
20
                } else {
21
                    totalProduct *= values[i];
22
                }
23
            }
24
25
            int[] result = new int[n];
26
            for (int i = 0; i < n; i++) {
27
                if (zeroCount > 1) {
28
                    result[i] = 0;
29
                } else if (zeroCount == 1) {
30
                    if (values[i] == 0) {
31
                        result[i] = (int) totalProduct;
32
                    } else {
33
                        result[i] = 0;
34
                    }
35
                } else {
36
                    result[i] = (int) (totalProduct / values[i]);
37
                }
38
            }
39
40
            for (int i = 0; i < n; i++) {
41
                System.out.print(result[i] + "" "");
42
            }
43
            System.out.println();
44
        }
45
46
        scanner.close();
47
    }
48
}",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833648
1387833651,abhishekgoyalas1,unknown,unknown,"1
def solve_test_cases():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().strip().split(""\n"")
5
6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
10
    results = []
11
12
    for _ in range(T):
13
        # Read N and K
14
        N, K = map(int, data[idx].split())
15
        idx += 1
16
        # Read energy levels
17
        energy = list(map(int, data[idx].split()))
18
        idx += 1
19
20
        total_energy = sum(energy)
21
22
        # If the total energy is not divisible by N, it's impossible
23
        if total_energy % N != 0:
24
            results.append(""-1"")
25
            continue
26
27
        target_energy = total_energy // N
28
        operations = 0
29
        balance = 0
30
        possible = True
31
32
        # Check and calculate the number of operations required
33
        for e in energy:
34
            diff = e - target_energy
35
            balance += diff
36
            if balance % K != 0:
37
                possible = False
38
                break
39
            operations += abs(balance // K)
40
41
        results.append(str(operations) if possible else ""-1"")
42
43
    # Output all results
44
    sys.stdout.write(""\n"".join(results) + ""\n"")
45
46
if __name__ == ""__main__"":
47
    solve_test_cases()
48",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833651
1387833652,ambujbaranwal,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
import itertools
4
5
6
input = sys.stdin.read
7
data = input().split()
8
idx = 0
9
t = int(data[idx])
10
idx += 1
11
for _ in range(t):
12
    n = int(data[idx])
13
    idx += 1
14
    nums = list(map(int, data[idx:idx + n]))
15
    idx += n
16
    prefix = list(itertools.accumulate(nums))
17
    total_sum = prefix[-1]
18
    max_diff = max(abs(2 * p - total_sum) for p in prefix[:-1])
19
    print(max_diff)
20
21",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833652
1387833642,h1032220053,unknown,unknown,"1
def product_except_self(values, n):
2
    result = [1] * n
3
    4
    # Compute prefix products
5
    prefix = 1
6
    for i in range(n):
7
        result[i] = prefix
8
        prefix *= values[i]
9
    10
    # Compute suffix products and update result
11
    suffix = 1
12
    for i in range(n - 1, -1, -1):
13
        result[i] *= suffix
14
        suffix *= values[i]
15
    16
    return result
17
18
# Input handling
19
T = int(input())
20
for _ in range(T):
21
    n = int(input())
22
    values = list(map(int, input().split()))
23
    print(*product_except_self(values, n))
24",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833642
1387833645,ritikalath2004,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def solve():
3
4
    5
    T = int(input())
6
7
     8
9
    for _ in range(T):
10
11
       12
13
        n = int(input())
14
15
       16
17
        values = list(map(int, input().split()))
18
19
       20
21
        result = [1] * n
22
23
       24
25
        left_product = 1
26
27
        for i in range(n):
28
29
            result[i] = left_product
30
31
            left_product *= values[i]
32
33
       34
35
        right_product = 1
36
37
        for i in range(n-1, -1, -1):
38
39
            result[i] *= right_product
40
41
            right_product *= values[i]
42
43
        44
45
        print("" "".join(map(str, result)))
46
47
48
49
solve()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833645
1387833647,aaryanairy,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
        if total_energy % N != 0:
7
            results.append(-1)
8
            continue
9
        target = total_energy // N
10
        operations = 0
11
        surplus = 0
12
        for i in range(N):
13
            diff = energy[i] - target
14
            surplus += diff
15
            if surplus % K != 0:
16
                results.append(-1)
17
                break
18
            operations += abs(surplus // K)
19
        else:
20
            results.append(operations)
21
    return results
22
23
T = int(input())
24
test_cases = []
25
for _ in range(T):
26
    N, K = map(int, input().split())
27
    energy = list(map(int, input().split()))
28
    test_cases.append((N, K, energy))
29
30
results = minimum_operations(test_cases)
31
for res in results:
32
    print(res)",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833647
1387833641,h1032221062,unknown,unknown,"1
def product_except_self():
2
    # Reading number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read the size of the array
8
        n = int(input())
9
        # Read the values of the nodes
10
        values = list(map(int, input().split()))
11
        12
        # Initialize the result array
13
        result = [1] * n
14
        15
        # Compute prefix products
16
        prefix = 1
17
        for i in range(n):
18
            result[i] = prefix
19
            prefix *= values[i]
20
        21
        # Compute suffix products and combine with prefix
22
        suffix = 1
23
        for i in range(n - 1, -1, -1):
24
            result[i] *= suffix
25
            suffix *= values[i]
26
        27
        # Store the result for this test case
28
        results.append("" "".join(map(str, result)))
29
    30
    # Print all results
31
    print(""\n"".join(results))
32
33
# Call the function
34
product_except_self()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833641
