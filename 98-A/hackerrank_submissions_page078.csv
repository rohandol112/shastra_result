submission_id,username,problem_name,language,code,page,url
1387833368,sohamkadam0012,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int maxAbsoluteDifference(int *arr, int n) {
5
    int totalSum = 0;
6
    int leftSum = 0;
7
    int maxDiff = 0;
8
9
    // Calculate total sum of array
10
    for (int i = 0; i < n; i++) {
11
        totalSum += arr[i];
12
    }
13
14
    // Iterate to find the maximum absolute difference
15
    for (int i = 0; i < n - 1; i++) {
16
        leftSum += arr[i];
17
        int rightSum = totalSum - leftSum;
18
        int absDiff = abs(leftSum - rightSum);
19
        if (absDiff > maxDiff) {
20
            maxDiff = absDiff;
21
        }
22
    }
23
24
    return maxDiff;
25
}
26
27
int main() {
28
    int t;
29
    scanf(""%d"", &t);
30
31
    while (t--) {
32
        int n;
33
        scanf(""%d"", &n);
34
35
        int *arr = (int *)malloc(n * sizeof(int));
36
        for (int i = 0; i < n; i++) {
37
            scanf(""%d"", &arr[i]);
38
        }
39
40
        printf(""%d\n"", maxAbsoluteDifference(arr, n));
41
42
        free(arr);
43
    }
44
45
    return 0;
46
}
47
48",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833368
1387833369,omg40787,unknown,unknown,"1
def product_distribution(test_cases):
2
    results = []
3
4
    for t in test_cases:
5
        n = t[0]
6
        values = t[1]
7
8
        if n == 0:
9
            results.append([])
10
            continue
11
12
        # Initialize prefix and suffix arrays
13
        prefix_products = [1] * n
14
        suffix_products = [1] * n
15
        result = [0] * n
16
17
        # Calculate prefix products
18
        for i in range(1, n):
19
            prefix_products[i] = prefix_products[i - 1] * values[i - 1]
20
21
        # Calculate suffix products
22
        for i in range(n - 2, -1, -1):
23
            suffix_products[i] = suffix_products[i + 1] * values[i + 1]
24
25
        # Calculate result array
26
        for i in range(n):
27
            result[i] = prefix_products[i] * suffix_products[i]
28
29
        results.append(result)
30
31
    return results
32
33
# Example usage:
34
test_cases = [
35
    (5, [1, 2, 3, 4, 5]),
36
    (5, [10, 3, 5, 6, 2])
37
]
38
39
results = product_distribution(test_cases)
40
for result in results:
41
    print(' '.join(map(str, result)))
42",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833369
1387833370,h1032221728,unknown,unknown,"1
import sys
2
3
def product_except_self(test_cases):
4
    results = []
5
    6
    for values in test_cases:
7
        n = len(values)
8
        result = [1] * n
9
        10
        # Calculate the left products
11
        left_product = 1
12
        for i in range(n):
13
            result[i] = left_product
14
            left_product *= values[i]
15
        16
        # Calculate the right products and multiply with the left products
17
        right_product = 1
18
        for i in range(n - 1, -1, -1):
19
            result[i] *= right_product
20
            right_product *= values[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
# Input reading
27
input_data = sys.stdin.read().strip().splitlines()
28
T = int(input_data[0])
29
test_cases = []
30
31
index = 1
32
for _ in range(T):
33
    n = int(input_data[index])  # Read the number of nodes
34
    values = list(map(int, input_data[index + 1].split()))  # Read the values
35
    test_cases.append(values)
36
    index += 2  # Move to the next test case
37
38
# Get results
39
results = product_except_self(test_cases)
40
41
# Output results
42
for result in results:
43
    print("" "".join(map(str, result)))",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833370
1387833364,ayushaj14,unknown,unknown,"1
def product_except_self(values):
2
    n = len(values)
3
    # Initialize result array
4
    result = [1] * n
5
    left_product = 1
6
    7
    # Compute left product for each index
8
    for i in range(n):
9
        result[i] *= left_product
10
        left_product *= values[i]
11
    12
    right_product = 1
13
    14
    # Compute right product for each index
15
    for i in range(n-1, -1, -1):
16
        result[i] *= right_product
17
        right_product *= values[i]
18
    19
    return result
20
21
# Function to handle multiple test cases
22
def handle_test_cases(T, test_cases):
23
    results = []
24
    for i in range(T):
25
        n = test_cases[i][0]
26
        values = test_cases[i][1]
27
        results.append(product_except_self(values))
28
    return results
29
30
# Example usage
31
T = 2
32
test_cases = [
33
    (3, [1, 2, 3]),
34
    (4, [-1, 1, 0, -3])
35
]
36
37
results = handle_test_cases(T, test_cases)
38
for result in results:
39
    print(result)
40",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833364
1387833367,h1032221714,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        N, K = map(int, input().split())  # N: number of stations, K: units of energy in one transfer
5
        energy = list(map(int, input().split()))  # Array of energy at each station
6
        7
        total_energy = sum(energy)
8
        9
        # Check if it's possible to equalize the energy
10
        if total_energy % N != 0:
11
            print(-1)
12
            continue
13
        14
        target = total_energy // N  # Target energy per station
15
        operations = 0
16
        current_diff = 0
17
        18
        for i in range(N):
19
            # Calculate how much energy we need to add or remove
20
            current_diff += energy[i] - target
21
            22
            # Check if the difference can be resolved using K energy units
23
            if current_diff % K != 0:
24
                operations = -1
25
                break
26
            operations += abs(current_diff) // K
27
        28
        print(operations)
29
30
# Call the solve function
31
solve()",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833367
1387833366,shuklajaikishan1,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
        if total_energy % N != 0:
7
            results.append(-1)
8
            continue
9
        target = total_energy // N
10
        operations = 0
11
        surplus = 0
12
        for i in range(N):
13
            diff = energy[i] - target
14
            surplus += diff
15
            if surplus % K != 0:
16
                results.append(-1)
17
                break
18
            operations += abs(surplus // K)
19
        else:
20
            results.append(operations)
21
    return results
22
23
T = int(input())
24
test_cases = []
25
for _ in range(T):
26
    N, K = map(int, input().split())
27
    energy = list(map(int, input().split()))
28
    test_cases.append((N, K, energy))
29
30
results = minimum_operations(test_cases)
31
for res in results:
32
    print(res)",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833366
1387833361,kesaragar1234,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
4
    for _ in range(test_cases):
5
        n = int(input())  # Size of the array
6
        nums = list(map(int, input().split()))
7
8
        # Calculate prefix sums
9
        prefix_sum = [0] * n
10
        prefix_sum[0] = nums[0]
11
        for i in range(1, n):
12
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
13
14
        # Calculate suffix sums
15
        suffix_sum = [0] * n
16
        suffix_sum[-1] = nums[-1]
17
        for i in range(n - 2, -1, -1):
18
            suffix_sum[i] = suffix_sum[i + 1] + nums[i]
19
20
        # Find the maximum absolute difference
21
        max_diff = 0
22
        for i in range(n - 1):
23
            left_sum = prefix_sum[i]
24
            right_sum = suffix_sum[i + 1]
25
            max_diff = max(max_diff, abs(left_sum - right_sum))
26
27
        results.append(max_diff)
28
29
    return results
30
31
# Input
32
T = int(input())  # Number of test cases
33
output = max_absolute_difference(T)
34
35
# Output results for all test cases
36
for res in output:
37
    print(res)
38",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833361
1387833362,prashant_ps9833,unknown,unknown,"1
def min_operations_to_equalize_energy(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, k, energy = case
6
        total_energy = sum(energy)
7
        8
        # If total energy is not divisible by N, it's impossible to equalize
9
        if total_energy % n != 0:
10
            results.append(-1)
11
            continue
12
        13
        target_energy = total_energy // n
14
        diffs = [energy[i] - target_energy for i in range(n)]
15
        16
        # Check if the differences are divisible by K
17
        if any(abs(diff) % k != 0 for diff in diffs):
18
            results.append(-1)
19
            continue
20
        21
        # Calculate the number of operations required
22
        operations = 0
23
        balance = 0  # Running balance of energy adjustments
24
        for diff in diffs:
25
            balance += diff // k
26
            operations += abs(balance)
27
        28
        results.append(operations)
29
    30
    return results
31
32
33
# Input processing
34
T = int(input())  # Number of test cases
35
test_cases = []
36
37
for _ in range(T):
38
    n, k = map(int, input().split())  # Read N (stations) and K (transferable units)
39
    energy = list(map(int, input().split()))  # Energy levels of the stations
40
    test_cases.append((n, k, energy))
41
42
# Solve and output results
43
for result in min_operations_to_equalize_energy(test_cases):
44
    print(result)
45",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833362
1387833363,h1032220870,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    # Compute the total sum of the array
4
    total_sum = sum(nums)
5
    prefix_sum = 0
6
    max_diff = 0
7
8
    # Iterate through possible partition points
9
    for i in range(n - 1):
10
        prefix_sum += nums[i]
11
        left_sum = prefix_sum
12
        right_sum = total_sum - prefix_sum
13
        max_diff = max(max_diff, abs(left_sum - right_sum))
14
15
    return max_diff
16
17
18
def main():
19
    t = int(input())  # Number of test cases
20
    results = []
21
22
    for _ in range(t):
23
        n = int(input())  # Size of the array
24
        nums = list(map(int, input().split()))  # Array elements
25
        results.append(max_absolute_difference(nums))
26
27
    for res in results:
28
        print(res)
29
30
31
# Example Input:
32
# 1
33
# 3
34
# 2 3 4
35
36
if __name__ == ""__main__"":
37
    main()
38",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833363
1387833360,aagnihotri2203,unknown,unknown,"1
def solve():
2
    import sys
3
    data = sys.stdin.read().strip().split()
4
    t = int(data[0])
5
    idx = 1
6
7
    for _ in range(t):
8
        n = int(data[idx]); idx += 1
9
        nums = list(map(int, data[idx:idx+n]))
10
        idx += n
11
        12
        total_sum = sum(nums)
13
        14
        prefix_sum = 0
15
        max_diff = 0
16
17
        for i in range(n - 1):
18
            prefix_sum += nums[i]
19
            diff = abs(2 * prefix_sum - total_sum)
20
            if diff > max_diff:
21
                max_diff = diff
22
        23
        print(max_diff)
24
25
solve()",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833360
