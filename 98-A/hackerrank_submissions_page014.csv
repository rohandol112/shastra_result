submission_id,username,problem_name,language,code,page,url
1387834695,1_ashwarya,unknown,unknown,"1
def min_operations(N, K, energy):
2
    total_energy = sum(energy)
3
   4
    if total_energy % N != 0:
5
        return -1
6
7
    target = total_energy // N  
8
    operations = 0
9
    current_balance = 0
10
  11
    for i in range(N):
12
        13
        diff = energy[i] - target
14
15
        current_balance += diff
16
    17
        operations += abs(current_balance) // K
18
        19
    return operations
20
21
T = int(input())  
22
23
for _ in range(T):
24
    N, K = map(int, input().split()) 
25
    energy = list(map(int, input().split()))  
26
27
    result = min_operations(N, K, energy)
28
    print(result)
29",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834695
1387834697,princesharma8050,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); // Number of test cases
8
        9
        while (T-- > 0) {
10
            int N = scanner.nextInt(); // Number of power stations
11
            int K = scanner.nextInt(); // Units of energy per transfer
12
            13
            long[] energy = new long[N];
14
            long totalEnergy = 0;
15
            16
            // Read energy values and calculate total
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextLong();
19
                totalEnergy += energy[i];
20
            }
21
            22
            System.out.println(minOperationsToEqualize(N, K, energy, totalEnergy));
23
        }
24
        25
        scanner.close();
26
    }
27
    28
    private static long minOperationsToEqualize(int N, int K, long[] energy, long totalEnergy) {
29
        // Check if equalization is possible
30
        if (totalEnergy % N != 0) {
31
            return -1;
32
        }
33
        34
        long targetEnergy = totalEnergy / N;
35
        36
        // Check if already equalized
37
        boolean isEqual = true;
38
        for (int i = 0; i < N; i++) {
39
            if (energy[i] != targetEnergy) {
40
                isEqual = false;
41
                break;
42
            }
43
        }
44
        if (isEqual) {
45
            return 0;
46
        }
47
        48
        // Count operations needed
49
        long operations = 0;
50
        long[] current = energy.clone();
51
        52
        // First check if it's possible to equalize
53
        for (int i = 0; i < N; i++) {
54
            if (Math.abs(current[i] - targetEnergy) % K != 0) {
55
                return -1;
56
            }
57
        }
58
        59
        // Try to equalize by transferring energy
60
        for (int i = 0; i < N - 1; i++) {
61
            if (current[i] > targetEnergy) {
62
                long excess = current[i] - targetEnergy;
63
                long transfers = excess / K;
64
                current[i] -= transfers * K;
65
                current[i + 1] += transfers * K;
66
                operations += transfers;
67
            } else if (current[i] < targetEnergy) {
68
                long deficit = targetEnergy - current[i];
69
                long transfers = deficit / K;
70
                current[i] += transfers * K;
71
                current[i + 1] -= transfers * K;
72
                operations += transfers;
73
            }
74
        }
75
        76
        // Check final station
77
        if (current[N - 1] != targetEnergy) {
78
            // Need to transfer to/from first station
79
            long diff = Math.abs(current[N - 1] - targetEnergy);
80
            operations += diff / K;
81
        }
82
        83
        return operations;
84
    }
85
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834697
1387834699,HarshShrivastava,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc=new Scanner(System.in);
8
        int t=sc.nextInt();
9
        while(t>0){
10
            int n=sc.nextInt();
11
            int i;
12
            int a[]=new int[n];
13
            long sum=0;
14
            for(i=0;i<n;i++)
15
                a[i]=sc.nextInt();
16
            Arrays.sort(a);
17
            for(i=1;i<n;i++)
18
                sum+=a[i];
19
            System.out.println(sum-a[0]);
20
            t--;
21
        }
22
    }
23
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834699
1387834689,abhaywadkar2004,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n,k=map(int,input().split())
4
    arr=list(map(int,input().split()))
5
    summ=sum(arr)
6
    if summ%n!=0:
7
        print(-1)
8
    else:
9
        avg=summ//n
10
        bal=[]
11
        for i in arr:
12
            bal.append(i-avg)
13
        ans=0
14
        total=0
15
        for i in bal:
16
            total+=i
17
            if total%k!=0:
18
                print(-1)
19
                break
20
            ans+=abs(total)//k
21
        else:
22
            print(ans)",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834689
1387834692,utsavsingh2826,unknown,unknown,"1
import java.util.Scanner;
2
3
public class EnergyEqualizer {
4
5
    // Function to calculate the minimum operations or return -1 if not possible
6
    public static int minOperations(int N, int K, int[] energy) {
7
        long totalEnergy = 0;
8
        9
        // Calculate the total energy in all stations
10
        for (int i = 0; i < N; i++) {
11
            totalEnergy += energy[i];
12
        }
13
14
        // If total energy is not divisible by N, return -1
15
        if (totalEnergy % N != 0) {
16
            return -1;
17
        }
18
19
        // Calculate the target energy for each station
20
        long targetEnergy = totalEnergy / N;
21
        long operations = 0;
22
        long currentBalance = 0;
23
24
        // Process each station
25
        for (int i = 0; i < N; i++) {
26
            // Calculate the difference from the target
27
            long energyDiff = energy[i] - targetEnergy;
28
            currentBalance += energyDiff;
29
30
            // Check if the balance at any station cannot be transferred in multiples of K
31
            if (Math.abs(currentBalance) % K != 0) {
32
                return -1;
33
            }
34
35
            // Add the number of operations required to balance the energy
36
            operations += Math.abs(currentBalance) / K;
37
        }
38
39
        return (int) operations;
40
    }
41
42
    public static void main(String[] args) {
43
        Scanner sc = new Scanner(System.in);
44
45
        // Read number of test cases
46
        int T = sc.nextInt();
47
        48
        // Process each test case
49
        for (int t = 0; t < T; t++) {
50
            // Read N and K
51
            int N = sc.nextInt();
52
            int K = sc.nextInt();
53
            54
            // Read the energy levels for each station
55
            int[] energy = new int[N];
56
            for (int i = 0; i < N; i++) {
57
                energy[i] = sc.nextInt();
58
            }
59
60
            // Call the minOperations function and print the result
61
            System.out.println(minOperations(N, K, energy));
62
        }
63
64
        sc.close();
65
    }
66
}
67",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834692
1387834690,snehstorage,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
7
def equalize_energy(N, K, energy):
8
  total_energy = sum(energy)
9
  if total_energy % N != 0:
10
    return -1 
11
12
  target_energy = total_energy 
13
  operations = 0
14
15
  for i in range(N):
16
    diff = energy[i] - target_energy
17
    if diff % K != 0:
18
      return -1 
19
20
    operations += abs(diff) 
21
22
  return operations 
23
24
T = int(input())
25
for _ in range(T):
26
  N, K = map(int, input().split())
27
  energy = list(map(int, input().split()))
28
  print(equalize_energy(N, K, energy))
29",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834690
1387834684,akashyadv7233,unknown,unknown,"1
def min_operations_to_equalize(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, K = case[0], case[1]
6
        energy = case[2]
7
        8
        total_energy = sum(energy)
9
        10
        if total_energy % N != 0:
11
            results.append(-1)
12
            continue
13
        14
        target = total_energy // N
15
        operations = 0
16
        balance = 0
17
        18
        for i in range(N):
19
            balance += energy[i] - target
20
            if balance % K != 0:
21
                operations = -1
22
                break
23
            operations += abs(balance) // K
24
        25
        results.append(operations)
26
    27
    return results
28
29
T = 3
30
test_cases = [
31
    (3, 2, [4, 4, 4]),
32
    (3, 1, [5, 3, 4]),
33
    (4, 3, [5, 5, 5, 6])
34
]
35
36
results = min_operations_to_equalize(T, test_cases)
37
for result in results:
38
    print(result)
39",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834684
1387834687,codedot,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    energy = list(map(int, input().split()))
5
    6
    total_energy = sum(energy)
7
    8
    if total_energy % n != 0:
9
        print(-1)
10
        continue
11
    12
    target_energy = total_energy // n
13
    operations = 0
14
    current_balance = 0
15
    16
    for i in range(n):
17
        current_balance += energy[i] - target_energy
18
        if current_balance > 0:
19
            operations += (current_balance + k - 1) // k    
20
    print(operations)
21",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834687
1387834688,veerchauhan6161,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read the number of test cases
3
    4
    for _ in range(T):
5
        n = int(input())  # Number of nodes
6
        values = list(map(int, input().split()))  # Read the values array
7
        8
        # Initialize the result array
9
        result = [1] * n
10
        11
        # Step 1: Compute the left product for each index and store it in result
12
        left_product = 1
13
        for i in range(n):
14
            result[i] = left_product
15
            left_product *= values[i]
16
        17
        # Step 2: Compute the right product and multiply it with the result
18
        right_product = 1
19
        for i in range(n - 1, -1, -1):
20
            result[i] *= right_product
21
            right_product *= values[i]
22
        23
        # Print the result for the current test case
24
        print("" "".join(map(str, result)))
25
26
# Calling solve function to read input and compute output
27
solve()",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834688
1387834681,thepandeysaurav,unknown,unknown,"1
def min_operations_to_equalize(n, k, energy):
2
    total_energy = sum(energy)
3
    4
    if total_energy % n != 0:
5
        return -1
6
    7
    target = total_energy // n
8
    pos_moves = 0
9
    neg_moves = 0
10
    11
    for e in energy:
12
        diff = e - target
13
        if diff % k != 0:
14
            return -1
15
        if diff > 0:
16
            pos_moves += diff // k
17
        else:
18
            neg_moves += (-diff) // k
19
    20
    return pos_moves if pos_moves == neg_moves else -1
21
22
def main():
23
    import sys
24
    input = sys.stdin.read
25
    data = input().split()
26
    27
    index = 0
28
    T = int(data[index])
29
    index += 1
30
    31
    results = []
32
    for _ in range(T):
33
        N, K = map(int, data[index:index+2])
34
        index += 2
35
        energy = list(map(int, data[index:index+N]))
36
        index += N
37
        results.append(str(min_operations_to_equalize(N, K, energy)))
38
    39
    print(""\n"".join(results))
40
41
if __name__ == ""__main__"":
42
    main()
43",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834681
