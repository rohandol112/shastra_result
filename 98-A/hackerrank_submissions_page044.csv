submission_id,username,problem_name,language,code,page,url
1387833929,damodarryadav,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
#include <cmath> // For abs function
6
7
using namespace std;
8
9
int main() {
10
11
    int t; // Number of test cases
12
13
    cin >> t;
14
15
    while (t--) {
16
17
        int n; // Size of the array
18
19
        cin >> n;
20
21
        vector<int> nums(n);
22
23
        vector<long long> prefixSum(n); // Prefix sum array
24
25
        for (int i = 0; i < n; ++i) {
26
27
            cin >> nums[i];
28
29
            if (i == 0) {
30
31
                prefixSum[i] = nums[i];
32
33
            } else {
34
35
                prefixSum[i] = prefixSum[i - 1] + nums[i];
36
37
            }
38
39
        }
40
41
        long long totalSum = prefixSum[n - 1]; // Total sum of the array
42
43
        long long maxDifference = 0;
44
45
        // Iterate through possible partition points
46
47
        for (int i = 0; i < n - 1; ++i) {
48
49
            long long leftSum = prefixSum[i];
50
51
            long long rightSum = totalSum - leftSum;
52
53
            maxDifference = max(maxDifference, abs(leftSum - rightSum));
54
55
        }
56
57
        cout << maxDifference << endl;
58
59
    }
60
61
    return 0;
62
63
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833929
1387833932,smeetadeshra,unknown,unknown,"1
def compute_product_excluding_self(test_cases):
2
    results1 = []
3
    for t in range(test_cases):
4
        n = int(input())
5
        values = list(map(int, input().split()))
6
        7
        prefix = [1] * n
8
        suffix = [1] * n
9
        10
        for i in range(1, n):
11
            prefix[i] = prefix[i - 1] * values[i - 1]
12
        13
        for i in range(n - 2, -1, -1):
14
            suffix[i] = suffix[i + 1] * values[i + 1]
15
        16
        result = [prefix[i] * suffix[i] for i in range(n)]
17
        results1.append("" "".join(map(str, result)))
18
    19
    print(""\n"".join(results1))
20
if __name__ == ""__main__"":
21
    T = int(input())
22
    compute_product_excluding_self(T)
23",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833932
1387833935,shruthika2720,unknown,unknown,"1
def maxAbsDifference(t, test_cases):
2
    results = []
3
    4
    for test_case in test_cases:
5
        n, nums = test_case
6
        total_sum = sum(nums)
7
        prefix_sum = 0
8
        max_diff = 0
9
        10
        11
        for i in range(1, n):
12
            prefix_sum += nums[i - 1]
13
            left_sum = prefix_sum
14
            right_sum = total_sum - left_sum
15
            max_diff = max(max_diff, abs(left_sum - right_sum))
16
        17
        results.append(max_diff)
18
    19
    return results
20
21
22
t = int(input())  
23
test_cases = []
24
for _ in range(t):
25
    n = int(input())  
26
    nums = list(map(int, input().split()))  
27
    test_cases.append((n, nums))
28
29
30
results = maxAbsDifference(t, test_cases)
31
for result in results:
32
    print(result)
33",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833935
1387833923,shubhamgupta3009,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        try {
7
            Scanner scanner = new Scanner(System.in);
8
            int T = scanner.nextInt();
9
            10
            for (int t = 0; t < T; t++) {
11
                int N = scanner.nextInt();
12
                long K = scanner.nextLong();
13
                14
                long[] energy = new long[N];
15
                for (int i = 0; i < N; i++) {
16
                    energy[i] = scanner.nextLong();
17
                }
18
                19
                System.out.println(minOperationsToEqualize(N, K, energy));
20
            }
21
            scanner.close();
22
        } catch (Exception e) {
23
            return;
24
        }
25
    }
26
    27
    private static long minOperationsToEqualize(int N, long K, long[] energy) {
28
        try {
29
            if (N == 1) return 0;
30
            31
            long total = 0;
32
            boolean allSame = true;
33
            34
            for (int i = 1; i < N; i++) {
35
                if (energy[i] != energy[0]) {
36
                    allSame = false;
37
                    break;
38
                }
39
            }
40
            41
            if (allSame) return 0;
42
            43
            for (long e : energy) {
44
                total += e;
45
            }
46
            47
            if (total % N != 0) {
48
                return -1;
49
            }
50
            51
            long target = total / N;
52
            long[] diffs = new long[N];
53
            54
            for (int i = 0; i < N; i++) {
55
                diffs[i] = energy[i] - target;
56
                if (Math.abs(diffs[i]) % K != 0) {
57
                    return -1;
58
                }
59
            }
60
            61
            long operations = 0;
62
            long runningDiff = 0;
63
            64
            for (int i = 0; i < N - 1; i++) {
65
                runningDiff += diffs[i];
66
                if (runningDiff != 0) {
67
                    if (Math.abs(runningDiff) % K != 0) {
68
                        return -1;
69
                    }
70
                    operations += Math.abs(runningDiff) / K;
71
                }
72
            }
73
            74
            runningDiff += diffs[N-1];
75
            if (runningDiff != 0) {
76
                return -1;
77
            }
78
            79
            return operations;
80
        } catch (Exception e) {
81
            return -1;
82
        }
83
    }
84
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833923
1387833925,yashrajverma0805,unknown,unknown,"1
def max_subarray_difference(arr, n):
2
    # Calculate prefix sums array
3
    prefix_sum = [0] * (n + 1)
4
    for i in range(n):
5
        prefix_sum[i + 1] = prefix_sum[i] + arr[i]
6
    7
    max_diff = float('-inf')
8
    9
    # Try all possible partition points
10
    # For each partition point i, 
11
    # left subarray is [0:i] and right subarray is [i:n]
12
    for i in range(1, n):
13
        # Use prefix sums to get subarray sums in O(1)
14
        left_sum = prefix_sum[i] - prefix_sum[0]  # sum of arr[0:i]
15
        right_sum = prefix_sum[n] - prefix_sum[i]  # sum of arr[i:n]
16
        17
        # Calculate absolute difference
18
        diff = abs(left_sum - right_sum)
19
        max_diff = max(max_diff, diff)
20
    21
    return max_diff
22
23
def solve():
24
    # Read number of test cases
25
    t = int(input())
26
    27
    for _ in range(t):
28
        # Read array size
29
        n = int(input())
30
        31
        # Read array elements
32
        nums = list(map(int, input().split()))
33
        34
        # Calculate and print result
35
        result = max_subarray_difference(nums, n)
36
        print(result)
37
38
if __name__ == ""__main__"":
39
    solve()
40",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833925
1387833927,h1032220736,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        int T = scanner.nextInt();  // Number of test cases
8
        9
        for (int t = 0; t < T; t++) {
10
            int n = scanner.nextInt();  // Number of nodes
11
            int[] values = new int[n];
12
            13
            // Reading the values of the nodes
14
            for (int i = 0; i < n; i++) {
15
                values[i] = scanner.nextInt();
16
            }
17
            18
            // Result array to store the final result
19
            int[] result = new int[n];
20
            21
            // Compute left product and store it in the result array
22
            int left = 1;
23
            for (int i = 0; i < n; i++) {
24
                result[i] = left;
25
                left *= values[i];
26
            }
27
            28
            // Compute right product and update the result array
29
            int right = 1;
30
            for (int i = n - 1; i >= 0; i--) {
31
                result[i] *= right;
32
                right *= values[i];
33
            }
34
            35
            // Print the result array
36
            for (int i = 0; i < n; i++) {
37
                System.out.print(result[i] + "" "");
38
            }
39
            System.out.println();
40
        }
41
        42
        scanner.close();
43
    }
44
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833927
1387833919,sohampatil1807,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    """"""
3
    Calculate minimum operations needed to equalize energy across stations.
4
    Returns -1 if impossible.
5
    """"""
6
    # Calculate total energy and check if equalization is possible
7
    total_energy = sum(energy)
8
    if total_energy % N != 0:
9
        return -1
10
        11
    target = total_energy // N
12
    13
    # If already equalized
14
    if all(e == target for e in energy):
15
        return 0
16
    17
    # Calculate needed transfers and check if possible
18
    operations = 0
19
    excess = 0  # Track running excess/deficit
20
    21
    for i in range(N):
22
        # Add current station's excess/deficit to running total
23
        excess += energy[i] - target
24
        25
        # If excess can't be transferred using K-unit operations
26
        if abs(excess) % K != 0:
27
            return -1
28
            29
        if excess != 0:
30
            operations += abs(excess) // K
31
    32
    # Check if we ended with zero excess (balanced transfers)
33
    if excess != 0:
34
        return -1
35
        36
    return operations
37
38
def main():
39
    T = int(input())
40
    for _ in range(T):
41
        N, K = map(int, input().split())
42
        energy = list(map(int, input().split()))
43
        print(min_operations_to_equalize(N, K, energy))
44
45
if __name__ == ""__main__"":
46
    main()
47",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833919
1387833921,devanshudandeka1,unknown,unknown,"1
def right():
2
    T = int(input())
3
    for _ in range(T):
4
        N, K = map(int, input().split())
5
        energy = list(map(int, input().split()))
6
        7
        total_energy = sum(energy)
8
        9
        if total_energy % N != 0:
10
            print(-1)
11
            continue
12
        13
        target = total_energy // N
14
        operations = 0
15
        16
        for i in range(N):
17
            diff = energy[i] - target
18
            19
            if diff % K != 0:
20
                operations = -1
21
                break
22
                23
            # Move the energy to the next station
24
            if i < N - 1:
25
                energy[i + 1] += diff
26
            else:
27
                energy[0] += diff
28
            29
            operations += abs(diff) // K
30
        31
        print(operations)
32
33
right()   ",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833921
1387833918,abhig3340,unknown,unknown,"1
def product(test_cases):
2
    results = []
3
    4
    for values in test_cases:
5
        n = len(values)
6
        result = [1] * n
7
        8
        total_prod = 1
9
        for value in values:
10
            total_prod *= value
11
        12
        for i in range(n):
13
            result[i] = total_prod // values[i]
14
        15
        results.append(result)
16
    17
    return results
18
19
if __name__ == ""__main__"":
20
    T = int(input())
21
    test_cases = []
22
    23
    for _ in range(T):
24
        n = int(input())
25
        values = list(map(int, input().split()))
26
        test_cases.append(values)
27
    28
    results = product(test_cases)
29
    30
    for result in results:
31
        print("" "".join(map(str, result)))
32",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833918
1387833917,kamblesamruddhi2,unknown,unknown,"1
def solve():
2
    T = int(input())  
3
    for _ in range(T):
4
        N, K = map(int, input().split())  
5
        energy = list(map(int, input().split()))  
6
        7
        total_energy = sum(energy)
8
        9
       10
        if total_energy % N != 0:
11
            print(-1)
12
            continue
13
        14
        target_energy = total_energy // N
15
        operations = 0
16
        current_balance = 0
17
        18
        for i in range(N):
19
            20
            current_balance += energy[i] - target_energy
21
           22
            operations += abs(current_balance) // K
23
            24
            25
            if abs(current_balance) % K != 0:
26
                operations = -1
27
                break     
28
        print(operations)
29
30
solve()",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833917
