submission_id,username,problem_name,language,code,page,url
1387833245,sohamkadam0012,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <stdbool.h>
4
5
// Function to calculate the minimum operations or check if equalization is impossible
6
int minOperationsToEqualize(int *energy, int n, int k) {
7
    long long totalEnergy = 0;
8
9
    // Calculate total energy
10
    for (int i = 0; i < n; i++) {
11
        totalEnergy += energy[i];
12
    }
13
14
    // Check if total energy is divisible by N
15
    if (totalEnergy % n != 0) {
16
        return -1; // Impossible to equalize
17
    }
18
19
    long long targetEnergy = totalEnergy / n; // Target energy for each station
20
    long long operations = 0;
21
    long long surplus = 0; // Tracks energy surplus or deficit in the cycle
22
23
    // Traverse each station and calculate the surplus or deficit
24
    for (int i = 0; i < n; i++) {
25
        surplus += energy[i] - targetEnergy;
26
27
        // If surplus is not divisible by K, return -1
28
        if (abs(surplus) % k != 0) {
29
            return -1;
30
        }
31
32
        // Add the number of operations needed for balancing the surplus
33
        operations += abs(surplus / k);
34
    }
35
36
    return operations;
37
}
38
39
int main() {
40
    int T;
41
    scanf(""%d"", &T);
42
43
    while (T--) {
44
        int n, k;
45
        scanf(""%d %d"", &n, &k);
46
47
        int *energy = (int *)malloc(n * sizeof(int));
48
        for (int i = 0; i < n; i++) {
49
            scanf(""%d"", &energy[i]);
50
        }
51
52
        // Edge Case: If all energy levels are the same, directly return 0
53
        bool alreadyEqual = true;
54
        for (int i = 1; i < n; i++) {
55
            if (energy[i] != energy[0]) {
56
                alreadyEqual = false;
57
                break;
58
            }
59
        }
60
61
        if (alreadyEqual) {
62
            printf(""0\n"");
63
        } else {
64
            int result = minOperationsToEqualize(energy, n, k);
65
            printf(""%d\n"", result);
66
        }
67
68
        free(energy);
69
    }
70
71
    return 0;
72
}
73",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833245
1387833243,nishashetty1002,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n = int(input())
4
    values = list(map(int, input().split()))
5
    6
    left = [1] * n
7
    for i in range(1, n):
8
        left[i] = left[i-1] * values[i-1]
9
    10
    right = [1] * n
11
    for i in range(n-2, -1, -1):
12
        right[i] = right[i+1] * values[i+1]
13
    14
    res = [left[i] * right[i] for i in range(n)]
15
    print(' '.join(map(str, res)))",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833243
1387833251,omg40787,unknown,unknown,"1
def product_distribution(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n = t[0]
6
        values = t[1]
7
        8
        # Calculate the total product of all values
9
        total_product = 1
10
        zero_count = 0
11
        12
        for value in values:
13
            if value != 0:
14
                total_product *= value
15
            else:
16
                zero_count += 1
17
        18
        # Generate the result array
19
        result = []
20
        for value in values:
21
            if zero_count > 1:
22
                result.append(0)
23
            elif zero_count == 1:
24
                if value == 0:
25
                    result.append(total_product)
26
                else:
27
                    result.append(0)
28
            else:
29
                result.append(total_product // value)
30
        31
        results.append(result)
32
    33
    return results
34
35
# Example usage:
36
test_cases = [
37
    (5, [1, 2, 3, 4, 5]),
38
    (5, [10, 3, 5, 6, 2])
39
]
40
41
results = product_distribution(test_cases)
42
for result in results:
43
    print(' '.join(map(str, result)))
44",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833251
1387833240,ruchishree244,unknown,unknown,"1
import java.util.*;
2
3
public class EnergyEqualization {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // Number of test cases
7
        StringBuilder result = new StringBuilder();
8
9
        while (T-- > 0) {
10
            int N = sc.nextInt(); // Number of stations
11
            int K = sc.nextInt(); // Units transferable in one operation
12
            long[] energy = new long[N]; // Use long to avoid overflow
13
            14
            long totalEnergy = 0;
15
            for (int i = 0; i < N; i++) {
16
                energy[i] = sc.nextLong();
17
                totalEnergy += energy[i];
18
            }
19
20
            // Check if equalization is possible
21
            if (totalEnergy % N != 0) {
22
                result.append(""-1\n"");
23
                continue;
24
            }
25
26
            long targetEnergy = totalEnergy / N;
27
            long surplus = 0;
28
            long operations = 0;
29
            boolean possible = true;
30
31
            for (int i = 0; i < N; i++) {
32
                long diff = energy[i] - targetEnergy;
33
34
                // Check if the difference is divisible by K
35
                if (diff % K != 0) {
36
                    possible = false;
37
                    break;
38
                }
39
40
                surplus += diff / K;
41
                operations += Math.abs(surplus);
42
            }
43
44
            result.append(possible ? operations : -1).append(""\n"");
45
        }
46
47
        System.out.print(result.toString());
48
        sc.close();
49
    }
50
}
51",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833240
1387833241,kadamaryan21418,unknown,unknown,"1
def solve_product_array(values, n):
2
    """"""
3
    Calculate product of all elements except self for each position.
4
    Uses O(1) extra space (not counting the output array).
5
    """"""
6
    # Handle edge cases
7
    if n < 2:
8
        return []
9
        10
    # Initialize result array
11
    result = [0] * n
12
    13
    # Calculate products using a two-pass approach
14
    15
    # First pass: Calculate products of all elements to the left
16
    # result[i] will store product of all elements left of i
17
    result[0] = 1
18
    for i in range(1, n):
19
        result[i] = values[i - 1] * result[i - 1]
20
    21
    # Second pass: Calculate products of all elements to the right
22
    # and multiply with existing left products
23
    right_product = 1
24
    for i in range(n - 1, -1, -1):
25
        result[i] = result[i] * right_product
26
        right_product *= values[i]
27
    28
    return result
29
30
def main():
31
    # Read number of test cases
32
    T = int(input())
33
    34
    # Process each test case
35
    for _ in range(T):
36
        # Read array size
37
        n = int(input())
38
        39
        # Read array values
40
        values = list(map(int, input().split()))
41
        42
        # Calculate result
43
        result = solve_product_array(values, n)
44
        45
        # Print result
46
        print("" "".join(map(str, result)))
47
48
if __name__ == ""__main__"":
49
    main()",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833241
1387833242,nishantsahu435,unknown,unknown,"1
def solve_energy_equalization(test_cases):
2
    results = []
3
4
    for t in range(test_cases):
5
        # Read N and K
6
        N, K = map(int, input().split())
7
        # Read energy array
8
        energy = list(map(int, input().split()))
9
10
        total_energy = sum(energy)
11
12
        # Check if it's possible to equalize
13
        if total_energy % N != 0:
14
            results.append(-1)
15
            continue
16
17
        target_energy = total_energy // N
18
        balance = 0
19
        operations = 0
20
21
        # Calculate the number of operations required
22
        for e in energy:
23
            balance += (e - target_energy)
24
            if balance % K != 0:
25
                results.append(-1)
26
                break
27
            operations += abs(balance) // K
28
        else:
29
            results.append(operations)
30
31
    for result in results:
32
        print(result)
33
34
# Input handling
35
if __name__ == ""__main__"":
36
    T = int(input())
37
    solve_energy_equalization(T)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833242
1387833237,abhishekgoyalas1,unknown,unknown,"1
def product_except_self(arr, n):
2
    # Initialize prefix and suffix product arrays
3
    prefix = [1] * n
4
    suffix = [1] * n
5
    result = [1] * n
6
    7
    # Compute prefix product
8
    for i in range(1, n):
9
        prefix[i] = prefix[i - 1] * arr[i - 1]
10
    11
    # Compute suffix product
12
    for i in range(n - 2, -1, -1):
13
        suffix[i] = suffix[i + 1] * arr[i + 1]
14
    15
    # Compute result using prefix and suffix products
16
    for i in range(n):
17
        result[i] = prefix[i] * suffix[i]
18
    19
    return result
20
21
# Read number of test cases
22
T = int(input())
23
for _ in range(T):
24
    # Read number of elements
25
    n = int(input())
26
    # Read array elements
27
    arr = list(map(int, input().split()))
28
    # Get result and print
29
    print("" "".join(map(str, product_except_self(arr, n))))
30",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833237
1387833238,gpratik0990,unknown,unknown,"1
def calculate_results(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
        8
        # Create prefix and suffix arrays
9
        prefix = [1] * n
10
        suffix = [1] * n
11
        12
        # Compute prefix product
13
        for i in range(1, n):
14
            prefix[i] = prefix[i - 1] * values[i - 1]
15
        16
        # Compute suffix product
17
        for i in range(n - 2, -1, -1):
18
            suffix[i] = suffix[i + 1] * values[i + 1]
19
        20
        # Compute result array
21
        result = [prefix[i] * suffix[i] for i in range(n)]
22
        results.append(result)
23
    24
    return results
25
26
# Input reading
27
T = int(input())
28
test_cases = []
29
30
for _ in range(T):
31
    n = int(input())
32
    values = list(map(int, input().split()))
33
    test_cases.append((n, values))
34
35
# Process and output results
36
output = calculate_results(T, test_cases)
37
for res in output:
38
    print("" "".join(map(str, res)))",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833238
1387833239,sujalnegi421,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        result = [1] * n
6
        prefix = 1
7
        for i in range(n):
8
            result[i] = prefix
9
            prefix *= values[i]
10
        suffix = 1
11
        for i in range(n - 1, -1, -1):
12
            result[i] *= suffix
13
            suffix *= values[i]
14
        results.append(result)
15
    return results
16
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    n = int(input())
21
    values = list(map(int, input().split()))
22
    test_cases.append((n, values))
23
24
results = product_except_self(test_cases)
25
for result in results:
26
    print("" "".join(map(str, result)))",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833239
1387833236,vishpratik5,unknown,unknown,"1
def solve_test_cases():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().strip().split(""\n"")
5
6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
10
    results = []
11
12
    for _ in range(T):
13
        # Read N and K
14
        N, K = map(int, data[idx].split())
15
        idx += 1
16
        # Read energy levels
17
        energy = list(map(int, data[idx].split()))
18
        idx += 1
19
20
        total_energy = sum(energy)
21
22
        # If the total energy is not divisible by N, it's impossible
23
        if total_energy % N != 0:
24
            results.append(""-1"")
25
            continue
26
27
        target_energy = total_energy // N
28
        operations = 0
29
        balance = 0
30
        possible = True
31
32
        # Check and calculate the number of operations required
33
        for e in energy:
34
            diff = e - target_energy
35
            balance += diff
36
            if balance % K != 0:
37
                possible = False
38
                break
39
            operations += abs(balance // K)
40
41
        results.append(str(operations) if possible else ""-1"")
42
43
    # Output all results
44
    sys.stdout.write(""\n"".join(results) + ""\n"")
45
46
if __name__ == ""__main__"":
47
    solve_test_cases()",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833236
