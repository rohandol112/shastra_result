submission_id,username,problem_name,language,code,page,url
1387834099,syedtahami123,unknown,unknown,"1
def minimum_operations_to_equalize(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        N, K, energy = t
6
        total_energy = sum(energy)
7
        8
        # Check if equalization is possible
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // N
14
        diffs = [energy[i] - target for i in range(N)]
15
        16
        # Check if all differences are divisible by K
17
        if any(diff % K != 0 for diff in diffs):
18
            results.append(-1)
19
            continue
20
        21
        # Calculate minimum operations
22
        operations = 0
23
        imbalance = 0
24
        25
        for diff in diffs:
26
            imbalance += diff // K
27
            operations += abs(imbalance)
28
        29
        results.append(operations)
30
    31
    return results
32
33
34
# Input handling
35
T = int(input())
36
test_cases = []
37
38
for _ in range(T):
39
    N, K = map(int, input().split())
40
    energy = list(map(int, input().split()))
41
    test_cases.append((N, K, energy))
42
43
# Compute results
44
results = minimum_operations_to_equalize(test_cases)
45
46
# Output results
47
for res in results:
48
    print(res)",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834099
1387834098,23jyotigaud,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        n = int(input())
5
        nums = list(map(int, input().split()))
6
        7
        total_sum = sum(nums)
8
        left_sum = 0
9
        max_difference = 0
10
        11
        for i in range(n - 1):
12
            left_sum += nums[i]
13
            right_sum = total_sum - left_sum
14
            max_difference = max(max_difference, abs(left_sum - right_sum))
15
        16
        print(max_difference)
17
18
if __name__ == ""__main__"":
19
    solve()",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834098
1387834102,kamblesamruddhi2,unknown,unknown,"1
t = int(input())  
2
3
for _ in range(t):
4
    n = int(input())  
5
    nums = list(map(int, input().split())) 
6
    total_sum = sum(nums)  
7
    prefix_sum = 0 
8
    max_difference = 0  
9
10
    11
    for i in range(n - 1):
12
        prefix_sum += nums[i]  
13
        suffix_sum = total_sum - prefix_sum  
14
        max_difference = max(max_difference, abs(prefix_sum - suffix_sum))  
15
16
    print(max_difference)
17",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834102
1387834095,h1032221013,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    if len(set(energy)) == 1:
3
        return 0
4
    total = sum(energy)
5
    if total % N != 0:
6
        return -1
7
    target = total // N
8
    diffs = [(x - target) for x in energy]
9
    if any(abs(d) % K != 0 for d in diffs):
10
        return -1
11
    operations = 0
12
    running_diff = 0
13
    for i in range(N-1):
14
        running_diff += diffs[i]
15
        if running_diff != 0:
16
            if abs(running_diff) % K != 0:
17
                return -1
18
            operations += abs(running_diff) // K
19
    running_diff += diffs[N-1]
20
    if running_diff != 0:
21
        return -1
22
    return operations
23
24
def main():
25
    T = int(input())
26
    for _ in range(T):
27
        N, K = map(int, input().split())
28
        energy = list(map(int, input().split()))
29
        result = min_operations_to_equalize(N, K, energy)
30
        print(result)
31
32
if __name__ == ""__main__"":
33
    main()
34",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834095
1387834097,vivaankotian1,unknown,unknown,"1
def max_absolute_difference(n, nums):
2
    total_sum = sum(nums)
3
    left_sum = 0
4
    max_diff = float('-inf')
5
6
    # Iterate through the array to find the max absolute difference
7
    for i in range(n - 1):  # Partition at each index
8
        left_sum += nums[i]
9
        right_sum = total_sum - left_sum
10
        max_diff = max(max_diff, abs(left_sum - right_sum))
11
    12
    return max_diff
13
14
# Read input
15
T = int(input())  # Number of test cases
16
for _ in range(T):
17
    n = int(input())  # Size of array
18
    nums = list(map(int, input().split()))  # Input array
19
20
    # Compute and print result
21
    print(max_absolute_difference(n, nums))",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834097
1387834096,nikhiljaiswal061,unknown,unknown,"1
def min_operations_to_equalize_energy(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
7
        if total_energy % N != 0:
8
            results.append(-1)
9
            continue
10
11
        target_energy = total_energy // N
12
        balance = 0
13
        operations = 0
14
15
        for i in range(N):
16
            balance += energy[i] - target_energy
17
            if balance % K != 0:
18
                results.append(-1)
19
                break
20
            operations += abs(balance // K)
21
        else:
22
            results.append(operations)
23
24
    return results
25
26
T = int(input())
27
test_cases = [(tuple(map(int, input().split())), list(map(int, input().split()))) for _ in range(T)]
28
results = min_operations_to_equalize_energy([(N, K, energy) for (N, K), energy in test_cases])
29
for result in results:
30
    print(result)",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834096
1387834091,ysaurabh_abd,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T; // Number of test cases
7
    cin >> T;
8
9
    while (T--) {
10
        int n; // Number of nodes
11
        cin >> n;
12
        13
        vector<int> values(n), result(n);
14
        for (int i = 0; i < n; ++i) {
15
            cin >> values[i];
16
        }
17
        18
        long long ans = 1; // Initialize to 1 for product calculation
19
        for (int i = 0; i < n; i++) {
20
            ans *= values[i];
21
        }
22
        23
        for (int i = 0; i < n; i++) {
24
            result[i] = ans / values[i];
25
        }
26
27
        // Output the result array
28
        for (int i = 0; i < n; i++) {
29
            cout << result[i] << "" "";
30
        }
31
        cout << endl;
32
    }
33
}
34
35
int main() {
36
    ios::sync_with_stdio(false);
37
    cin.tie(nullptr);
38
    solve();
39
    return 0;
40
}",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834091
1387834090,h1032220872,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <cmath>
5
using namespace std;
6
7
// Function to solve each test case
8
int min_operations_to_equalize(int N, int K, vector<int>& energy) {
9
    long long total_energy = accumulate(energy.begin(), energy.end(), 0LL);
10
11
    // Check if it's possible to equalize
12
    if (total_energy % N != 0) {
13
        return -1;
14
    }
15
16
    int target = total_energy / N;
17
    long long surplus = 0, deficit = 0;
18
19
    for (int i = 0; i < N; ++i) {
20
        if (energy[i] > target) {
21
            surplus += (energy[i] - target);
22
        } else {
23
            deficit += (target - energy[i]);
24
        }
25
    }
26
27
    // Check if surplus equals deficit and if it's divisible by K
28
    if (surplus != deficit || surplus % K != 0) {
29
        return -1;
30
    }
31
32
    return surplus / K;
33
}
34
35
int main() {
36
    int T;
37
    cin >> T;
38
39
    while (T--) {
40
        int N, K;
41
        cin >> N >> K;
42
        43
        vector<int> energy(N);
44
        for (int i = 0; i < N; ++i) {
45
            cin >> energy[i];
46
        }
47
48
        int result = min_operations_to_equalize(N, K, energy);
49
        cout << result << endl;
50
    }
51
52
    return 0;
53
}
54",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834090
1387834093,h1032221373,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt(); // Number of test cases
8
9
        while (t-- > 0) {
10
            int n = scanner.nextInt(); // Size of the array
11
            int[] nums = new int[n];
12
            13
            // Read the array
14
            for (int i = 0; i < n; i++) {
15
                nums[i] = scanner.nextInt();
16
            }
17
            18
            System.out.println(maxAbsoluteDifference(nums));
19
        }
20
        21
        scanner.close();
22
    }
23
24
    private static int maxAbsoluteDifference(int[] nums) {
25
        int n = nums.length;
26
        long totalSum = 0;
27
28
        // Calculate total sum of the array
29
        for (int num : nums) {
30
            totalSum += num;
31
        }
32
33
        long prefixSum = 0;
34
        long maxDiff = 0;
35
36
        // Iterate through the array to calculate prefix sums
37
        for (int i = 0; i < n - 1; i++) {
38
            prefixSum += nums[i];
39
            long leftSum = prefixSum;
40
            long rightSum = totalSum - prefixSum;
41
42
            // Calculate the absolute difference
43
            maxDiff = Math.max(maxDiff, Math.abs(leftSum - rightSum));
44
        }
45
46
        return (int) maxDiff;
47
    }
48
}
49",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834093
1387834089,mlal42239,unknown,unknown,"1
def product_array(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
        8
        prefix_product = [1] * n
9
        suffix_product = [1] * n
10
        result = [1] * n
11
        12
        prefix_product[0] = values[0]
13
        for i in range(1, n):
14
            prefix_product[i] = prefix_product[i-1] * values[i]
15
        16
        suffix_product[n-1] = values[n-1]
17
        for i in range(n-2, -1, -1):
18
            suffix_product[i] = suffix_product[i+1] * values[i]
19
        20
        for i in range(n):
21
            if i == 0:
22
                result[i] = suffix_product[1]
23
            elif i == n-1:
24
                result[i] = prefix_product[n-2]
25
            else:
26
                result[i] = prefix_product[i-1] * suffix_product[i+1]
27
        28
        results.append(result)
29
    30
    return results
31
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n = int(input())
37
    values = list(map(int, input().split()))
38
    test_cases.append((n, values))
39
40
results = product_array(T, test_cases)
41
42
for result in results:
43
    print("" "".join(map(str, result)))
44",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834089
