submission_id,username,problem_name,language,code,page,url
1387833605,h1032220108,unknown,unknown,"1
def minimum_operations(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, K, energy = case
6
        total_energy = sum(energy)
7
        if total_energy % N != 0:
8
            results.append(-1)
9
            continue
10
        11
        target = total_energy // N  
12
        balance = 0
13
        operations = 0
14
        15
        for i in range(N):
16
            balance += energy[i] - target  
17
            if balance % K != 0:
18
                results.append(-1)
19
                break
20
            operations += abs(balance) // K  
21
        else:
22
            results.append(operations)
23
    24
    return results
25
T = int(input())
26
test_cases = []
27
28
for _ in range(T):
29
    N, K = map(int, input().split())
30
    energy = list(map(int, input().split()))
31
    test_cases.append((N, K, energy))
32
results = minimum_operations(T, test_cases)
33
for result in results:
34
    print(result)
35",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833605
1387833606,kamblesamruddhi2,unknown,unknown,"1
T = int(input())  
2
for _ in range(T):
3
    n = int(input())
4
    values = list(map(int, input().split())) 
5
    prefix = [1] * n
6
    suffix = [1] * n
7
    result = [1] * n
8
    for i in range(1, n):
9
        prefix[i] = prefix[i - 1] * values[i - 1]
10
    for i in range(n - 2, -1, -1):
11
        suffix[i] = suffix[i + 1] * values[i + 1]
12
    for i in range(n):
13
        result[i] = prefix[i] * suffix[i]
14
    print("" "".join(map(str, result)))",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833606
1387833607,shuklaram2315,unknown,unknown,"1
def max_product_excluding_current(t, test_cases):
2
    results = []
3
    for case in range(t):
4
        n = test_cases[case][0]
5
        values = test_cases[case][1]
6
        result = [1] * n
7
        prefix_product = 1
8
        for i in range(n):
9
            result[i] = prefix_product
10
            prefix_product *= values[i]
11
        suffix_product = 1
12
        for i in range(n - 1, -1, -1):
13
            result[i] *= suffix_product
14
            suffix_product *= values[i]
15
        results.append(result)
16
    return results
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    n = int(input())
21
    values = list(map(int, input().split()))
22
    test_cases.append((n, values))
23
results = max_product_excluding_current(t, test_cases)
24
for res in results:
25
    print("" "".join(map(str, res)))
26",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833607
1387833602,h1032220299,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
void helper(){
8
    int n;
9
    cin>>n;
10
    vector<int>values(n);
11
    for(int i = 0; i < n; i++){
12
        cin>>values[i];
13
    }
14
    vector<int>result(n);
15
    for(int i = 0; i < n; i++){
16
        long long product = 1;
17
        for(int j = 0; j < n; j++){
18
            if(i != j){
19
                product *= values[j];
20
            }
21
        }
22
        result[i] = product;
23
    }
24
    for(int i = 0; i < n; i++){
25
        cout<<result[i]<<"" "";
26
    }
27
    cout<<endl;
28
}
29
30
int main() {
31
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
32
    int a;
33
    cin>>a;
34
    while(a--){
35
        helper();
36
    }
37
    return 0;
38
}
39",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833602
1387833604,laxmimehta0506,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
8
        // Number of test cases
9
        int T = scanner.nextInt();
10
11
        while (T-- > 0) {
12
            // Read N and K
13
            int N = scanner.nextInt();
14
            int K = scanner.nextInt();
15
            16
            // Read energy array
17
            int[] energy = new int[N];
18
            long totalEnergy = 0;
19
            for (int i = 0; i < N; i++) {
20
                energy[i] = scanner.nextInt();
21
                totalEnergy += energy[i];
22
            }
23
24
            // Check if the total energy is divisible by N
25
            if (totalEnergy % N != 0) {
26
                System.out.println(-1);
27
                continue;
28
            }
29
30
            long targetEnergy = totalEnergy / N;
31
            long operations = 0;
32
            long balance = 0;
33
34
            // Simulate the energy transfer process
35
            for (int i = 0; i < N; i++) {
36
                // Balance for this station
37
                energy[i] -= targetEnergy;
38
                balance += energy[i];
39
40
                // We need to check if we can perform a transfer of K units
41
                operations += Math.abs(balance) / K;
42
                43
                // If there's a remainder when dividing by K, it's impossible
44
                if (Math.abs(balance) % K != 0) {
45
                    operations = -1;
46
                    break;
47
                }
48
            }
49
50
            System.out.println(operations);
51
        }
52
53
        scanner.close();
54
    }
55
}
56",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833604
1387833601,h1032221629,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    total_sum = sum(nums)
4
    prefix_sum = 0
5
    max_diff = float('-inf')
6
    7
    for i in range(n - 1):
8
        prefix_sum += nums[i]
9
        remaining_sum = total_sum - prefix_sum
10
        max_diff = max(max_diff, abs(prefix_sum - remaining_sum))
11
    12
    return max_diff
13
14
def main():
15
    t = int(input())
16
    17
    for _ in range(t):
18
        n = int(input())
19
        nums = list(map(int, input().split()))
20
        result = max_absolute_difference(nums)
21
        print(result)
22
23
main()",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833601
1387833598,h1032220179,unknown,unknown,"1
def product_except_self(values):
2
    n = len(values)
3
    result = [1] * n
4
    5
    # Calculate the product of all elements to the left of each index
6
    left_product = 1
7
    for i in range(n):
8
        result[i] = left_product
9
        left_product *= values[i]
10
    11
    # Calculate the product of all elements to the right of each index and multiply with the left product
12
    right_product = 1
13
    for i in range(n-1, -1, -1):
14
        result[i] *= right_product
15
        right_product *= values[i]
16
    17
    return result
18
19
def main():
20
    import sys
21
    input = sys.stdin.read
22
    data = input().split()
23
    24
    idx = 0
25
    T = int(data[idx])
26
    idx += 1
27
    28
    for _ in range(T):
29
        n = int(data[idx])
30
        idx += 1
31
        values = list(map(int, data[idx:idx+n]))
32
        idx += n
33
        34
        result = product_except_self(values)
35
        print(' '.join(map(str, result)))
36
37
if __name__ == ""__main__"":
38
    main()",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833598
1387833599,unborntadpole,unknown,unknown,"1
def listToString(l):
2
    str1 = ''
3
    for i in l:
4
        str1 = str1 + str(i) + "" ""
5
    return str1.strip()
6
7
n = int(input())
8
for i in range(n):
9
    len = int(input())
10
    values = input().split()
11
    result = []
12
    for i in range(len):
13
        temp_num = 1
14
        for value in values:
15
            value = int(value)
16
            if value !=  int(values[i]):
17
                temp_num *= value
18
        result.append(temp_num)
19
    print(listToString(result))",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833599
1387833600,h1032220703,unknown,unknown,"1
import java.util.*;
2
3
public class PowerStationEqualizer {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read number of test cases
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            // Read N and K
12
            int N = scanner.nextInt();
13
            int K = scanner.nextInt();
14
15
            // Read energy levels
16
            int[] energy = new int[N];
17
            long totalEnergy = 0;
18
            for (int i = 0; i < N; i++) {
19
                energy[i] = scanner.nextInt();
20
                totalEnergy += energy[i];
21
            }
22
23
            // Check if equal distribution is possible
24
            if (totalEnergy % N != 0) {
25
                System.out.println(-1);
26
                continue;
27
            }
28
29
            long targetEnergy = totalEnergy / N;
30
            long operations = 0;
31
            long balance = 0;
32
33
            boolean isPossible = true;
34
35
            for (int i = 0; i < N; i++) {
36
                long diff = energy[i] - targetEnergy;
37
                balance += diff;
38
39
                // K must perfectly divide the net balance at each step
40
                if (Math.abs(balance) % K != 0) {
41
                    isPossible = false;
42
                    break;
43
                }
44
45
                operations += Math.abs(balance / K);
46
            }
47
48
            // Output result based on the computed balance
49
            System.out.println(isPossible ? operations : -1);
50
        }
51
52
        scanner.close();
53
    }
54
}
55",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833600
