submission_id,username,problem_name,language,code,page,url
1387833757,shshloka,unknown,unknown,"1
def equalize_energy(test_cases):
2
    results = []
3
    for t in test_cases:
4
        N, K = t[0]
5
        energy = t[1]
6
        7
        total_energy = sum(energy)
8
        if total_energy % N != 0:
9
            results.append(-1)
10
            continue
11
        12
        target = total_energy // N
13
        operations = 0
14
        imbalance = 0
15
        16
        for e in energy:
17
            imbalance += e - target
18
            if abs(imbalance) % K != 0:
19
                results.append(-1)
20
                break
21
            operations += abs(imbalance) // K
22
        else:
23
            results.append(operations)
24
    25
    return results
26
27
T = int(input())
28
test_cases = []
29
for _ in range(T):
30
    N, K = map(int, input().split())
31
    energy = list(map(int, input().split()))
32
    test_cases.append(((N, K), energy))
33
34
results = equalize_energy(test_cases)
35
for res in results:
36
    print(res)
37",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833757
1387833760,ayushaj14,unknown,unknown,"1
def solve_product_exclusion(test_cases):
2
    results = []
3
4
    for values in test_cases:
5
        n = len(values)
6
        if n == 2:
7
            # Special edge case for n = 2
8
            results.append(f""{values[1]} {values[0]}"")
9
            continue
10
11
        # Initialize prefix and suffix product arrays
12
        prefix = [1] * n
13
        suffix = [1] * n
14
15
        # Compute prefix products
16
        for i in range(1, n):
17
            prefix[i] = prefix[i - 1] * values[i - 1]
18
19
        # Compute suffix products
20
        for i in range(n - 2, -1, -1):
21
            suffix[i] = suffix[i + 1] * values[i + 1]
22
23
        # Compute result for each index
24
        result = [prefix[i] * suffix[i] for i in range(n)]
25
        results.append("" "".join(map(str, result)))
26
27
    # Print all results at once
28
    print(""\n"".join(results))
29
30
31
def main():
32
    # Read input
33
    T = int(input().strip())
34
    test_cases = []
35
36
    for _ in range(T):
37
        n = int(input().strip())
38
        values = list(map(int, input().strip().split()))
39
        test_cases.append(values)
40
41
    solve_product_exclusion(test_cases)
42
43
44
if __name__ == ""__main__"":
45
    main()
46",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833760
1387833761,h1032220798,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        n = int(input())
5
        nums = list(map(int, input().split()))
6
        7
        total_sum = sum(nums)
8
        left_sum = 0
9
        max_difference = 0
10
        11
        for i in range(n - 1):
12
            left_sum += nums[i]
13
            right_sum = total_sum - left_sum
14
            max_difference = max(max_difference, abs(left_sum - right_sum))
15
        16
        print(max_difference)
17
18
solve()",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833761
1387833753,sonamyadav7208,unknown,unknown,"1
def product_array(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n = test_cases[t][0]
6
        values = test_cases[t][1]
7
        8
        prefix_product = [1] * n
9
        suffix_product = [1] * n
10
        result = [1] * n
11
        12
        prefix_product[0] = values[0]
13
        for i in range(1, n):
14
            prefix_product[i] = prefix_product[i-1] * values[i]
15
        16
        suffix_product[n-1] = values[n-1]
17
        for i in range(n-2, -1, -1):
18
            suffix_product[i] = suffix_product[i+1] * values[i]
19
        20
        for i in range(n):
21
            if i == 0:
22
                result[i] = suffix_product[1]
23
            elif i == n-1:
24
                result[i] = prefix_product[n-2]
25
            else:
26
                result[i] = prefix_product[i-1] * suffix_product[i+1]
27
        28
        results.append(result)
29
    30
    return results
31
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n = int(input())
37
    values = list(map(int, input().split()))
38
    test_cases.append((n, values))
39
40
results = product_array(T, test_cases)
41
42
for result in results:
43
    print("" "".join(map(str, result)))",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833753
1387833755,singhark94,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int findMaxDifference(vector<int>& nums) {
9
    int n = nums.size();
10
    if (n < 2) return 0;
11
    12
    // Calculate prefix sums for efficient subarray sum computation
13
    vector<long long> prefixSum(n + 1, 0);
14
    for (int i = 0; i < n; i++) {
15
        prefixSum[i + 1] = prefixSum[i] + nums[i];
16
    }
17
    18
    // Try all possible partition points to find maximum difference
19
    long long maxDiff = 0;
20
    // We need at least one element in each partition
21
    for (int i = 1; i < n; i++) {
22
        // Left subarray sum: from 0 to i-1
23
        long long leftSum = prefixSum[i] - prefixSum[0];
24
        // Right subarray sum: from i to n-1
25
        long long rightSum = prefixSum[n] - prefixSum[i];
26
        27
        // Calculate absolute difference
28
        long long diff = abs(leftSum - rightSum);
29
        maxDiff = max(maxDiff, diff);
30
    }
31
    32
    return maxDiff;
33
}
34
35
int main() {
36
    int t;
37
    cin >> t;
38
    39
    while (t--) {
40
        int n;
41
        cin >> n;
42
        43
        vector<int> nums(n);
44
        for (int i = 0; i < n; i++) {
45
            cin >> nums[i];
46
        }
47
        48
        cout << findMaxDifference(nums) << endl;
49
    }
50
    51
    return 0;
52
}",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833755
1387833756,sauravyadav244,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    total_sum = sum(nums)
4
    left_sum = 0
5
    max_diff = 0
6
7
    for i in range(n - 1):
8
        left_sum += nums[i]
9
        right_sum = total_sum - left_sum
10
        max_diff = max(max_diff, abs(left_sum - right_sum))
11
12
    return max_diff
13
14
# Input reading
15
t = int(input())
16
results = []
17
18
for _ in range(t):
19
    n = int(input())
20
    nums = list(map(int, input().split()))
21
    results.append(max_absolute_difference(nums))
22
23
# Output results
24
for res in results:
25
    print(res)
26",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833756
1387833747,h1032221359,unknown,unknown,"1
def product_except_self(values):
2
    n = len(values)
3
    result = [1] * n
4
5
    left_product = 1
6
    for i in range(n):
7
        result[i] = left_product
8
        left_product *= values[i]
9
   10
    right_product = 1
11
    for i in range(n-1, -1, -1):
12
        result[i] *= right_product
13
        right_product *= values[i]
14
    15
    return result
16
17
def main():
18
    import sys
19
    input = sys.stdin.read
20
    data = input().split()
21
    22
    idx = 0
23
    T = int(data[idx])
24
    idx += 1
25
    26
    for _ in range(T):
27
        n = int(data[idx])
28
        idx += 1
29
        values = list(map(int, data[idx:idx+n]))
30
        idx += n
31
        32
        result = product_except_self(values)
33
        print(' '.join(map(str, result)))
34
35
if __name__ == ""__main__"":
36
    main()",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833747
1387833749,yashdubeyenter15,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); 
8
        9
        while (T-- > 0) {
10
            int N = scanner.nextInt(); 
11
            int K = scanner.nextInt(); 
12
            13
            long[] energy = new long[N];
14
            long totalEnergy = 0;
15
            16
            17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextLong();
19
                totalEnergy += energy[i];
20
            }
21
            22
            System.out.println(minimumOperations(N, K, energy, totalEnergy));
23
        }
24
        25
        scanner.close();
26
    }
27
    28
    private static int minimumOperations(int N, int K, long[] energy, long totalEnergy) {
29
        30
        if (totalEnergy % N != 0) {
31
            return -1;
32
        }
33
        34
        long targetEnergy = totalEnergy / N;
35
        36
       37
        boolean isEqualized = true;
38
        for (int i = 0; i < N; i++) {
39
            if (energy[i] != targetEnergy) {
40
                isEqualized = false;
41
                break;
42
            }
43
        }
44
        if (isEqualized) {
45
            return 0;
46
        }
47
        48
       49
        for (int i = 0; i < N; i++) {
50
            if (Math.abs(energy[i] - targetEnergy) % K != 0) {
51
                return -1;
52
            }
53
        }
54
        55
        56
        int operations = 0;
57
        for (int i = 0; i < N; i++) {
58
            operations += Math.abs(energy[i] - targetEnergy) / K;
59
        }
60
        61
        62
        return operations / 2;
63
    }
64
}",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833749
1387833752,unborntadpole,unknown,unknown,"1
def listToString(l):
2
    str1 = ''
3
    for i in l:
4
        str1 = str1 + str(i) + "" ""
5
    return str1.strip()
6
7
n = int(input())
8
for i in range(n):
9
    len = int(input())
10
    values = input().split()
11
    result = []
12
    for i in range(len):
13
        temp_num = 1
14
        for value in values:
15
            value = int(value)
16
            if value !=  int(values[i]):
17
                temp_num *= value
18
        result.append(temp_num)
19
    print(listToString(result))",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833752
1387833746,paragchaudhary_1,unknown,unknown,"1
def min_operations(n, k, energy):
2
    """"""
3
    Calculates the minimum number of operations required to equalize the energy across all stations.
4
5
    Args:
6
      n: The number of power stations.
7
      k: The number of energy units that can be transferred in one operation.
8
      energy: A list of integers representing the energy of each station.
9
10
    Returns:
11
      The minimum number of operations required, or -1 if it's impossible to equalize.
12
    """"""
13
14
    total_energy = sum(energy)
15
    if total_energy % n != 0:
16
        return -1
17
18
    target_energy = total_energy // n
19
    operations = 0
20
    surplus = 0
21
    deficit = 0
22
23
    for i in range(n):
24
        diff = energy[i] - target_energy
25
        if diff > 0:
26
            surplus += diff  # Energy that needs to be transferred out
27
        elif diff < 0:
28
            deficit -= diff  # Energy that needs to be transferred in
29
30
    # Both surplus and deficit must be equal to achieve the balance
31
    if surplus != deficit:
32
        return -1
33
34
    operations = (surplus + k - 1) // k  # Total operations needed (surplus or deficit)
35
36
    return operations
37
38
# Get number of test cases
39
t = int(input())
40
41
for _ in range(t):
42
    n, k = map(int, input().split())
43
    energy = list(map(int, input().split()))
44
    result = min_operations(n, k, energy)
45
    print(result)
46",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833746
