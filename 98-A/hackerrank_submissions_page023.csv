submission_id,username,problem_name,language,code,page,url
1387834393,goswamyashutosh9,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        prefix = [1] * n
6
        suffix = [1] * n
7
        result = [1] * n
8
        9
        # Compute prefix products
10
        for i in range(1, n):
11
            prefix[i] = prefix[i - 1] * values[i - 1]
12
        13
        # Compute suffix products
14
        for i in range(n - 2, -1, -1):
15
            suffix[i] = suffix[i + 1] * values[i + 1]
16
        17
        # Compute result array
18
        for i in range(n):
19
            result[i] = prefix[i] * suffix[i]
20
        21
        results.append(result)
22
    23
    return results
24
25
# Input Reading
26
T = int(input())
27
test_cases = []
28
for _ in range(T):
29
    n = int(input())
30
    values = list(map(int, input().split()))
31
    test_cases.append((n, values))
32
33
# Compute and Output Results
34
results = product_except_self(test_cases)
35
for res in results:
36
    print(' '.join(map(str, res)))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834393
1387834392,jaidevgupta2004,unknown,unknown,"1
def product_array(arr):
2
    n = len(arr)
3
    left = [1] * n
4
    right = [1] * n
5
6
    # Calculate left product array
7
    for i in range(1, n):
8
        left[i] = left[i-1] * arr[i-1]
9
10
    # Calculate right product array
11
    for i in range(n-2, -1, -1):
12
        right[i] = right[i+1] * arr[i+1]
13
14
    # Calculate result array
15
    result = [left[i] * right[i] for i in range(n)]
16
17
    return result
18
19
# Get number of test cases
20
t = int(input())
21
22
for _ in range(t):
23
    n = int(input())
24
    arr = list(map(int, input().split()))
25
    result = product_array(arr)
26
    print(*result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834392
1387834399,utsavsingh2826,unknown,unknown,"1
2
3
4
import java.util.Scanner;
5
6
public class MinOperations {
7
8
    // Method to calculate the minimum number of operations required to equalize energy
9
    public static int minOperations(int n, int k, int[] energy) {
10
        // Calculate the total energy
11
        int totalEnergy = 0;
12
        for (int i = 0; i < n; i++) {
13
            totalEnergy += energy[i];
14
        }
15
        16
        // If total energy is not divisible by n, return -1
17
        if (totalEnergy % n != 0) {
18
            return -1;
19
        }
20
        21
        // Calculate the target energy for each station
22
        int targetEnergy = totalEnergy / n;
23
        int operations = 0;
24
25
        // Calculate the number of operations required
26
        for (int i = 0; i < n; i++) {
27
            int diff = energy[i] - targetEnergy;
28
            if (diff > 0) {
29
                // Ceiling division to calculate the number of operations
30
                operations += (diff + k - 1) / k;
31
            }
32
        }
33
34
        return operations;
35
    }
36
37
    public static void main(String[] args) {
38
        Scanner scanner = new Scanner(System.in);
39
        40
        // Get number of test cases
41
        int t = scanner.nextInt();
42
        43
        for (int i = 0; i < t; i++) {
44
            // Read n and k
45
            int n = scanner.nextInt();
46
            int k = scanner.nextInt();
47
            48
            // Read energy array
49
            int[] energy = new int[n];
50
            for (int j = 0; j < n; j++) {
51
                energy[j] = scanner.nextInt();
52
            }
53
            54
            // Get the minimum operations
55
            int result = minOperations(n, k, energy);
56
            57
            // Print the result
58
            System.out.println(result);
59
        }
60
        61
        scanner.close();
62
    }
63
}
64
65
66",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834399
1387834382,h1032221062,unknown,unknown,"1
def maxAbsoluteDifference(t, test_cases):
2
    for nums in test_cases:
3
        n = len(nums)
4
        total_sum = sum(nums)
5
        prefix_sum = 0
6
        max_diff = 0
7
        8
        # Loop through possible partitions
9
        for i in range(1, n):
10
            prefix_sum += nums[i-1]
11
            subarray1_sum = prefix_sum
12
            subarray2_sum = total_sum - subarray1_sum
13
            max_diff = max(max_diff, abs(subarray1_sum - subarray2_sum))
14
        15
        print(max_diff)
16
17
# Input Parsing
18
t = int(input())  # Number of test cases
19
test_cases = []
20
for _ in range(t):
21
    n = int(input())  # Size of the array
22
    nums = list(map(int, input().split()))  # The array itself
23
    test_cases.append(nums)
24
25
maxAbsoluteDifference(t, test_cases)
26",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834382
1387834384,ansh_shetty_22,unknown,unknown,"1
with Ada.Text_IO; use Ada.Text_IO;
2
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
3
4
procedure Solution is
5
   T : Integer;
6
begin
7
   Get(T);
8
   for Testcase in 1 .. T loop
9
      declare
10
         N : Integer;
11
         Values : array (1 .. 100000) of Integer;
12
         Total_Product : Integer := 1;
13
         Zero_Count : Integer := 0;
14
         Results : array (1 .. 100000) of Integer;
15
      begin
16
         Get(N);
17
         for I in 1 .. N loop
18
            Get(Values(I));
19
            if Values(I) = 0 then
20
               Zero_Count := Zero_Count + 1;
21
            else
22
               Total_Product := Total_Product * Values(I);
23
            end if;
24
         end loop;
25
26
         for I in 1 .. N loop
27
            if Zero_Count > 1 then
28
               Results(I) := 0;
29
            elsif Zero_Count = 1 then
30
               if Values(I) = 0 then
31
                  Results(I) := Total_Product;
32
               else
33
                  Results(I) := 0;
34
               end if;
35
            else
36
               Results(I) := Total_Product / Values(I);
37
            end if;
38
         end loop;
39
40
         for I in 1 .. N loop
41
            Put(Results(I), 0);
42
            if I < N then
43
               Put("" "");
44
            else
45
               New_Line;
46
            end if;
47
         end loop;
48
      end;
49
   end loop;
50
end Solution;
51
52",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834384
1387834388,saurabhshuklaaa1,unknown,unknown,"1
def solve():
2
3
    t = int(input())
4
5
    for _ in range(t):
6
7
        n = int(input())
8
9
        nums = list(map(int, input().split()))
10
11
        12
13
        total_sum = sum(nums)
14
15
        left_sum = 0
16
17
        max_difference = 0
18
19
        20
21
        for i in range(n - 1):
22
23
            left_sum += nums[i]
24
25
            right_sum = total_sum - left_sum
26
27
            max_difference = max(max_difference, abs(left_sum - right_sum))
28
29
        30
31
        print(max_difference)
32
33
solve()",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834388
1387834373,maurya_anjali061,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        n = int(input())
5
        values = list(map(int, input().split()))
6
        product = 1
7
        zero_count = 0
8
        9
        for value in values:
10
            if value != 0:
11
                product *= value
12
            else:
13
                zero_count += 1
14
        15
        result = []
16
        17
        if zero_count > 1:
18
            result = [0] * n
19
        elif zero_count == 1:
20
            for value in values:
21
                if value == 0:
22
                    result.append(product)
23
                else:
24
                    result.append(0)
25
        else:
26
            for value in values:
27
                result.append(product // value)
28
        29
        print("" "".join(map(str, result)))
30
31
solve()  
32",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834373
1387834374,h1032221532,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        for i in range(1, n):
11
            prefix[i] = prefix[i - 1] * values[i - 1]
12
        13
        for i in range(n - 2, -1, -1):
14
            suffix[i] = suffix[i + 1] * values[i + 1]
15
        16
        17
        for i in range(n):
18
            result[i] = prefix[i] * suffix[i]
19
        20
        results.append(result)
21
    22
    return results
23
24
25
T = int(input())
26
test_cases = []
27
28
for _ in range(T):
29
    n = int(input())
30
    values = list(map(int, input().split()))
31
    test_cases.append((n, values))
32
33
results = product_except_self(test_cases)
34
35
for res in results:
36
    print("" "".join(map(str, res)))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834374
1387834372,panoop2005_ap,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
11
        while (T-- > 0) {
12
            int N = scanner.nextInt();
13
            int K = scanner.nextInt();
14
            int[] energy = new int[N];
15
            long sum = 0;
16
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextInt();
19
                sum += energy[i];
20
            }
21
22
            if (sum % N != 0) {
23
                System.out.println(-1);
24
                continue;
25
            }
26
27
            long target = sum / N;
28
            long imbalance = 0;
29
            long operations = 0;
30
31
            for (int i = 0; i < N; i++) {
32
                imbalance += energy[i] - target;
33
34
                if (Math.abs(imbalance) % K != 0) { 
35
                    operations = -1;
36
                    break;
37
                }
38
39
                operations += Math.abs(imbalance) / K;
40
            }
41
42
            System.out.println(operations);
43
        }
44
        scanner.close();
45
    }
46
}",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834372
1387834371,vivekbhandari101,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
4
using namespace std;
5
6
vector<int> productArray(const vector<int>& nums) {
7
    int n = nums.size();
8
    vector<int> left(n, 1);
9
    vector<int> right(n, 1);
10
    vector<int> result(n);
11
12
    // Calculate left product
13
    for (int i = 1; i < n; ++i) {
14
        left[i] = left[i - 1] * nums[i - 1];
15
    }
16
17
    // Calculate right product
18
    for (int i = n - 2; i >= 0; --i) {
19
        right[i] = right[i + 1] * nums[i + 1];
20
    }
21
22
    // Calculate result
23
    for (int i = 0; i < n; ++i) {
24
        result[i] = left[i] * right[i];
25
    }
26
27
    return result;
28
}
29
30
int main() {
31
    int t;
32
    cin >> t;
33
34
    while (t--) {
35
        int n;
36
        cin >> n;
37
38
        vector<int> nums(n);
39
        for (int i = 0; i < n; ++i) {
40
            cin >> nums[i];
41
        }
42
43
        vector<int> result = productArray(nums);
44
45
        for (int i = 0; i < n; ++i) {
46
            cout << result[i] << "" "";
47
        }
48
        cout << endl;
49
    }
50
51
    return 0;
52
}",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834371
