submission_id,username,problem_name,language,code,page,url
1387835030,HarshShrivastava,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc=new Scanner(System.in);
8
        int t=sc.nextInt();
9
        while(t>0){
10
            int n=sc.nextInt();
11
            int i;
12
            int a[]=new int[n];
13
            long sump=0;
14
            long sumn=0;
15
            for(i=0;i<n;i++){
16
                a[i]=sc.nextInt();
17
                if(a[i]>=0)
18
                    sump+=a[i];
19
                else
20
                    sumn+=a[i];
21
            }
22
            if(sumn!=0)
23
                System.out.println(Math.abs(sump-sumn));
24
            else{
25
                Arrays.sort(a);
26
                System.out.println(Math.abs(sump-a[0]-a[0]));
27
            }
28
            t--;
29
        }
30
    }
31
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387835030
1387835039,shivangichouhan1,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
3
    total_energy = sum(energy)
4
5
    6
7
    # If total energy is not divisible by N, equalization is impossible
8
9
    if total_energy % N != 0:
10
11
        return -1
12
13
    target = total_energy // N  # Each station should have this amount
14
15
    operations = 0
16
17
    diff = 0  # To track energy imbalance
18
19
    for i in range(N):
20
21
        diff += energy[i] - target  # Calculate running difference
22
23
        # If the difference is not a multiple of K, balancing is impossible
24
25
        if diff % K != 0:
26
27
            return -1
28
29
        operations += abs(diff) // K  # Count number of transfers
30
31
    return operations
32
33
# Read input
34
35
T = int(input())  # Number of test cases
36
37
for _ in range(T):
38
39
    N, K = map(int, input().split())
40
41
    energy = list(map(int, input().split()))
42
43
    print(min_operations_to_equalize(N, K, energy))",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835039
1387835044,swathiharish2349,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include<bits/stdc++.h>
7
using namespace std;
8
9
int operation(vector<int>& arr, int s, int k, int avg){
10
    int n = arr.size();
11
    12
    int op=0;
13
    14
    for(int i=s; i<n; i++){
15
        if(arr[i]>avg){
16
            arr[i]-=k;
17
            op++;
18
            if(i+1<n) arr[i+1]+=k;
19
            else arr[0]+=k;
20
        }
21
    }
22
    23
    for(int i=0; i<s; i++){
24
        if(arr[i]>avg){
25
            arr[i]-=k;
26
            op++;
27
            if(i+1<n) arr[i+1]+=k;
28
            else arr[0]+=k;
29
        }
30
    }
31
    return op;
32
}
33
34
int findStart(vector<int>& arr, int avg, int k){
35
    int n = arr.size();
36
    int maxi=INT_MIN;
37
    int strt=0;
38
    39
    for(int i=0; i<n; i++){
40
        if(arr[i]>maxi){
41
            strt=i;
42
            maxi=arr[i];
43
        }
44
    }
45
    if(maxi==avg) return -1;
46
    47
    return strt;
48
    49
}
50
51
int solution(vector<int>& arr, long long sum, int k){
52
    int n = arr.size();
53
    if(sum%n!=0) return -1;
54
    55
    int avg=sum/n;
56
    57
    58
    int op=0;
59
    // bool flag=true;
60
    while(true){
61
        int strt = findStart(arr, avg, k);
62
        if(strt==-1) return op;
63
        op+=operation(arr,strt,k,avg);
64
    }
65
    return -1; //syntax
66
}
67
68
69
int main() {
70
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
71
    int t;
72
    cin>>t;
73
    while(t--){
74
        int n,k;
75
        cin>>n>>k;
76
        vector<int> arr(n);
77
        long long sum=0;
78
        for(int i=0; i<n; i++){
79
            cin>>arr[i];
80
            sum+=arr[i];
81
        }
82
        83
        int ans = solution(arr, sum, k);
84
        cout<<ans<<endl;
85
    }
86
}
87",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835044
1387835008,jeettrivedi2004,unknown,unknown,"1
test=int(input())
2
for z in range(test):
3
    n,k=map(int,input().split())
4
    l1=list(map(int,input().split()))
5
    sum1=sum(l1)
6
    if sum1%n!=0:
7
        print(-1)
8
    else:
9
        res,total=0,0
10
        avg=sum1//n
11
        l1=[i-avg for i in l1]
12
        for i in l1:
13
            total+=i
14
            if total%k !=0:
15
                print(-1)
16
                break
17
            res+=abs(total)//k
18
        else:
19
            print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835008
1387835026,ambujbaranwal,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
4
import sys
5
input = sys.stdin.read().split()
6
ptr = 0
7
T = int(input[ptr])
8
ptr += 1
9
for _ in range(T):
10
    n = int(input[ptr])
11
    ptr += 1
12
    values = list(map(int, input[ptr:ptr + n]))
13
    ptr += n
14
15
    prefix = [1] * n
16
    for i in range(1, n):
17
        prefix[i] = prefix[i - 1] * values[i - 1]
18
19
    suffix = [1] * n
20
    for i in range(n - 2, -1, -1):
21
        suffix[i] = suffix[i + 1] * values[i + 1]
22
23
    result = [prefix[i] * suffix[i] for i in range(n)]
24
    print(' '.join(map(str, result)))
25
26",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387835026
1387835000,imharsh1910,unknown,unknown,"1
def maximum_diff(arr):
2
    total_sum = sum(arr)
3
    left_sum = 0
4
    max_diff = 0
5
    6
    for i in range(len(arr) - 1):  
7
        left_sum += arr[i]
8
        right_sum = total_sum - left_sum
9
        max_diff = max(max_diff, abs(left_sum - right_sum))
10
    11
    return max_diff
12
13
14
t = int(input()) 
15
for _ in range(t):
16
    n = int(input())  
17
    arr = list(map(int, input().split())) 
18
    print(maximum_diff(arr))  
19",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387835000
1387834986,h1032220371,unknown,unknown,"1
t=int(input())
2
for i in range(t):
3
    n=int(input())
4
    nums=list(map(int,input().split()))
5
    6
    nums_1=min(nums)
7
    nums_2=sum(nums)-nums_1  
8
    result=abs(nums_1-nums_2)
9
    10
    print(result)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834986
1387834994,mahakantsingh113,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
using namespace std;
5
6
int min_operations_to_equalize_energy(int N, int K, vector<int>& energy) {
7
    long long total_energy = 0;
8
    9
    // Calculate total energy
10
    for (int i = 0; i < N; i++) {
11
        total_energy += energy[i];
12
    }
13
    14
    // If total energy is not divisible by N, it's impossible to equalize
15
    if (total_energy % N != 0) {
16
        return -1;
17
    }
18
    19
    long long target = total_energy / N;  // The energy each station should have
20
    long long operations = 0;
21
    long long balance = 0;  // Tracks the cumulative balance of energy
22
    23
    // Traverse through each station to calculate the necessary transfers
24
    for (int i = 0; i < N; i++) {
25
        long long diff = energy[i] - target; // Difference from target energy
26
        balance += diff;  // Update the balance
27
        28
        // If at any point the balance is not divisible by K, it's impossible to balance
29
        if (balance % K != 0) {
30
            return -1;  // Impossible to balance if balance is not divisible by K
31
        }
32
        33
        // Add the absolute number of K-sized moves required
34
        operations += abs(balance / K);
35
    }
36
    37
    return operations;  // Return the total number of operations required
38
}
39
40
int main() {
41
    int T;
42
    cin >> T;  // Number of test cases
43
    44
    while (T--) {
45
        int N, K;
46
        cin >> N >> K;  // Number of stations and the units that can be transferred
47
        48
        vector<int> energy(N);
49
        for (int i = 0; i < N; i++) {
50
            cin >> energy[i];  // Energy at each station
51
        }
52
        53
        // Call the function to get the minimum operations
54
        int result = min_operations_to_equalize_energy(N, K, energy);
55
        cout << result << endl;  // Output the result for each test case
56
    }
57
    58
    return 0;
59
}
60",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834994
1387834999,tanishqsatote369,unknown,unknown,"1
def moe(test_cases):
2
3
    results = []
4
5
    for t in range(len(test_cases)):
6
7
        N, K, energy = test_cases[t]
8
9
        total_energy = sum(energy)
10
11
        if total_energy % N != 0:
12
13
            results.append(-1)
14
15
            continue
16
17
        18
19
        target = total_energy // N
20
21
        operations = 0
22
23
        balance = 0  
24
25
        for i in range(N):
26
27
            balance += energy[i] - target
28
29
            if balance % K != 0:
30
31
                operations = -1
32
33
                break
34
35
            operations += abs(balance) // K
36
37
        38
39
        results.append(operations if operations != -1 else -1)
40
41
    42
43
    return results
44
45
T = int(input())
46
47
test_cases = []
48
49
for _ in range(T):
50
51
    N, K = map(int, input().split())
52
53
    energy = list(map(int, input().split()))
54
55
    test_cases.append((N, K, energy))
56
57
results = moe(test_cases)
58
59
for res in results:
60
61
    print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834999
1387834982,h1032221631,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    for test in test_cases:
4
        n, nums = test
5
        prefix = [0] * n
6
        suffix = [0] * n
7
        prefix[0] = nums[0]
8
        for i in range(1, n):
9
            prefix[i] = prefix[i - 1] + nums[i]
10
        suffix[-1] = nums[-1]
11
        for i in range(n - 2, -1, -1):
12
            suffix[i] = suffix[i + 1] + nums[i]
13
14
        max_diff = 0
15
        for i in range(n - 1):  # Partition at i
16
            left_sum = prefix[i]
17
            right_sum = suffix[i + 1]
18
            max_diff = max(max_diff, abs(left_sum - right_sum))
19
20
        results.append(max_diff)
21
22
    return results
23
24
t = int(input())
25
test_cases = []
26
for _ in range(t):
27
    n = int(input())
28
    nums = list(map(int, input().split()))
29
    test_cases.append((n, nums))
30
31
results = max_absolute_difference(t, test_cases)
32
for res in results:
33
    print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834982
