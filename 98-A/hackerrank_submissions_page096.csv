submission_id,username,problem_name,language,code,page,url
1387833084,kartikmadu2004,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n = int(input())
4
    values = list(map(int, input().split()))
5
    6
    left = [1] * n
7
    for i in range(1, n):
8
        left[i] = left[i-1] * values[i-1]
9
    10
    right = [1] * n
11
    for i in range(n-2, -1, -1):
12
        right[i] = right[i+1] * values[i+1]
13
    14
    res = [left[i] * right[i] for i in range(n)]
15
    print(' '.join(map(str, res)))",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833084
1387833076,laxmimehta0506,unknown,unknown,"1
import java.util.Scanner;
2
3
public class EnergyEqualization {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        8
        int T = sc.nextInt();  // Number of test cases
9
        10
        for (int t = 0; t < T; t++) {
11
            int N = sc.nextInt();  // Number of stations
12
            int K = sc.nextInt();  // Units of energy that can be transferred in one operation
13
            int[] energy = new int[N];
14
            int totalEnergy = 0;
15
            16
            for (int i = 0; i < N; i++) {
17
                energy[i] = sc.nextInt();
18
                totalEnergy += energy[i];
19
            }
20
            21
            // If the total energy is not divisible by N, it is impossible to equalize
22
            if (totalEnergy % N != 0) {
23
                System.out.println(-1);
24
                continue;
25
            }
26
            27
            int targetEnergy = totalEnergy / N;
28
            int operations = 0;
29
            int delta = 0;
30
            31
            // Try to equalize the energy at each station
32
            for (int i = 0; i < N; i++) {
33
                // Calculate the current difference
34
                delta += energy[i] - targetEnergy;
35
                36
                // If the difference is not a multiple of K, it is impossible
37
                if (delta % K != 0) {
38
                    operations = -1;
39
                    break;
40
                }
41
                42
                // The number of operations is the sum of absolute differences divided by K
43
                operations += Math.abs(delta) / K;
44
            }
45
            46
            System.out.println(operations);
47
        }
48
        49
        sc.close();
50
    }
51
}
52",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833076
1387833077,prashant_ps9833,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        total_product = 1
6
        zero_count = 0
7
        8
        for num in values:
9
            if num == 0:
10
                zero_count += 1
11
            else:
12
                total_product *= num
13
        14
        result = []
15
        for num in values:
16
            if zero_count > 1:
17
                result.append(0)
18
            elif zero_count == 1:
19
                if num == 0:
20
                    result.append(total_product)
21
                else:
22
                    result.append(0)
23
            else:
24
                result.append(total_product // num)
25
        results.append(result)
26
    return results
27
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
for result in product_except_self(test_cases):
37
    print("" "".join(map(str, result)))",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833077
1387833073,h1032221771,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, K = test_cases[t][0]
5
        energy = test_cases[t][1]
6
7
        total_energy = sum(energy)
8
        if total_energy % N != 0:
9
            results.append(-1)
10
            continue
11
12
        target = total_energy // N
13
        prefix_sum = 0
14
        operations = 0
15
        is_possible = True
16
17
        for i in range(N):
18
            diff = energy[i] - target
19
            prefix_sum += diff
20
            21
            if prefix_sum % K != 0:
22
                is_possible = False
23
                break
24
            operations += abs(prefix_sum // K)
25
26
        if is_possible:
27
            results.append(operations)
28
        else:
29
            results.append(-1)
30
31
    return results
32
33
T = int(input())
34
test_cases = []
35
for _ in range(T):
36
    N, K = map(int, input().split())
37
    energy = list(map(int, input().split()))
38
    test_cases.append(((N, K), energy))
39
40
results = equalize_energy(T, test_cases)
41
for res in results:
42
    print(res)
43",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833073
1387833070,h1032221701,unknown,unknown,"1
def minimum_operations_to_equalize_energy(test_cases):
2
    results = []
3
    for n, k, energy in test_cases:
4
        total_energy = sum(energy)
5
        6
        # Check if equalization is possible
7
        if total_energy % n != 0:
8
            results.append(-1)
9
            continue
10
        11
        target = total_energy // n
12
        balance = 0
13
        operations = 0
14
        15
        # Calculate the number of operations
16
        for e in energy:
17
            balance += (e - target)
18
            # We count the absolute cumulative imbalance
19
            operations += abs(balance)
20
        21
        # Check if balance is zero after completing the cycle
22
        results.append(operations if balance == 0 else -1)
23
    24
    return results
25
26
# Input Reading
27
T = int(input())
28
test_cases = []
29
for _ in range(T):
30
    n, k = map(int, input().split())
31
    energy = list(map(int, input().split()))
32
    test_cases.append((n, k, energy))
33
34
# Compute and Output Results
35
results = minimum_operations_to_equalize_energy(test_cases)
36
for res in results:
37
    print(res)
38",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833070
1387833071,khushidoshi1978,unknown,unknown,"1
def max_abs_diff_partition(t, test_cases):
2
    for case in test_cases:
3
        n, nums = case
4
        total_sum = sum(nums)
5
        6
        7
        prefix_sum = [0] * (n + 1)
8
        for i in range(1, n + 1):
9
            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
10
        11
       12
        max_diff = 0
13
        14
        15
        for i in range(1, n):
16
            left_sum = prefix_sum[i]
17
            right_sum = total_sum - left_sum
18
            max_diff = max(max_diff, abs(left_sum - right_sum))
19
        20
        print(max_diff)
21
22
23
t = int(input())  
24
test_cases = []
25
26
for _ in range(t):
27
    n = int(input())  
28
    nums = list(map(int, input().split()))  
29
    test_cases.append((n, nums))
30
31
32
max_abs_diff_partition(t, test_cases)
33",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833071
1387833072,harikeshyadav161,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
#include <cmath>
6
7
using namespace std;
8
9
int min_operations_to_equalize(int n, int k, vector<int>& energy) {
10
11
    long long total_energy = 0;
12
13
    // Compute total energy
14
15
    for (int e : energy) {
16
17
        total_energy += e;
18
19
    }
20
21
    // Check if equalization is possible
22
23
    if (total_energy % n != 0) {
24
25
        return -1;
26
27
    }
28
29
    int target = total_energy / n;
30
31
    long long balance = 0; // Track surplus or deficit
32
33
    int operations = 0;
34
35
    for (int e : energy) {
36
37
        balance += (e - target);
38
39
        operations += abs(balance) / k;  // Convert surplus/deficit to operations
40
41
    }
42
43
    return operations;
44
45
}
46
47
int main() {
48
49
    int T;
50
51
    cin >> T; // Number of test cases
52
53
    while (T--) {
54
55
        int N, K;
56
57
        cin >> N >> K; // Read N and K
58
59
        vector<int> energy(N);
60
61
        for (int i = 0; i < N; i++) {
62
63
            cin >> energy[i]; // Read energy values
64
65
        }
66
67
        cout << min_operations_to_equalize(N, K, energy) << endl;
68
69
    }
70
71
    return 0;
72
73
}",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833072
1387833069,h1032221714,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        n = int(input())  # Number of nodes
5
        values = list(map(int, input().split()))  # List of node values
6
        7
        # Initialize result array
8
        result = [1] * n
9
        10
        # Create prefix product array
11
        prefix_product = [1] * n
12
        prefix_product[0] = values[0]
13
        for i in range(1, n):
14
            prefix_product[i] = prefix_product[i - 1] * values[i]
15
        16
        # Create suffix product array
17
        suffix_product = [1] * n
18
        suffix_product[n - 1] = values[n - 1]
19
        for i in range(n - 2, -1, -1):
20
            suffix_product[i] = suffix_product[i + 1] * values[i]
21
        22
        # Now calculate the result array by multiplying the corresponding prefix and suffix
23
        for i in range(n):
24
            if i == 0:
25
                result[i] = suffix_product[i + 1]
26
            elif i == n - 1:
27
                result[i] = prefix_product[i - 1]
28
            else:
29
                result[i] = prefix_product[i - 1] * suffix_product[i + 1]
30
        31
        # Print the result array
32
        print("" "".join(map(str, result)))
33
34
# Call the solve function
35
solve()",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833069
