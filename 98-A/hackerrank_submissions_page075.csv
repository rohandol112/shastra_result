submission_id,username,problem_name,language,code,page,url
1387833416,shuklajaikishan1,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, nums = case
5
        total_sum = sum(nums)
6
        left_sum = 0
7
        max_diff = 0
8
        for i in range(n - 1):
9
            left_sum += nums[i]
10
            right_sum = total_sum - left_sum
11
            max_diff = max(max_diff, abs(left_sum - right_sum))
12
        results.append(max_diff)
13
    return results
14
15
16
t = int(input())
17
test_cases = []
18
for _ in range(t):
19
    n = int(input())
20
    nums = list(map(int, input().split()))
21
    test_cases.append((n, nums))
22
23
results = max_absolute_difference(test_cases)
24
for res in results:
25
    print(res)
26
    ",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833416
1387833418,prashant_ps9833,unknown,unknown,"1
def min_operations_to_equalize_energy(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, k, energy = case
6
        total_energy = sum(energy)
7
        8
        if total_energy % n != 0:
9
            results.append(-1)
10
            continue
11
        12
        target_energy = total_energy // n
13
        diffs = [energy[i] - target_energy for i in range(n)]
14
        15
        if any(abs(diff) % k != 0 for diff in diffs):
16
            results.append(-1)
17
            continue
18
19
        operations = 0
20
        balance = 0  
21
        for diff in diffs:
22
            balance += diff // k
23
            operations += abs(balance)
24
        25
        results.append(operations)
26
    27
    return results
28
29
T = int(input()) 
30
test_cases = []
31
32
for _ in range(T):
33
    n, k = map(int, input().split())  
34
    energy = list(map(int, input().split()))  
35
    test_cases.append((n, k, energy))
36
37
for result in min_operations_to_equalize_energy(test_cases):
38
    print(result)",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833418
1387833420,aditya_jha027,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, K, energy = case['N'], case['K'], case['energy']
6
        total_energy = sum(energy)
7
8
        if total_energy % N != 0:
9
            results.append(-1)
10
            continue
11
12
        target = total_energy // N
13
        differences = [(e - target) for e in energy]
14
15
        if any(diff % K != 0 for diff in differences):
16
            results.append(-1)
17
            continue
18
19
        cumulative_sum = 0
20
        operations = 0
21
22
        for diff in differences:
23
            cumulative_sum += diff // K
24
            operations += abs(cumulative_sum)
25
26
        results.append(operations)
27
28
    return results
29
30
def parse_input():
31
    T = int(input())
32
    test_cases = []
33
34
    for _ in range(T):
35
        N, K = map(int, input().split())
36
        energy = list(map(int, input().split()))
37
        test_cases.append({""N"": N, ""K"": K, ""energy"": energy})
38
39
    return test_cases
40
41
def main():
42
    test_cases = parse_input()
43
    results = minimum_operations(test_cases)
44
    for res in results:
45
        print(res)
46
47
if __name__ == ""__main__"":
48
    main()
49",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833420
1387833414,h1032220403,unknown,unknown,"1
def min_operations_to_equalize_energy(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, k, energy = case
6
7
        total_energy = sum(energy)
8
        if total_energy % n != 0:
9
            # If total energy is not divisible by n, equalization is impossible
10
            results.append(-1)
11
            continue
12
13
        target_energy = total_energy // n
14
        balance = 0
15
        operations = 0
16
17
        for e in energy:
18
            balance += e - target_energy
19
            if balance % k != 0:
20
                results.append(-1)
21
                break
22
            operations += abs(balance) // k
23
        else:
24
            results.append(operations)
25
26
    return results
27
28
# Input
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    energy = list(map(int, input().split()))
34
    test_cases.append((n, k, energy))
35
36
# Process
37
results = min_operations_to_equalize_energy(test_cases)
38
39
# Output
40
for result in results:
41
    print(result)
42",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833414
1387833415,h1032220108,unknown,unknown,"1
def can_equalize(N, K, energy):
2
    total = sum(energy)
3
    if total % N != 0: 
4
        return -1
5
    6
    target = total // N
7
8
    diff = [e - target for e in energy]
9
    10
    # If already equalized
11
    if all(d == 0 for d in diff):
12
        return 0
13
    pos_sum = sum(d for d in diff if d > 0)
14
    for d in diff:
15
        if d != 0 and abs(d) % K != 0:
16
            return -1
17
    return pos_sum // K
18
19
def main():
20
    T = int(input())
21
    for _ in range(T):
22
        N, K = map(int, input().split())
23
        energy = list(map(int, input().split()))
24
        print(can_equalize(N, K, energy))
25
26
if __name__ == ""__main__"":
27
    main()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833415
1387833411,paragchaudhary_1,unknown,unknown,"1
def product_array(arr):
2
    n = len(arr)
3
    left = [1] * n
4
    right = [1] * n
5
6
    7
    for i in range(1, n):
8
        left[i] = left[i-1] * arr[i-1]
9
10
    11
    for i in range(n-2, -1, -1):
12
        right[i] = right[i+1] * arr[i+1]
13
14
   15
    result = [left[i] * right[i] for i in range(n)]
16
17
    return result
18
19
20
t = int(input())
21
22
for _ in range(t):
23
    n = int(input())
24
    arr = list(map(int, input().split()))
25
    result = product_array(arr)
26
    print(*result)",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833411
1387833405,prathameshbhoit1,unknown,unknown,"1
def minimum_operations_to_equalize_energy(t, test_cases):
2
    results = []
3
    for i in range(t):  # Changed _ to i to properly index test_cases
4
        n, k = test_cases[i]['n'], test_cases[i]['k']  # Fixed indexing
5
        energy = test_cases[i]['energy']  # Fixed indexing
6
        7
        # Calculate total and target energy
8
        total_energy = sum(energy)
9
        if total_energy % n != 0:
10
            results.append(-1)
11
            continue
12
            13
        target_energy = total_energy // n
14
        operations = 0
15
        current_transfer = 0
16
        17
        # Check each station
18
        for j in range(n):
19
            current_transfer += energy[j] - target_energy
20
            if current_transfer % k != 0:
21
                results.append(-1)
22
                break
23
            operations += abs(current_transfer) // k
24
        else:
25
            results.append(operations)
26
            27
    return results
28
29
# Input processing
30
T = int(input().strip())
31
test_cases = []
32
for _ in range(T):
33
    n, k = map(int, input().strip().split())
34
    energy = list(map(int, input().strip().split()))
35
    test_cases.append({""n"": n, ""k"": k, ""energy"": energy})
36
37
# Get and print results
38
results = minimum_operations_to_equalize_energy(T, test_cases)
39
for result in results:
40
    print(result)",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833405
1387833410,h1032220149,unknown,unknown,"1
import java.util.*;
2
3
public class EqualizeEnergy {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
9
        for (int i = 0; i < T; i++) {
10
            int N = scanner.nextInt();
11
            int K = scanner.nextInt();
12
            int[] energy = new int[N];
13
14
            for (int j = 0; j < N; j++) {
15
                energy[j] = scanner.nextInt();
16
            }
17
18
            int minOperations = findMinOperations(energy, K);
19
            System.out.println(minOperations);
20
        }
21
    }
22
23
    public static int findMinOperations(int[] energy, int K) {
24
        int N = energy.length;
25
        int totalEnergy = 0;
26
27
        // Calculate total energy
28
        for (int i = 0; i < N; i++) {
29
            totalEnergy += energy[i];
30
        }
31
32
        // Check if equal distribution is possible
33
        if (totalEnergy % N != 0) {
34
            return -1; // Equalization is not possible
35
        }
36
37
        int targetEnergy = totalEnergy / N;
38
        int operations = 0;
39
40
        // Adjust energy levels to the target
41
        for (int i = 0; i < N; i++) {
42
            int diff = energy[i] - targetEnergy;
43
            if (diff > 0) {
44
                operations += Math.abs(diff) / K;
45
                if (Math.abs(diff) % K != 0) {
46
                    operations++;
47
                }
48
            }
49
        }
50
51
        return operations;
52
    }
53
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833410
1387833409,kadamaryan21418,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    """"""
3
    Calculate minimum operations needed to equalize energy across stations.
4
    Returns -1 if impossible.
5
    """"""
6
    # Calculate total energy and check if equalization is possible
7
    total_energy = sum(energy)
8
    if total_energy % N != 0:
9
        return -1
10
        11
    target = total_energy // N
12
    13
    # If already equalized
14
    if all(e == target for e in energy):
15
        return 0
16
    17
    # Calculate needed transfers and check if possible
18
    operations = 0
19
    excess = 0  # Track running excess/deficit
20
    21
    for i in range(N):
22
        # Add current station's excess/deficit to running total
23
        excess += energy[i] - target
24
        25
        # If excess can't be transferred using K-unit operations
26
        if abs(excess) % K != 0:
27
            return -1
28
            29
        if excess != 0:
30
            operations += abs(excess) // K
31
    32
    # Check if we ended with zero excess (balanced transfers)
33
    if excess != 0:
34
        return -1
35
        36
    return operations
37
38
def main():
39
    T = int(input())
40
    for _ in range(T):
41
        N, K = map(int, input().split())
42
        energy = list(map(int, input().split()))
43
        print(min_operations_to_equalize(N, K, energy))
44
45
if __name__ == ""__main__"":
46
    main()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833409
1387833403,cooljaychaudhary,unknown,unknown,"1
def product_except_self():
2
    # Reading number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read the size of the array
8
        n = int(input())
9
        # Read the values of the nodes
10
        values = list(map(int, input().split()))
11
        12
        # Initialize the result array
13
        result = [1] * n
14
        15
        # Compute prefix products
16
        prefix = 1
17
        for i in range(n):
18
            result[i] = prefix
19
            prefix *= values[i]
20
        21
        # Compute suffix products and combine with prefix
22
        suffix = 1
23
        for i in range(n - 1, -1, -1):
24
            result[i] *= suffix
25
            suffix *= values[i]
26
        27
        # Store the result for this test case
28
        results.append("" "".join(map(str, result)))
29
    30
    # Print all results
31
    print(""\n"".join(results))
32
33
# Call the function
34
product_except_self()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833403
