submission_id,username,problem_name,language,code,page,url
1387833357,harikeshyadav161,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
3
    results = []
4
5
    for test in test_cases:
6
7
        n, nums = test
8
9
        prefix = [0] * n
10
11
        suffix = [0] * n
12
13
        prefix[0] = nums[0]
14
15
        for i in range(1, n):
16
17
            prefix[i] = prefix[i - 1] + nums[i]
18
19
        suffix[-1] = nums[-1]
20
21
        for i in range(n - 2, -1, -1):
22
23
            suffix[i] = suffix[i + 1] + nums[i]
24
25
        max_diff = 0
26
27
        for i in range(n - 1):  # Partition at i
28
29
            left_sum = prefix[i]
30
31
            right_sum = suffix[i + 1]
32
33
            max_diff = max(max_diff, abs(left_sum - right_sum))
34
35
        results.append(max_diff)
36
37
    return results
38
39
t = int(input())
40
41
test_cases = []
42
43
for _ in range(t):
44
45
    n = int(input())
46
47
    nums = list(map(int, input().split()))
48
49
    test_cases.append((n, nums))
50
51
results = max_absolute_difference(t, test_cases)
52
53
for res in results:
54
55
    print(res)",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833357
1387833359,mahakantsingh113,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <cmath>
5
using namespace std;
6
7
vector<int> minimum_operations_to_equalize(int T, vector<pair<pair<int, int>, vector<int>>> &test_cases) {
8
    vector<int> results;
9
10
    for (int t = 0; t < T; t++) {
11
        int N = test_cases[t].first.first;
12
        int K = test_cases[t].first.second;
13
        vector<int> energy = test_cases[t].second;
14
15
        long long total_energy = accumulate(energy.begin(), energy.end(), 0LL);
16
        17
        // Check if equalization is possible
18
        if (total_energy % N != 0) {
19
            results.push_back(-1);
20
            continue;
21
        }
22
23
        int target = total_energy / N;
24
        vector<int> imbalances(N);
25
        for (int i = 0; i < N; i++) {
26
            imbalances[i] = energy[i] - target;
27
        }
28
29
        // Calculate prefix sums and check operations
30
        long long prefix_sum = 0;
31
        long long operations = 0;
32
        bool possible = true;
33
34
        for (int i = 0; i < N; i++) {
35
            prefix_sum += imbalances[i];
36
            // If the imbalance cannot be corrected with K-unit transfers
37
            if (prefix_sum % K != 0) {
38
                possible = false;
39
                break;
40
            }
41
            operations += abs(prefix_sum) / K;
42
        }
43
44
        if (possible) {
45
            results.push_back(operations);
46
        } else {
47
            results.push_back(-1);
48
        }
49
    }
50
51
    return results;
52
}
53
54
int main() {
55
    int T;
56
    cin >> T;
57
    vector<pair<pair<int, int>, vector<int>>> test_cases(T);
58
59
    for (int t = 0; t < T; t++) {
60
        int N, K;
61
        cin >> N >> K;
62
        vector<int> energy(N);
63
        for (int i = 0; i < N; i++) {
64
            cin >> energy[i];
65
        }
66
        test_cases[t] = {{N, K}, energy};
67
    }
68
69
    vector<int> results = minimum_operations_to_equalize(T, test_cases);
70
71
    for (int res : results) {
72
        cout << res << endl;
73
    }
74
75
    return 0;
76
}
77",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833359
1387833356,ruchishree244,unknown,unknown,"1
import java.util.*;
2
3
public class MaxAbsDifference {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        int t = sc.nextInt(); // Number of test cases
8
        StringBuilder result = new StringBuilder();
9
10
        while (t-- > 0) {
11
            int n = sc.nextInt(); // Size of the array
12
            int[] nums = new int[n];
13
14
            // Input the array
15
            for (int i = 0; i < n; i++) {
16
                nums[i] = sc.nextInt();
17
            }
18
19
            // Compute prefix sums
20
            long[] prefixSum = new long[n];
21
            prefixSum[0] = nums[0];
22
            for (int i = 1; i < n; i++) {
23
                prefixSum[i] = prefixSum[i - 1] + nums[i];
24
            }
25
26
            long totalSum = prefixSum[n - 1]; // Total sum of the array
27
            long maxDiff = 0;
28
29
            // Iterate through possible partitions
30
            for (int i = 0; i < n - 1; i++) {
31
                long leftSum = prefixSum[i];
32
                long rightSum = totalSum - leftSum;
33
                long absDiff = Math.abs(leftSum - rightSum);
34
35
                maxDiff = Math.max(maxDiff, absDiff);
36
            }
37
38
            result.append(maxDiff).append(""\n"");
39
        }
40
41
        System.out.print(result.toString());
42
        sc.close();
43
    }
44
}
45",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833356
1387833353,parabsaloni23,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
5
    prefix_sum = [0] * (n + 1)
6
    for i in range(1, n + 1):
7
        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
8
    9
    max_diff = 0
10
    for i in range(1, n):  
11
        sum1 = prefix_sum[i]           
12
        sum2 = prefix_sum[n] - sum1     
13
        max_diff = max(max_diff, abs(sum1 - sum2))
14
    15
    return max_diff
16
17
18
19
t = int(input())  
20
for _ in range(t):
21
    n = int(input())  
22
    nums = list(map(int, input().split()))  
23
    24
    25
    result = max_absolute_difference(nums)
26
    print(result)",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833353
1387833354,h1032221056,unknown,unknown,"1
def min_operations_to_equalize(T, test_cases):
2
    results = []
3
    for t in range(T):
4
       5
        N, K = test_cases[t][0]
6
        energy = test_cases[t][1]
7
        8
        total_energy = sum(energy)
9
        10
       11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
        15
        target_energy = total_energy // N
16
        prefix_sum = 0
17
        min_ops = 0
18
        19
        20
        for e in energy:
21
            prefix_sum += e - target_energy
22
            if prefix_sum % K != 0:  
23
                min_ops = -1
24
                break
25
            min_ops += abs(prefix_sum // K)
26
        27
        results.append(min_ops if min_ops != -1 else -1)
28
    29
    return results
30
31
32
33
if __name__ == ""__main__"":
34
    T = int(input())
35
    test_cases = []
36
    for _ in range(T):
37
        N, K = map(int, input().split())
38
        energy = list(map(int, input().split()))
39
        test_cases.append(((N, K), energy))
40
    41
    results = min_operations_to_equalize(T, test_cases)
42
    for res in results:
43
        print(res)
44",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833354
1387833355,ankushchaudhary5,unknown,unknown,"1
def compute_result(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        # Initialize prefix and suffix arrays
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [1] * n
9
10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
18
        # Compute result by multiplying prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
22
        results.append(result)
23
24
    return results
25
26
27
def main():
28
    T = int(input())  # Read number of test cases
29
    test_cases = []
30
31
    for _ in range(T):
32
        n = int(input())  # Size of the array
33
        values = list(map(int, input().split()))  # Array elements
34
        test_cases.append((n, values))
35
36
    # Compute results
37
    results = compute_result(test_cases)
38
39
    # Print results
40
    for result in results:
41
        print("" "".join(map(str, result)))
42
43
44
if __name__ == ""__main__"":
45
    main()
46",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833355
1387833345,h1032220507,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
    for n, k, energy in test_cases:
4
        total_energy = sum(energy)
5
        if total_energy % n != 0:
6
            results.append(-1)
7
            continue
8
        9
        target = total_energy // n
10
        operations = 0
11
        balance = 0
12
        13
        for i in range(n):
14
            # Calculate the difference between the current station and the target
15
            diff = energy[i] - target
16
            balance += diff
17
            # Add the absolute value of the balance to operations
18
            operations += abs(balance)
19
        20
        # If every step is divisible by k, return the operations divided by k
21
        if all(abs(balance) % k == 0 for balance in energy):
22
            results.append(operations // k)
23
        else:
24
            results.append(-1)
25
    return results
26
27
# Input processing
28
t = int(input())
29
test_cases = []
30
for _ in range(t):
31
    n, k = map(int, input().split())
32
    energy = list(map(int, input().split()))
33
    test_cases.append((n, k, energy))
34
35
# Calculate results
36
output = minimum_operations(test_cases)
37
38
# Output results
39
for result in output:
40
    print(result)
41",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833345
1387833351,08vijay09,unknown,unknown,"1
def solve():
2
3
    T = int(input())  
4
5
    for _ in range(T):
6
7
        n = int(input())  
8
9
        values = list(map(int, input().split()))
10
11
        12
13
        14
15
        prefix = [1] * n
16
17
        for i in range(1, n):
18
19
            prefix[i] = prefix[i - 1] * values[i - 1]
20
21
        22
23
        24
25
        suffix = [1] * n
26
27
        for i in range(n - 2, -1, -1):
28
29
            suffix[i] = suffix[i + 1] * values[i + 1]
30
31
        32
33
        34
35
        result = [prefix[i] * suffix[i] for i in range(n)]
36
37
        38
39
        40
41
        print("" "".join(map(str, result)))
42
43
44
45
solve()",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833351
1387833352,pulekarswaradny,unknown,unknown,"1
def solve_test_cases():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().strip().split(""\n"")
5
6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
10
    results = []
11
12
    for _ in range(T):
13
        # Read N and K
14
        N, K = map(int, data[idx].split())
15
        idx += 1
16
        # Read energy levels
17
        energy = list(map(int, data[idx].split()))
18
        idx += 1
19
20
        total_energy = sum(energy)
21
22
        # If the total energy is not divisible by N, it's impossible
23
        if total_energy % N != 0:
24
            results.append(""-1"")
25
            continue
26
27
        target_energy = total_energy // N
28
        operations = 0
29
        balance = 0
30
31
        # Check and calculate the number of operations required
32
        for e in energy:
33
            diff = e - target_energy
34
            balance += diff
35
            # If balance isn't zero at any point, it means redistribution isn't possible
36
            operations += abs(diff)
37
38
        # Ensure redistribution results in balance being zero
39
        if balance == 0:
40
            results.append(str(operations // 2))  # Each operation affects two elements
41
        else:
42
            results.append(""-1"")
43
44
    # Output all results
45
    sys.stdout.write(""\n"".join(results) + ""\n"")
46
47
if __name__ == ""__main__"":
48
    solve_test_cases()
49",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833352
1387833344,vnandini1530,unknown,unknown,"1
def solve_testcase(N, K, energy):
2
    # Calculate total energy and target
3
    total_energy = sum(energy)
4
    5
    # Check if equal distribution is possible
6
    if total_energy % N != 0:
7
        return -1
8
    9
    target = total_energy // N
10
    11
    # If already equalized
12
    if all(e == target for e in energy):
13
        return 0
14
    15
    # For each position, calculate how many transfers are needed
16
    total_transfers = 0
17
    excess = 0  # Keep track of excess/deficit as we go around the circle
18
    19
    for i in range(N):
20
        # Current position's excess/deficit including previous remainder
21
        curr_with_excess = energy[i] + excess
22
        23
        # How far are we from target at this position
24
        diff_from_target = curr_with_excess - target
25
        26
        # This difference will need to be transferred to next position
27
        excess = diff_from_target
28
        29
        # If we need to make transfers
30
        if diff_from_target != 0:
31
            # If we can't transfer in K-unit chunks
32
            if abs(diff_from_target) % K != 0:
33
                return -1
34
                35
            # Add number of K-unit transfers needed
36
            total_transfers += abs(diff_from_target) // K
37
    38
    # After going around the circle, if there's any remainder, it's impossible
39
    if excess != 0:
40
        return -1
41
        42
    return total_transfers
43
44
def main():
45
    # Read number of test cases
46
    T = int(input())
47
    48
    # Process each test case
49
    for _ in range(T):
50
        # Read N and K
51
        N, K = map(int, input().split())
52
        53
        # Read energy array
54
        energy = list(map(int, input().split()))
55
        56
        # Solve current test case
57
        result = solve_testcase(N, K, energy)
58
        59
        # Print result
60
        print(result)
61
62
if __name__ == ""__main__"":
63
    main()
64",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833344
