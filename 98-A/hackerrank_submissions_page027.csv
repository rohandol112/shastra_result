submission_id,username,problem_name,language,code,page,url
1387834267,pranaytiwariprpk,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    for nums in test_cases:
4
        n = len(nums)
5
        total_sum = sum(nums)
6
        7
        max_left_sum = float('-inf')
8
        min_left_sum = float('inf')
9
        current_sum = 0
10
        11
        for i in range(n - 1):  # We stop at n-1 to ensure both parts are non-empty
12
            current_sum += nums[i]
13
            max_left_sum = max(max_left_sum, current_sum)
14
            min_left_sum = min(min_left_sum, current_sum)
15
16
        max_difference = max(abs(total_sum - 2 * max_left_sum), abs(total_sum - 2 * min_left_sum))
17
        results.append(max_difference)
18
    19
    return results
20
21
try:
22
    t = int(input())
23
except EOFError:
24
    print(""No input provided."")
25
    t = 0
26
27
test_cases = []
28
for _ in range(t):
29
    n = int(input())
30
    nums = list(map(int, input().split()))
31
    test_cases.append(nums)
32
33
results = max_absolute_difference(test_cases)
34
for result in results:
35
    print(result)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834267
1387834268,h1032221701,unknown,unknown,"1
import sys
2
3
def product_except_self(test_cases):
4
    results = []
5
    for case in test_cases:
6
        n, values = case
7
        prefix = [1] * n
8
        suffix = [1] * n
9
        result = [1] * n
10
        11
        # Compute prefix products
12
        for i in range(1, n):
13
            prefix[i] = prefix[i - 1] * values[i - 1]
14
        15
        # Compute suffix products
16
        for i in range(n - 2, -1, -1):
17
            suffix[i] = suffix[i + 1] * values[i + 1]
18
        19
        # Compute result array
20
        for i in range(n):
21
            result[i] = prefix[i] * suffix[i]
22
        23
        results.append(result)
24
    25
    return results
26
27
# Input Reading
28
input_data = sys.stdin.read().strip()  # Read all input at once
29
if input_data:
30
    lines = input_data.splitlines()  # Split input into lines
31
    T = int(lines[0])  # Number of test cases
32
    test_cases = []
33
34
    idx = 1
35
    for _ in range(T):
36
        n = int(lines[idx])  # Size of the array
37
        values = list(map(int, lines[idx + 1].split()))  # Array elements
38
        test_cases.append((n, values))
39
        idx += 2
40
41
    # Compute and Output Results
42
    results = product_except_self(test_cases)
43
    for res in results:
44
        print(' '.join(map(str, res)))
45
else:
46
    print(""No input provided."")
47",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834268
1387834269,jkinsuk760,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, nums = case
5
        prefix_sum = [0] * n
6
        suffix_sum = [0] * n
7
8
        prefix_sum[0] = nums[0]
9
        for i in range(1, n):
10
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
11
12
        suffix_sum[n - 1] = nums[n - 1]
13
        for i in range(n - 2, -1, -1):
14
            suffix_sum[i] = suffix_sum[i + 1] + nums[i]
15
16
        max_diff = 0
17
        for i in range(n - 1):
18
            left_sum = prefix_sum[i]
19
            right_sum = suffix_sum[i + 1]
20
            max_diff = max(max_diff, abs(left_sum - right_sum))
21
22
        results.append(max_diff)
23
    return results
24
25
t = int(input())
26
test_cases = []
27
for _ in range(t):
28
    n = int(input())
29
    nums = list(map(int, input().split()))
30
    test_cases.append((n, nums))
31
32
outputs = max_absolute_difference(test_cases)
33
for output in outputs:
34
    print(output)
35",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834269
1387834259,HarshShrivastava,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc=new Scanner(System.in);
8
        int t=sc.nextInt();
9
        while(t>0){
10
            int n=sc.nextInt();
11
            long a[]=new long[n];
12
            int k=sc.nextInt();
13
            int i;
14
            long total=0;
15
            for(i=0;i<n;i++){
16
                a[i]=sc.nextLong();
17
                total+=a[i];
18
            }
19
            if(total%n!=0)
20
                System.out.println(-1);
21
            else{
22
                i=0;
23
                int count=0;
24
                int steps=0;
25
                while(true){
26
                    i%=n;
27
                    if(a[(i+1)%n]==a[i]){
28
                        count+=1;
29
                    }
30
                    if(a[(i+1)%n]<a[i]&&a[i]-a[(i+1)%n]>=k){
31
                        a[i+1]+=k;
32
                        a[i]-=k;
33
                        steps+=1;
34
                        count=0;
35
                    }
36
                    if(count==n){
37
                        System.out.println(steps);
38
                        break;
39
                    }
40
                    i++;
41
                }
42
            }
43
            t--;
44
        }
45
    }
46
}",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834259
1387834260,h1032221515,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
4
    for _ in range(test_cases):
5
        n = int(input())  # Changed raw_input() to input()
6
        nums = list(map(int, input().split()))  # Converted map to list
7
        max_diff = 0
8
        prefix_sum = 0
9
        total_sum = sum(nums)  # Calculate total sum once
10
        for i in range(n - 1):
11
            prefix_sum += nums[i]
12
            suffix_sum = total_sum - prefix_sum
13
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
14
15
        results.append(max_diff)
16
    17
    for res in results:
18
        print(res)
19
20
21
T = int(input())  # Changed raw_input() to input()
22
max_absolute_difference(T)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834260
1387834261,vishal986958,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    left_sum = 0
4
    total_sum = sum(nums)
5
    max_diff = 0
6
7
    for i in range(n - 1):
8
        left_sum += nums[i]
9
        right_sum = total_sum - left_sum
10
        max_diff = max(max_diff, abs(left_sum - right_sum))
11
    12
    return max_diff
13
14
# Read number of test cases
15
t = int(input())
16
for _ in range(t):
17
    n = int(input())
18
    nums = list(map(int, input().split()))
19
    result = max_absolute_difference(nums)
20
    print(result)
21",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834261
1387834254,rajnishjha,unknown,unknown,"1
def compute_result(T, test_cases):
2
    results = []
3
    for case in range(T):
4
        n = test_cases[case][0]
5
        values = test_cases[case][1]
6
7
        result = [1] * n
8
9
        prefix_product = 1
10
        for i in range(n):
11
            result[i] = prefix_product
12
            prefix_product *= values[i]
13
14
        suffix_product = 1
15
        for i in range(n - 1, -1, -1):
16
            result[i] *= suffix_product
17
            suffix_product *= values[i]
18
19
        results.append(result)
20
21
    return results
22
23
import sys
24
input = sys.stdin.read
25
data = input().splitlines()
26
27
T = int(data[0])
28
test_cases = []
29
line = 1
30
31
for _ in range(T):
32
    n = int(data[line])
33
    values = list(map(int, data[line + 1].split()))
34
    test_cases.append((n, values))
35
    line += 2
36
37
output = compute_result(T, test_cases)
38
39
for res in output:
40
    print("" "".join(map(str, res)))
41",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834254
1387834255,h1032220685,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, values = case
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [1] * n
9
10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result array
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Process and print the output
37
output = product_except_self(test_cases)
38
for res in output:
39
    print("" "".join(map(str, res)))
40",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387834255
1387834256,codedot,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    energy = list(map(int, input().split()))
5
    total_energy = sum(energy)
6
    7
    if total_energy % n != 0:
8
        print(-1)
9
        continue
10
    11
    target = total_energy // n
12
    operations = 0
13
    current_balance = 0
14
    15
    for i in range(n):
16
        current_balance += energy[i] - target
17
        if current_balance > 0:
18
            operations += (current_balance + k - 1) // k  # ceil(current_balance / k)
19
    20
    print(operations)
21",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834256
1387834246,sanika_wani,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, nums = case
6
        prefix = [0] * n
7
        suffix = [0] * n
8
        9
        prefix[0] = nums[0]
10
        for i in range(1, n):
11
            prefix[i] = prefix[i - 1] + nums[i]
12
        13
        suffix[-1] = nums[-1]
14
        for i in range(n - 2, -1, -1):
15
            suffix[i] = suffix[i + 1] + nums[i]
16
        17
        max_diff = 0
18
        for i in range(n - 1):
19
            left_sum = prefix[i]
20
            right_sum = suffix[i + 1]
21
            max_diff = max(max_diff, abs(left_sum - right_sum))
22
        23
        results.append(max_diff)
24
    25
    return results
26
27
if __name__ == ""__main__"":
28
    t = int(input()) 
29
    test_cases = []
30
    for _ in range(t):
31
        n = int(input())
32
        nums = list(map(int, input().split()))
33
        test_cases.append((n, nums))
34
    35
    results = max_absolute_difference(t, test_cases)
36
    for res in results:
37
        print(res)
38",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834246
