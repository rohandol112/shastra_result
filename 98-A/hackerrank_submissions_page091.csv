submission_id,username,problem_name,language,code,page,url
1387833154,princesharma8050,unknown,unknown,"1
def product_array(values):
2
    """"""
3
    Calculates the product of all elements in the array except the element at the current index.
4
5
    Args:
6
        values: A list of integers.
7
8
    Returns:
9
        A list of integers, where each element is the product of all other elements in the original list.
10
    """"""
11
12
    n = len(values)
13
    result = [1] * n
14
15
    # Calculate left product
16
    left_product = 1
17
    for i in range(n):
18
        result[i] = left_product
19
        left_product *= values[i]
20
21
    # Calculate right product
22
    right_product = 1
23
    for i in range(n - 1, -1, -1):
24
        result[i] *= right_product
25
        right_product *= values[i]
26
27
    return result
28
29
if __name__ == ""__main__"":
30
    T = int(input())
31
32
    for _ in range(T):
33
        n = int(input())
34
        values = list(map(int, input().split()))
35
36
        result = product_array(values)
37
        print(*result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833154
1387833157,radhikajoshi2519,unknown,unknown,"1
def product_except_self(values, n):
2
    # Initialize prefix and suffix arrays
3
    prefix = [1] * n
4
    suffix = [1] * n
5
    result = [1] * n
6
    7
    # Compute prefix product
8
    for i in range(1, n):
9
        prefix[i] = prefix[i - 1] * values[i - 1]
10
    11
    # Compute suffix product
12
    for i in range(n - 2, -1, -1):
13
        suffix[i] = suffix[i + 1] * values[i + 1]
14
    15
    # Compute result by multiplying prefix and suffix products
16
    for i in range(n):
17
        result[i] = prefix[i] * suffix[i]
18
    19
    return result
20
21
# Read input
22
T = int(raw_input())  # Number of test cases
23
for _ in range(T):
24
    n = int(raw_input())  # Number of nodes
25
    values = map(int, raw_input().split())  # Node values
26
    27
    # Compute the result for each test case
28
    result = product_except_self(values, n)
29
    30
    # Print the result
31
    print "" "".join(map(str, result))
32",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833157
1387833159,sanskriti_singh9,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, K = test_cases[t][0]  # Number of stations and K value
5
        energy = test_cases[t][1]  # Energy array
6
7
        # Calculate the total energy
8
        total_energy = sum(energy)
9
10
        # Check if equal distribution is possible
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
15
        target_energy = total_energy // N  # Energy each station should have
16
        operations = 0
17
        current_balance = 0
18
19
        # Iterate through the stations
20
        for i in range(N):
21
            # Calculate the balance at the current station
22
            current_balance += energy[i] - target_energy
23
24
            # If current balance isn't a multiple of K, it's not possible
25
            if current_balance % K != 0:
26
                results.append(-1)
27
                break
28
            operations += abs(current_balance) // K
29
        else:
30
            results.append(operations)
31
32
    return results
33
34
35
# Input
36
T = int(input())
37
test_cases = []
38
for _ in range(T):
39
    N, K = map(int, input().split())
40
    energy = list(map(int, input().split()))
41
    test_cases.append(((N, K), energy))
42
43
# Output
44
output = equalize_energy(T, test_cases)
45
for res in output:
46
    print(res)
47",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833159
1387833150,mtsn9699,unknown,unknown,"1
def min_operations_to_equalize(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
        if total_energy % N != 0:
7
            results.append(-1)
8
            continue
9
10
        target = total_energy // N
11
        excess_energy = 0
12
        operations = 0
13
14
        for i in range(N):
15
            excess_energy += energy[i] - target
16
            if excess_energy % K != 0:
17
                results.append(-1)
18
                break
19
            operations += abs(excess_energy) // K
20
        else:
21
            results.append(operations)
22
23
    return results
24
25
def main():
26
    T = int(input())
27
    test_cases = []
28
29
    for _ in range(T):
30
        N, K = map(int, input().split())
31
        energy = list(map(int, input().split()))
32
        test_cases.append((N, K, energy))
33
34
    results = min_operations_to_equalize(test_cases)
35
36
    for result in results:
37
        print(result)
38
39
if __name__ == ""__main__"":
40
    main()
41",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833150
1387833151,alstonsoares17,unknown,unknown,"1
def find_max_subarray_difference(n, nums):
2
    if n < 2:
3
        return 0
4
    prefix_sums = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_sums[i + 1] = prefix_sums[i] + nums[i]
7
    8
    max_difference = 0
9
    total_sum = prefix_sums[n]
10
    for i in range(n - 1):
11
        left_sum = prefix_sums[i + 1]
12
        right_sum = total_sum - left_sum
13
        current_difference = abs(left_sum - right_sum)
14
        max_difference = max(max_difference, current_difference)
15
    16
    return max_difference
17
18
t = int(input())
19
for _ in range(t):
20
    n = int(input())
21
    nums = list(map(int, input().split()))
22
    result = find_max_subarray_difference(n, nums)
23
    print(result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833151
1387833153,h1032220835,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
3
    results = []
4
5
    for t in range(T):
6
7
        N, K = test_cases[t][0]
8
9
        energy = test_cases[t][1]
10
11
        # Check if total energy is divisible by N
12
13
        total_energy = sum(energy)
14
15
        if total_energy % N != 0:
16
17
            results.append(-1)
18
19
            continue
20
21
        target = total_energy // N
22
23
        prefix_sum = 0
24
25
        operations = 0
26
27
        is_possible = True
28
29
        # Iterate through the array to calculate operations
30
31
        for i in range(N):
32
33
            diff = energy[i] - target
34
35
            prefix_sum += diff
36
37
            # Check if prefix_sum is divisible by K
38
39
            if prefix_sum % K != 0:
40
41
                is_possible = False
42
43
                break
44
45
            operations += abs(prefix_sum // K)
46
47
        if is_possible:
48
49
            results.append(operations)
50
51
        else:
52
53
            results.append(-1)
54
55
    return results
56
57
# Input and Output Handling
58
59
T = int(input())
60
61
test_cases = []
62
63
for _ in range(T):
64
65
    N, K = map(int, input().split())
66
67
    energy = list(map(int, input().split()))
68
69
    test_cases.append(((N, K), energy))
70
71
# Solve and Output Results
72
73
results = equalize_energy(T, test_cases)
74
75
for res in results:
76
77
    print(res)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833153
1387833147,h1032220810,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    energies = list(map(int, input().split()))
4
5
    total_energy = sum(energies)
6
    if total_energy % n != 0:
7
        print(-1)
8
        return
9
10
    target_energy = total_energy // n
11
    diff = [energies[i] - target_energy for i in range(n)]
12
    c_diff = [0] * n
13
    c_diff[0] = 0
14
    for i in range(1, n):
15
        c_diff[i] = c_diff[i-1] + diff[i-1]
16
17
    operations = 0
18
    for i in range(1, n):
19
        if c_diff[i] % k != 0:
20
            print(-1)
21
            return
22
        operations += abs(c_diff[i]) // k
23
24
    print(operations)
25
26
27
t = int(input())
28
for _ in range(t):
29
    solve()",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833147
1387833148,h1032220403,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, nums = case
6
7
        # Calculate prefix sums
8
        prefix_sum = [0] * n
9
        prefix_sum[0] = nums[0]
10
        for i in range(1, n):
11
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
12
13
        # Calculate maximum absolute difference
14
        total_sum = prefix_sum[-1]
15
        max_diff = 0
16
        for i in range(n - 1):
17
            left_sum = prefix_sum[i]
18
            right_sum = total_sum - left_sum
19
            max_diff = max(max_diff, abs(left_sum - right_sum))
20
21
        results.append(max_diff)
22
23
    return results
24
25
# Input
26
T = int(input())
27
test_cases = []
28
for _ in range(T):
29
    n = int(input())
30
    nums = list(map(int, input().split()))
31
    test_cases.append((n, nums))
32
33
# Process
34
results = max_absolute_difference(test_cases)
35
36
# Output
37
for result in results:
38
    print(result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833148
1387833146,chaussajjad,unknown,unknown,"1
def compute_results(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        n = test_cases[t][0]
5
        values = test_cases[t][1]
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [1] * n
9
        for i in range(1, n):
10
            prefix[i] = prefix[i - 1] * values[i - 1]
11
        for i in range(n - 2, -1, -1):
12
            suffix[i] = suffix[i + 1] * values[i + 1]
13
        for i in range(n):
14
            result[i] = prefix[i] * suffix[i]
15
        results.append(result)
16
    return results
17
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    n = int(input())
22
    values = list(map(int, input().split()))
23
    test_cases.append((n, values))
24
25
results = compute_results(T, test_cases)
26
for res in results:
27
    print("" "".join(map(str, res)))
28",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833146
1387833145,h1032220870,unknown,unknown,"1
def compute_result(values):
2
    n = len(values)
3
    prefix = [1] * n
4
    suffix = [1] * n
5
    result = [1] * n
6
7
    # Compute prefix product
8
    for i in range(1, n):
9
        prefix[i] = prefix[i - 1] * values[i - 1]
10
11
    # Compute suffix product
12
    for i in range(n - 2, -1, -1):
13
        suffix[i] = suffix[i + 1] * values[i + 1]
14
15
    # Compute result
16
    for i in range(n):
17
        result[i] = prefix[i] * suffix[i]
18
19
    return result
20
21
22
def main():
23
    t = int(input())  # Number of test cases
24
    results = []
25
26
    for _ in range(t):
27
        n = int(input())  # Number of nodes
28
        values = list(map(int, input().split()))  # Values of the nodes
29
        results.append(compute_result(values))
30
31
    for res in results:
32
        print("" "".join(map(str, res)))
33
34
35
# Example Input:
36
# 2
37
# 5
38
# 1 2 3 4 5
39
# 5
40
# 10 3 5 6 2
41
42
if __name__ == ""__main__"":
43
    main()
44",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833145
