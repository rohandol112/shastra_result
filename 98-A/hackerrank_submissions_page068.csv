submission_id,username,problem_name,language,code,page,url
1387833520,h1032221714,unknown,unknown,"1
def solve():
2
    t = int(input())  # Number of test cases
3
    for _ in range(t):
4
        n = int(input())  # Size of the array
5
        nums = list(map(int, input().split()))  # The array itself
6
        7
        total_sum = sum(nums)
8
        prefix_sum = 0
9
        max_diff = 0
10
        11
        for i in range(n - 1):  # We must leave at least one element in each subarray
12
            prefix_sum += nums[i]
13
            suffix_sum = total_sum - prefix_sum
14
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
15
        16
        print(max_diff)
17
18
# Call the solve function
19
solve()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833520
1387833521,shivamthakur0201,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    4
    for i in range(t):
5
        n = test_cases[i][0]
6
        nums = test_cases[i][1]
7
        8
        # Calculate total sum of the array
9
        total_sum = sum(nums)
10
        11
        # Initialize variables
12
        left_sum = 0
13
        max_difference = float('-inf')
14
        15
        # Iterate through the array to calculate differences
16
        for j in range(n - 1):
17
            left_sum += nums[j]
18
            right_sum = total_sum - left_sum
19
            max_difference = max(max_difference, abs(left_sum - right_sum))
20
        21
        results.append(max_difference)
22
    23
    return results
24
25
26
# Input handling
27
if __name__ == ""__main__"":
28
    t = int(input())  # Number of test cases
29
    test_cases = []
30
    31
    for _ in range(t):
32
        n = int(input())  # Size of the array
33
        nums = list(map(int, input().split()))  # Array elements
34
        test_cases.append((n, nums))
35
    36
    # Get the results
37
    results = max_absolute_difference(t, test_cases)
38
  39
    for res in results:
40
        print(res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833521
1387833522,aditipandey30101,unknown,unknown,"1
def product_except_self(arr,n):
2
    prefix = [1]*n
3
    suffix = [1]*n
4
    result = [1]*n
5
    for i in range(1, n):
6
        prefix[i] = prefix[i-1]*arr[i-1]
7
    for i in range(n-2,-1,-1):
8
        suffix[i] = suffix[i+1]*arr[i+1]
9
    for i in range(n):
10
        result[i] = prefix[i]*suffix[i]
11
    return result
12
T = int(input())
13
14
for _ in range(T):
15
    n = int(input())
16
    arr = list(map(int, input().split()))
17
    print(*product_except_self(arr, n))
18",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833522
1387833513,kadamaryan21418,unknown,unknown,"1
def max_subarray_difference(nums, n):
2
    """"""
3
    Calculate maximum absolute difference between sums of two contiguous subarrays.
4
    5
    Args:
6
        nums: List of integers
7
        n: Length of the array
8
    Returns:
9
        Maximum absolute difference possible
10
    """"""
11
    # Handle edge case
12
    if n < 2:
13
        return 0
14
        15
    # Keep track of maximum difference
16
    max_diff = float('-inf')
17
    18
    # Calculate total sum once
19
    total_sum = sum(nums)
20
    21
    # Keep track of left subarray sum
22
    left_sum = 0
23
    24
    # Try each possible partition point
25
    for i in range(n-1):  # Stop at n-1 to ensure right subarray is non-empty
26
        # Add current element to left sum
27
        left_sum += nums[i]
28
        29
        # Right sum can be calculated using total_sum - left_sum
30
        right_sum = total_sum - left_sum
31
        32
        # Calculate absolute difference
33
        curr_diff = abs(left_sum - right_sum)
34
        35
        # Update maximum difference if current is larger
36
        max_diff = max(max_diff, curr_diff)
37
    38
    return max_diff
39
40
def main():
41
    # Read number of test cases
42
    t = int(input())
43
    44
    # Process each test case
45
    for _ in range(t):
46
        # Read array size
47
        n = int(input())
48
        49
        # Read array elements
50
        nums = list(map(int, input().split()))
51
        52
        # Calculate and print result
53
        result = max_subarray_difference(nums, n)
54
        print(result)
55
56
if __name__ == ""__main__"":
57
    main()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833513
1387833514,atharvjadhav2910,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
        if total_energy % N != 0:
7
            results.append(-1)
8
            continue
9
        target = total_energy // N
10
        operations = 0
11
        surplus = 0
12
        for i in range(N):
13
            diff = energy[i] - target
14
            surplus += diff
15
            if surplus % K != 0:
16
                results.append(-1)
17
                break
18
            operations += abs(surplus // K)
19
        else:
20
            results.append(operations)
21
    return results
22
23
T = int(input())
24
test_cases = []
25
for _ in range(T):
26
    N, K = map(int, input().split())
27
    energy = list(map(int, input().split()))
28
    test_cases.append((N, K, energy))
29
30
results = minimum_operations(test_cases)
31
for res in results:
32
    print(res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833514
1387833518,parmesh214,unknown,unknown,"1
def product_array(arr):
2
    n = len(arr)
3
    left = [1] * n
4
    right = [1] * n
5
6
    for i in range(1, n):
7
        left[i] = left[i-1] * arr[i-1]
8
9
    for i in range(n-2, -1, -1):
10
        right[i] = right[i+1] * arr[i+1]
11
12
    result = [left[i] * right[i] for i in range(n)]
13
    return result
14
15
t = int(input())
16
for _ in range(t):
17
    n = int(input())
18
    arr = list(map(int, input().split()))
19
    result = product_array(arr)
20
    print(*result)
21",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833518
1387833510,codedemon1426,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    nums = list(map(int, input().split()))
4
5
    max_diff = 0
6
    total_sum = sum(nums)
7
    current_sum = 0
8
9
    for i in range(n - 1):
10
        current_sum += nums[i]
11
        sum1 = current_sum
12
        sum2 = total_sum - sum1
13
        diff = abs(sum1 - sum2)
14
        max_diff = max(max_diff, diff)
15
16
    print(max_diff)
17
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833510
1387833511,krishjain,unknown,unknown,"1
import sys
2
3
def max_absolute_difference(n, nums):
4
    total_sum = sum(nums)
5
    max_diff = 0
6
    left_sum = 0
7
    8
    for i in range(n - 1):
9
        left_sum += nums[i]
10
        right_sum = total_sum - left_sum
11
        max_diff = max(max_diff, abs(left_sum - right_sum))
12
    13
    return max_diff
14
15
def main():
16
    input = sys.stdin.read
17
    data = input().split()
18
    index = 0
19
    20
    t = int(data[index])
21
    index += 1
22
    results = []
23
    24
    for _ in range(t):
25
        n = int(data[index])
26
        index += 1
27
        nums = list(map(int, data[index:index + n]))
28
        index += n
29
        30
        results.append(str(max_absolute_difference(n, nums)))
31
    32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833511
1387833512,08vijay09,unknown,unknown,"1
def solve():
2
3
    T = int(input())  
4
5
    for _ in range(T):
6
7
        N, K = map(int, input().split())  
8
9
        energy = list(map(int, input().split())) 
10
11
        12
13
        14
15
        total_energy = sum(energy)
16
17
        18
19
        20
21
        if total_energy % N != 0:
22
23
            print(-1)
24
25
            continue
26
27
        28
29
        target = total_energy // N  
30
31
        operations = 0  
32
33
        34
35
        balance = 0  
36
37
        possible = True
38
39
        40
41
        for i in range(N):
42
43
            44
45
            energy_diff = energy[i] - target
46
47
            balance += energy_diff  
48
49
            50
51
            if balance % K != 0:
52
53
                possible = False
54
55
                break
56
57
            58
59
            operations += abs(balance) // K
60
61
        62
63
        if possible:
64
65
            print(operations)
66
67
        else:
68
69
            print(-1)
70
71
72
73
solve()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833512
1387833509,ankushchaudhary5,unknown,unknown,"1
def minimum_operations(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, K, energy = case
5
        total_energy = sum(energy)
6
        if total_energy % N != 0:
7
            results.append(-1)
8
            continue
9
        target = total_energy // N
10
        operations = 0
11
        surplus = 0
12
        for i in range(N):
13
            diff = energy[i] - target
14
            surplus += diff
15
            if surplus % K != 0:
16
                results.append(-1)
17
                break
18
            operations += abs(surplus // K)
19
        else:
20
            results.append(operations)
21
    return results
22
23
T = int(input())
24
test_cases = []
25
for _ in range(T):
26
    N, K = map(int, input().split())
27
    energy = list(map(int, input().split()))
28
    test_cases.append((N, K, energy))
29
30
results = minimum_operations(test_cases)
31
for res in results:
32
    print(res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833509
