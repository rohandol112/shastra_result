submission_id,username,problem_name,language,code,page,url
1387833214,h1032221511,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, nums = case
5
        total_sum = sum(nums)
6
        left_sum = 0
7
        max_diff = 0
8
        for i in range(n - 1):
9
            left_sum += nums[i]
10
            right_sum = total_sum - left_sum
11
            max_diff = max(max_diff, abs(left_sum - right_sum))
12
        results.append(max_diff)
13
    return results
14
15
16
t = int(input())
17
test_cases = []
18
for _ in range(t):
19
    n = int(input())
20
    nums = list(map(int, input().split()))
21
    test_cases.append((n, nums))
22
23
results = max_absolute_difference(test_cases)
24
for res in results:
25
    print(res)
26",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833214
1387833216,h1032220835,unknown,unknown,"1
def max_abs_diff_partition(t, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        n, nums = case
8
9
        total_sum = sum(nums)
10
11
        prefix_sum = 0
12
13
        max_diff = 0
14
15
        # Iterate through the array and partition at every possible point
16
17
        for i in range(n - 1):  # We stop at n-1 because both subarrays must be non-empty
18
19
            prefix_sum += nums[i]
20
21
            suffix_sum = total_sum - prefix_sum
22
23
            diff = abs(prefix_sum - suffix_sum)
24
25
            max_diff = max(max_diff, diff)
26
27
        results.append(max_diff)
28
29
    return results
30
31
# Input and Output Handling
32
33
t = int(input())  # number of test cases
34
35
test_cases = []
36
37
for _ in range(t):
38
39
    n = int(input())  # size of the array
40
41
    nums = list(map(int, input().split()))  # the array
42
43
    test_cases.append((n, nums))
44
45
# Solve and Output Results
46
47
results = max_abs_diff_partition(t, test_cases)
48
49
for result in results:
50
51
    print(result)",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833216
1387833217,pjha9996,unknown,unknown,"1
def minimum_operations_to_equalize(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        N, K = test_cases[t][""N""], test_cases[t][""K""]
6
        energy = test_cases[t][""energy""]
7
        8
        total_energy = sum(energy)
9
        10
        # Check if total energy is divisible by N
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
15
        target = total_energy // N  # Target energy for each station
16
        17
        # Calculate difference array to measure imbalance
18
        diff = [energy[i] - target for i in range(N)]
19
        20
        # Track prefix sum to balance the circle
21
        prefix_sum = 0
22
        operations = 0
23
24
        for i in range(N):
25
            prefix_sum += diff[i]
26
            if prefix_sum % K != 0:  # If imbalance cannot be resolved with K
27
                operations = -1
28
                break
29
            operations += abs(prefix_sum) // K
30
        31
        results.append(operations if operations != -1 else -1)
32
33
    return results
34
35
# Input handling
36
if __name__ == ""__main__"":
37
    T = int(input())
38
    test_cases = []
39
40
    for _ in range(T):
41
        N, K = map(int, input().split())
42
        energy = list(map(int, input().split()))
43
        test_cases.append({""N"": N, ""K"": K, ""energy"": energy})
44
45
    results = minimum_operations_to_equalize(T, test_cases)
46
47
    for res in results:
48
        print(res)
49",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833217
1387833207,pandeyadi120,unknown,unknown,"1
def solve_testcase(n, nums):
2
    # If array has only 2 elements, return their absolute difference
3
    if n == 2:
4
        return abs(nums[0] - nums[1])
5
    6
    # Calculate the total sum of the array
7
    total_sum = sum(nums)
8
    9
    max_diff = 0
10
    left_sum = 0
11
    12
    # Try each possible partition point
13
    # We need to ensure both subarrays are non-empty,
14
    # so we only go up to n-1 (leaving at least one element for the right subarray)
15
    for i in range(n-1):
16
        # Add current element to left sum
17
        left_sum += nums[i]
18
        # Right sum is the remaining elements
19
        right_sum = total_sum - left_sum
20
        # Calculate absolute difference
21
        curr_diff = abs(left_sum - right_sum)
22
        # Update max_diff if current difference is larger
23
        max_diff = max(max_diff, curr_diff)
24
    25
    return max_diff
26
27
def main():
28
    # Read number of test cases
29
    t = int(input())
30
    31
    # Process each test case
32
    for _ in range(t):
33
        # Read array size
34
        n = int(input())
35
        # Read array elements
36
        nums = list(map(int, input().split()))
37
        38
        # Solve current test case
39
        result = solve_testcase(n, nums)
40
        41
        # Print result
42
        print(result)
43
44
if __name__ == ""__main__"":
45
    main()",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833207
1387833208,yashasharma21005,unknown,unknown,"1
def max_absolute_difference(t, test_cases):
2
    results = []
3
    for test in test_cases:
4
        n, nums = test
5
        prefix = [0] * n
6
        suffix = [0] * n
7
        prefix[0] = nums[0]
8
        for i in range(1, n):
9
            prefix[i] = prefix[i - 1] + nums[i]
10
        suffix[-1] = nums[-1]
11
        for i in range(n - 2, -1, -1):
12
            suffix[i] = suffix[i + 1] + nums[i]
13
14
        max_diff = 0
15
        for i in range(n - 1):  # Partition at i
16
            left_sum = prefix[i]
17
            right_sum = suffix[i + 1]
18
            max_diff = max(max_diff, abs(left_sum - right_sum))
19
20
        results.append(max_diff)
21
22
    return results
23
24
t = int(input())
25
test_cases = []
26
for _ in range(t):
27
    n = int(input())
28
    nums = list(map(int, input().split()))
29
    test_cases.append((n, nums))
30
31
results = max_absolute_difference(t, test_cases)
32
for res in results:
33
    print(res)
34",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833208
1387833212,h1032220685,unknown,unknown,"1
with Ada.Text_IO; use Ada.Text_IO;
2
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
3
4
procedure Product_Except_Self is
5
   type Int_Array is array (Positive range <>) of Integer;
6
7
   -- Function to calculate the product array except self
8
   function Compute_Products (Values : Int_Array; N : Integer) return Int_Array is
9
      Prefix  : Int_Array (1 .. N) := (others => 1);
10
      Suffix  : Int_Array (1 .. N) := (others => 1);
11
      Result  : Int_Array (1 .. N) := (others => 0);
12
   begin
13
      -- Calculate Prefix products
14
      for I in 2 .. N loop
15
         Prefix(I) := Prefix(I - 1) * Values(I - 1);
16
      end loop;
17
18
      -- Calculate Suffix products
19
      for I in reverse 1 .. N - 1 loop
20
         Suffix(I) := Suffix(I + 1) * Values(I + 1);
21
      end loop;
22
23
      -- Compute result using Prefix and Suffix
24
      for I in 1 .. N loop
25
         Result(I) := Prefix(I) * Suffix(I);
26
      end loop;
27
28
      return Result;
29
   end Compute_Products;
30
31
   -- Main block for input and processing test cases
32
   T : Integer;
33
begin
34
   -- Input the number of test cases
35
   Get(T);
36
37
   for Test in 1 .. T loop
38
      declare
39
         N      : Integer;
40
         Values : Int_Array (1 .. 100_000);
41
      begin
42
         -- Input the size of the array
43
         Get(N);
44
45
         -- Read the values
46
         for I in 1 .. N loop
47
            Get(Values(I));
48
         end loop;
49
50
         -- Compute the result
51
         declare
52
            Result : Int_Array (1 .. N) := Compute_Products(Values, N);
53
         begin
54
            -- Print the result in the required format
55
            for I in 1 .. N loop
56
               if I > 1 then
57
                  Put("" ""); -- Add a space before every number except the first
58
               end if;
59
               declare
60
                  Image : String := Integer'Image(Result(I)); -- Get string representation
61
               begin
62
                  Put(Image(Image'First + 1 .. Image'Last)); -- Remove leading space
63
               end;
64
            end loop;
65
            New_Line;
66
         end;
67
      end;
68
   end loop;
69
end Product_Except_Self;
70",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833212
1387833200,sauravyadav244,unknown,unknown,"1
def product_except_self(values):
2
    n = len(values)
3
    prefix = [1] * n
4
    suffix = [1] * n
5
    result = [1] * n
6
    7
    # Compute prefix products
8
    for i in range(1, n):
9
        prefix[i] = prefix[i - 1] * values[i - 1]
10
    11
    # Compute suffix products
12
    for i in range(n - 2, -1, -1):
13
        suffix[i] = suffix[i + 1] * values[i + 1]
14
    15
    # Combine prefix and suffix
16
    for i in range(n):
17
        result[i] = prefix[i] * suffix[i]
18
    19
    return result
20
21
# Input reading
22
T = int(input())
23
results = []
24
for _ in range(T):
25
    n = int(input())
26
    values = list(map(int, input().split()))
27
    results.append(product_except_self(values))
28
29
# Output results
30
for res in results:
31
    print("" "".join(map(str, res)))
32",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833200
1387833202,angelaanindyajo1,unknown,unknown,"1
def max_absolute_difference(n, nums):
2
   3
    prefix = [0] * n
4
    prefix[0] = nums[0]
5
    for i in range(1, n):
6
        prefix[i] = prefix[i - 1] + nums[i]
7
    8
    suffix = [0] * n
9
    suffix[n - 1] = nums[n - 1]
10
    for i in range(n - 2, -1, -1):
11
        suffix[i] = suffix[i + 1] + nums[i]
12
    13
    max_diff = 0
14
    for i in range(n - 1):  
15
        left_sum = prefix[i]
16
        right_sum = suffix[i + 1]
17
        max_diff = max(max_diff, abs(left_sum - right_sum))
18
    19
    return max_diff
20
21
T = int(input().strip())  
22
for _ in range(T):
23
    N = int(input().strip()) 
24
    nums = list(map(int, input().strip().split())) 
25
    print(max_absolute_difference(N, nums))",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833202
1387833204,pankajchaudhar15,unknown,unknown,"1
def max_absolute_difference():
2
    t = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(t):
6
        n = int(input())  # Size of the array
7
        nums = list(map(int, input().split()))
8
        9
        # Compute prefix sums
10
        prefix_sum = [0] * n
11
        prefix_sum[0] = nums[0]
12
        for i in range(1, n):
13
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
14
        15
        # Total sum of the array
16
        total_sum = prefix_sum[-1]
17
        18
        # Calculate maximum absolute difference
19
        max_diff = 0
20
        for i in range(n - 1):
21
            left_sum = prefix_sum[i]
22
            right_sum = total_sum - left_sum
23
            max_diff = max(max_diff, abs(left_sum - right_sum))
24
        25
        # Store the result for the current test case
26
        results.append(max_diff)
27
    28
    # Print all results
29
    print(""\n"".join(map(str, results)))
30
31
# Example Usage
32
# Input according to the problem statement
33
max_absolute_difference()
34",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833204
1387833198,vnandini1530,unknown,unknown,"1
def solve_testcase(n, values):
2
    # Initialize result array
3
    result = [1] * n
4
    5
    # Calculate prefix products
6
    # result[i] will first store product of all elements to the left of i
7
    prefix = 1
8
    for i in range(n):
9
        result[i] = prefix
10
        prefix *= values[i]
11
    12
    # Calculate suffix products and combine with prefix products
13
    # For each position, multiply its prefix product with suffix product
14
    suffix = 1
15
    for i in range(n-1, -1, -1):
16
        result[i] *= suffix
17
        suffix *= values[i]
18
    19
    return result
20
21
def main():
22
    # Read number of test cases
23
    T = int(input())
24
    25
    # Process each test case
26
    for _ in range(T):
27
        # Read input for current test case
28
        n = int(input())
29
        values = list(map(int, input().split()))
30
        31
        # Solve current test case
32
        result = solve_testcase(n, values)
33
        34
        # Print result
35
        print(*result)
36
37
if __name__ == ""__main__"":
38
    main()
39",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833198
