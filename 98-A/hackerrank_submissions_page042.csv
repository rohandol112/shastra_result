submission_id,username,problem_name,language,code,page,url
1387833965,h1032231332,unknown,unknown,"1
def solve():
2
    t = int(input())  # number of test cases
3
    for _ in range(t):
4
        n = int(input())  # size of the array
5
        nums = list(map(int, input().split()))  # the array
6
        7
        # Calculate the total sum of the array
8
        total_sum = sum(nums)
9
        10
        # Variables to track the left sum and maximum absolute difference
11
        left_sum = 0
12
        max_difference = 0
13
        14
        # Iterate to find the maximum absolute difference
15
        for i in range(n - 1):  # We stop at n-1 since we need non-empty right subarray
16
            left_sum += nums[i]
17
            right_sum = total_sum - left_sum
18
            max_difference = max(max_difference, abs(left_sum - right_sum))
19
        20
        print(max_difference)
21
22
# Call the function to solve the problem
23
solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833965
1387833966,syedtahami123,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result using prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Compute results
37
results = product_except_self(test_cases)
38
39
# Output results
40
for res in results:
41
    print("" "".join(map(str, res)))
42
43
44
45",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833966
1387833968,swayam_prajapat1,unknown,unknown,"1
def min_operations_to_equalize(T, test_cases):  
2
    results = []  
3
    4
    for case in test_cases:  
5
        N, K = case[0]  
6
        energy = case[1]  
7
8
        total_energy = sum(energy)  
9
10
        # Check if total energy is divisible by N  
11
        if total_energy % N != 0:  
12
            results.append(-1)  
13
            continue  
14
        15
        target_energy = total_energy // N  
16
        operations = 0  
17
        current_surplus = 0  
18
        19
        # Calculate the operations needed to equalize energy  
20
        for e in energy:  
21
            # Calculate current difference from target  
22
            current_balance = e - target_energy  
23
            24
            # Current balance is how much we need to give or take.   
25
            # Update surplus if current balance is positive, else deficit.  
26
            current_surplus += current_balance  
27
            28
            # If current surplus is positive, we can use it to balance in future steps  
29
            if current_surplus > 0:  
30
                operations += current_surplus // K  
31
        32
        # Check if we balanced correctly by using all surplus  
33
        if current_surplus % K != 0:  
34
            results.append(-1)  
35
        else:  
36
            results.append(operations)  
37
38
    return results  
39
40
# Read input and execute the function  
41
import sys  
42
43
# Use sys.stdin.read to handle input in one go  
44
input_data = sys.stdin.read().strip().splitlines()  
45
T = int(input_data[0])  
46
test_cases = []  
47
48
for i in range(1, len(input_data), 2):  
49
    N, K = map(int, input_data[i].split())  
50
    energy = list(map(int, input_data[i + 1].split()))  
51
    test_cases.append(((N, K), energy))  
52
53
# Get results and print  
54
results = min_operations_to_equalize(T, test_cases)  
55
56
for result in results:  
57
    print(result)",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833968
1387833962,ktiwari3215,unknown,unknown,"1
def solve():
2
    T = int(input())  # number of test cases
3
    for _ in range(T):
4
        n = int(input())  # number of nodes in the network
5
        values = list(map(int, input().split()))  # list of node values
6
7
        # Arrays to store the left and right products
8
        left = [1] * n
9
        right = [1] * n
10
        result = [0] * n
11
12
        # Fill the left array
13
        for i in range(1, n):
14
            left[i] = left[i - 1] * values[i - 1]
15
16
        # Fill the right array
17
        for i in range(n - 2, -1, -1):
18
            right[i] = right[i + 1] * values[i + 1]
19
20
        # Calculate result by multiplying corresponding left and right products
21
        for i in range(n):
22
            result[i] = left[i] * right[i]
23
24
        print("" "".join(map(str, result)))
25
26
# Call the function to run the solution
27
solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833962
1387833963,h1032221373,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); // Number of test cases
8
        9
        while (T-- > 0) {
10
            int N = scanner.nextInt(); // Number of power stations
11
            int K = scanner.nextInt(); // Energy transfer per operation
12
            int[] energy = new int[N];
13
            14
            long totalEnergy = 0; // Use long to avoid overflow
15
            16
            // Read the energy levels and calculate the total energy
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextInt();
19
                totalEnergy += energy[i];
20
            }
21
            22
            // Check if total energy is divisible by N
23
            if (totalEnergy % N != 0) {
24
                System.out.println(-1);
25
                continue;
26
            }
27
            28
            long target = totalEnergy / N; // Target energy per station
29
            long imbalance = 0, operations = 0;
30
            boolean possible = true;
31
            32
            for (int i = 0; i < N; i++) {
33
                // Calculate the difference from the target
34
                imbalance += energy[i] - target;
35
                36
                // If the imbalance is not a multiple of K, it's not possible to balance
37
                if (Math.abs(imbalance) % K != 0) {
38
                    possible = false;
39
                    break;
40
                }
41
                42
                // Count operations required to fix imbalance
43
                operations += Math.abs(imbalance) / K;
44
            }
45
            46
            // If balancing is possible, print the operations; otherwise, -1
47
            System.out.println(possible ? operations : -1);
48
        }
49
        50
        scanner.close();
51
    }
52
}
53",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833963
1387833964,3277kunaljain,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        N, K = map(int, input().split())
5
        energy = list(map(int, input().split()))
6
        total_energy = sum(energy)     
7
        if total_energy % N != 0:
8
            print(-1)
9
            continue      
10
        target_energy = total_energy // N
11
        operations = 0
12
        current_balance = 0       
13
        for i in range(N):
14
            current_balance += energy[i] - target_energy
15
            operations += abs(current_balance) // K
16
            if abs(current_balance) % K != 0:
17
                operations = -1
18
                break
19
        print(operations)
20
solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833964
1387833960,shrikrushna07,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, nums = t
6
        total_sum = sum(nums)
7
        prefix_sum = 0
8
        max_diff = 0
9
        10
        # Iterate through possible partitions
11
        for i in range(n - 1):  # Last partition is invalid (requires two non-empty subarrays)
12
            prefix_sum += nums[i]
13
            suffix_sum = total_sum - prefix_sum
14
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
15
        16
        results.append(max_diff)
17
    18
    return results
19
20
21
# Input handling
22
t = int(input())
23
test_cases = []
24
25
for _ in range(t):
26
    n = int(input())
27
    nums = list(map(int, input().split()))
28
    test_cases.append((n, nums))
29
30
# Compute results
31
results = max_absolute_difference(test_cases)
32
33
# Output results
34
for res in results:
35
    print(res)
36",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833960
1387833959,abhaywadkar2004,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        long long K;
12
        cin >> N >> K;
13
14
        vector<long long> energy(N);
15
        long long total_energy = 0;
16
17
        for (auto &e : energy) {
18
            cin >> e;
19
            total_energy += e;
20
        }
21
22
        if (total_energy % N != 0) {
23
            cout << -1 << endl;
24
            continue;
25
        }
26
27
        long long target_energy = total_energy / N, surplus = 0;
28
29
        bool possible = true;
30
        for (auto e : energy) {
31
            long long diff = e - target_energy;
32
            if (diff % K != 0) {
33
                possible = false;
34
                break;
35
            }
36
            surplus += diff / K;
37
        }
38
39
        cout << (possible && surplus == 0 ? abs(surplus) : -1) << endl;
40
    }
41
}
42
43
int main() {
44
    ios::sync_with_stdio(false);
45
    cin.tie(nullptr);
46
    solve();
47
    return 0;
48
}
49",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833959
1387833961,pratiksolves,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
using namespace std;
5
6
int main() {
7
    int t; 
8
    cin >> t;
9
    while (t--) {
10
        int n;
11
        cin >> n;
12
        vector<int> nums(n);
13
        for (int i = 0; i < n; ++i) {
14
            cin >> nums[i];
15
        }
16
17
        long long total_sum = 0;
18
        for (int i = 0; i < n; ++i) {
19
            total_sum += nums[i];
20
        }
21
22
        long long prefix_sum = 0;
23
        long long max_diff = 0;
24
25
        for (int i = 0; i < n - 1; ++i) {
26
            prefix_sum += nums[i];
27
            long long right_sum = total_sum - prefix_sum;
28
            max_diff = max(max_diff, abs(prefix_sum - right_sum));
29
        }
30
31
        cout << max_diff << endl;
32
    }
33
    return 0;
34
}
35",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833961
1387833956,rahulgeorge1212,unknown,unknown,"1
def min_operations_to_equalize_energy(t, test_cases):
2
    results = []
3
    4
    for test_case in test_cases:
5
        N, K = test_case[0], test_case[1]
6
        energies = test_case[2]
7
        8
        total_energy = sum(energies)
9
        10
        # Check if total energy is divisible by N
11
        if total_energy % N != 0:
12
            results.append(-1)
13
            continue
14
        15
        target_energy = total_energy // N
16
        operations = 0
17
        balance = 0
18
        19
        # Process each station
20
        for i in range(N):
21
            # Calculate the current difference from the target
22
            diff = energies[i] - target_energy
23
            balance += diff
24
            25
            # We need to balance this difference by transferring multiples of K
26
            if balance % K != 0:
27
                results.append(-1)
28
                break
29
            operations += abs(balance) // K
30
        31
        else:
32
            results.append(operations)
33
    34
    return results
35
36
# Input processing
37
t = int(input())  # number of test cases
38
test_cases = []
39
for _ in range(t):
40
    N, K = map(int, input().split())  # number of stations and units of energy that can be transferred in one operation
41
    energies = list(map(int, input().split()))  # energy at each station
42
    test_cases.append((N, K, energies))
43
44
# Call function and print results
45
results = min_operations_to_equalize_energy(t, test_cases)
46
for result in results:
47
    print(result)
48",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833956
