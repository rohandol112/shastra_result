submission_id,username,problem_name,language,code,page,url
1387833172,h1032221506,unknown,unknown,"1
def calculate_product_except_self(values):
2
    n = len(values)
3
    result = [1] * n
4
5
    prefix_product = 1
6
    for i in range(n):
7
        result[i] = prefix_product
8
        prefix_product *= values[i]
9
10
    suffix_product = 1
11
    for i in range(n - 1, -1, -1):
12
        result[i] *= suffix_product
13
        suffix_product *= values[i]
14
15
    return result
16
17
t = int(input())
18
outputs = []
19
20
for _ in range(t):
21
    n = int(input())
22
    values = list(map(int, input().split()))
23
    outputs.append(calculate_product_except_self(values))
24
25
for result in outputs:
26
    print("" "".join(map(str, result)))",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833172
1387833174,harsh_singh26011,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
vector<vector<long long>> computeProducts(int T, vector<pair<int, vector<int>>>& testCases) {
6
    vector<vector<long long>> results;
7
8
    for (int t = 0; t < T; ++t) {
9
        int n = testCases[t].first;
10
        vector<int>& values = testCases[t].second;
11
        12
        // Result vector
13
        vector<long long> result(n, 1);
14
15
        // Compute prefix products
16
        long long prefix = 1;
17
        for (int i = 0; i < n; ++i) {
18
            result[i] = prefix;
19
            prefix *= values[i];
20
        }
21
22
        // Compute suffix products and multiply with prefix
23
        long long suffix = 1;
24
        for (int i = n - 1; i >= 0; --i) {
25
            result[i] *= suffix;
26
            suffix *= values[i];
27
        }
28
29
        results.push_back(result);
30
    }
31
32
    return results;
33
}
34
35
int main() {
36
    int T;
37
    cin >> T;  // Number of test cases
38
    vector<pair<int, vector<int>>> testCases;
39
40
    for (int t = 0; t < T; ++t) {
41
        int n;
42
        cin >> n;  // Number of nodes
43
        vector<int> values(n);
44
        for (int i = 0; i < n; ++i) {
45
            cin >> values[i];
46
        }
47
        testCases.emplace_back(n, values);
48
    }
49
50
    // Compute results
51
    vector<vector<long long>> results = computeProducts(T, testCases);
52
53
    // Output results
54
    for (const auto& result : results) {
55
        for (size_t i = 0; i < result.size(); ++i) {
56
            if (i > 0) cout << "" "";
57
            cout << result[i];
58
        }
59
        cout << endl;
60
    }
61
62
    return 0;
63
}
64",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833174
1387833177,pandeyadi120,unknown,unknown,"1
def solve_testcase(N, K, energy):
2
    # Calculate total energy and target
3
    total_energy = sum(energy)
4
    5
    # Check if equal distribution is possible
6
    if total_energy % N != 0:
7
        return -1
8
    9
    target = total_energy // N
10
    11
    # If already equalized
12
    if all(e == target for e in energy):
13
        return 0
14
    15
    # For each position, calculate how many transfers are needed
16
    total_transfers = 0
17
    excess = 0  # Keep track of excess/deficit as we go around the circle
18
    19
    for i in range(N):
20
        # Current position's excess/deficit including previous remainder
21
        curr_with_excess = energy[i] + excess
22
        23
        # How far are we from target at this position
24
        diff_from_target = curr_with_excess - target
25
        26
        # This difference will need to be transferred to next position
27
        excess = diff_from_target
28
        29
        # If we need to make transfers
30
        if diff_from_target != 0:
31
            # If we can't transfer in K-unit chunks
32
            if abs(diff_from_target) % K != 0:
33
                return -1
34
                35
            # Add number of K-unit transfers needed
36
            total_transfers += abs(diff_from_target) // K
37
    38
    # After going around the circle, if there's any remainder, it's impossible
39
    if excess != 0:
40
        return -1
41
        42
    return total_transfers
43
44
def main():
45
    # Read number of test cases
46
    T = int(input())
47
    48
    # Process each test case
49
    for _ in range(T):
50
        # Read N and K
51
        N, K = map(int, input().split())
52
        53
        # Read energy array
54
        energy = list(map(int, input().split()))
55
        56
        # Solve current test case
57
        result = solve_testcase(N, K, energy)
58
        59
        # Print result
60
        print(result)
61
62
if __name__ == ""__main__"":
63
    main()",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833177
1387833166,sohamkadam0012,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <stdbool.h>
4
5
// Function to calculate the minimum operations or check if equalization is impossible
6
int minOperationsToEqualize(int *energy, int n, int k) {
7
    long long totalEnergy = 0;
8
9
    // Calculate total energy
10
    for (int i = 0; i < n; i++) {
11
        totalEnergy += energy[i];
12
    }
13
14
    // Check if total energy is divisible by N
15
    if (totalEnergy % n != 0) {
16
        return -1; // Impossible to equalize
17
    }
18
19
    long long targetEnergy = totalEnergy / n; // Target energy for each station
20
    long long operations = 0;
21
    long long surplus = 0; // Tracks energy surplus or deficit in the cycle
22
23
    // Traverse each station and calculate the surplus or deficit
24
    for (int i = 0; i < n; i++) {
25
        surplus += energy[i] - targetEnergy;
26
27
        // Check if surplus can be transferred in multiples of K
28
        if (abs(surplus) % k != 0) {
29
            return -1;
30
        }
31
32
        // Add the number of operations needed for balancing the surplus
33
        operations += abs(surplus / k);
34
    }
35
36
    return operations;
37
}
38
39
int main() {
40
    int T;
41
    scanf(""%d"", &T);
42
43
    while (T--) {
44
        int n, k;
45
        scanf(""%d %d"", &n, &k);
46
47
        int *energy = (int *)malloc(n * sizeof(int));
48
        for (int i = 0; i < n; i++) {
49
            scanf(""%d"", &energy[i]);
50
        }
51
52
        int result = minOperationsToEqualize(energy, n, k);
53
        printf(""%d\n"", result);
54
55
        free(energy);
56
    }
57
58
    return 0;
59
}
60",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833166
1387833167,gpratik0990,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, K = test_cases[t][0]
5
        energy = test_cases[t][1]
6
7
        # Check if total energy is divisible by N
8
        total_energy = sum(energy)
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
13
        target = total_energy // N
14
        prefix_sum = 0
15
        operations = 0
16
        is_possible = True
17
18
        # Iterate through the array to calculate operations
19
        for i in range(N):
20
            diff = energy[i] - target
21
            prefix_sum += diff
22
            # Check if prefix_sum is divisible by K
23
            if prefix_sum % K != 0:
24
                is_possible = False
25
                break
26
            operations += abs(prefix_sum // K)
27
28
        if is_possible:
29
            results.append(operations)
30
        else:
31
            results.append(-1)
32
33
    return results
34
35
# Input and Output Handling
36
T = int(input())
37
test_cases = []
38
for _ in range(T):
39
    N, K = map(int, input().split())
40
    energy = list(map(int, input().split()))
41
    test_cases.append(((N, K), energy))
42
43
# Solve and Output Results
44
results = equalize_energy(T, test_cases)
45
for res in results:
46
    print(res)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833167
1387833168,23jyotigaud,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    idx = 0  
7
    T = int(data[idx])  
8
    idx += 1  
9
    results = []
10
    11
    for _ in range(T):
12
        N, K = map(int, data[idx].split())  
13
        idx += 1
14
        energy = list(map(int, data[idx].split()))
15
        idx += 1
16
        17
        total_energy = sum(energy)
18
        19
        if total_energy % N != 0:
20
            results.append(-1)
21
            continue
22
        23
        target = total_energy // N
24
        operations = 0
25
        current_balance = 0
26
        27
        for i in range(N):
28
            diff = energy[i] - target
29
            current_balance += diff
30
            if current_balance % K != 0:
31
                operations = -1
32
                break
33
            operations += abs(current_balance // K)
34
        35
        results.append(operations)
36
    37
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
38
39
solve()
40",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833168
1387833162,parabsaloni23,unknown,unknown,"1
def min_operations_to_equalize(N, K, energy):
2
    3
    total_energy = sum(energy)
4
    5
    6
    if total_energy % N != 0:
7
        return -1
8
    9
    10
    target = total_energy // N
11
    12
    operations = 0
13
    imbalance = 0
14
    15
    16
    for i in range(N):
17
        18
        imbalance += energy[i] - target
19
                     20
        if imbalance % K != 0:
21
            return -1
22
        23
        24
        operations += abs(imbalance) // K
25
    26
    return operations
27
28
29
30
31
32
T = int(input())  
33
for _ in range(T):
34
    N, K = map(int, input().split())  
35
    energy = list(map(int, input().split()))  
36
    37
   38
    result = min_operations_to_equalize(N, K, energy)
39
    print(result)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833162
1387833164,singhrajbadri,unknown,unknown,"1
def equalize_energy(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        N, K = test_cases[t][0]
6
        energy = test_cases[t][1]
7
        8
        total_energy = sum(energy)
9
        if total_energy % N != 0:
10
            results.append(-1)
11
            continue
12
        13
        target = total_energy // N
14
        imbalance = 0
15
        operations = 0
16
        possible = True
17
        18
        for i in range(N):
19
            imbalance += energy[i] - target
20
            if imbalance % K != 0:
21
                possible = False
22
                break
23
            operations += abs(imbalance) // K
24
        25
        results.append(operations if possible else -1)
26
    27
    return results
28
29
T = int(input())
30
test_cases = []
31
32
for _ in range(T):
33
    N, K = map(int, input().split())
34
    energy = list(map(int, input().split()))
35
    test_cases.append(((N, K), energy))
36
results = equalize_energy(T, test_cases)
37
38
for result in results:
39
    print(result)
40",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833164
1387833163,h1032221562,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, nums = case
6
7
        prefix_sum = [0] * n
8
        suffix_sum = [0] * n
9
10
        prefix_sum[0] = nums[0]
11
        for i in range(1, n):
12
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]
13
14
        suffix_sum[n - 1] = nums[n - 1]
15
        for i in range(n - 2, -1, -1):
16
            suffix_sum[i] = suffix_sum[i + 1] + nums[i]
17
18
        max_diff = 0
19
        for i in range(n - 1):
20
            left_sum = prefix_sum[i]
21
            right_sum = suffix_sum[i + 1]
22
            max_diff = max(max_diff, abs(left_sum - right_sum))
23
24
        results.append(max_diff)
25
26
    return results
27
28
T = int(input())
29
test_cases = []
30
for _ in range(T):
31
    n = int(input())
32
    nums = list(map(int, input().split()))
33
    test_cases.append((n, nums))
34
35
output = max_absolute_difference(test_cases)
36
for res in output:
37
    print(res)
38",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833163
1387833160,h1032231273,unknown,unknown,"1
def min_operations(n, k, energy):
2
    """"""
3
    Calculates the minimum number of operations required to equalize the energy across all stations.
4
5
    Args:
6
        n: The number of power stations.
7
        k: The number of energy units that can be transferred in one operation.
8
        energy: A list containing the energy of each power station.
9
10
    Returns:
11
        The minimum number of operations required, or -1 if it's impossible to equalize.
12
    """"""
13
14
    total_energy = sum(energy)
15
    if total_energy % n != 0:
16
        return -1  # Impossible to equalize if total energy is not divisible by n
17
18
    target_energy = total_energy // n
19
20
    operations = 0
21
    for i in range(n):
22
        diff = target_energy - energy[i]
23
        if diff > 0:
24
            operations += (diff + k - 1) // k  # Round up to the nearest multiple of k
25
26
    return operations
27
28
# Example usage
29
T = int(input())  # Number of test cases
30
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    energy = list(map(int, input().split()))
34
35
    result = min_operations(n, k, energy)
36
    print(result)
37",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833160
