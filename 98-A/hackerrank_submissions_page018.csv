submission_id,username,problem_name,language,code,page,url
1387834554,yashdubeyenter15,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); // Number of test cases
8
        9
        while (T-- > 0) {
10
            int N = scanner.nextInt(); // Number of power stations
11
            int K = scanner.nextInt(); // Units of energy per transfer
12
            13
            long[] energy = new long[N];
14
            long totalEnergy = 0;
15
            16
            // Read energy values and calculate total
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextLong();
19
                totalEnergy += energy[i];
20
            }
21
            22
            System.out.println(minOperationsToEqualize(N, K, energy, totalEnergy));
23
        }
24
        25
        scanner.close();
26
    }
27
    28
    private static long minOperationsToEqualize(int N, int K, long[] energy, long totalEnergy) {
29
        // Check if equalization is possible
30
        if (totalEnergy % N != 0) {
31
            return -1;
32
        }
33
        34
        long targetEnergy = totalEnergy / N;
35
        36
        // Check if already equalized
37
        boolean isEqual = true;
38
        for (int i = 0; i < N; i++) {
39
            if (energy[i] != targetEnergy) {
40
                isEqual = false;
41
                break;
42
            }
43
        }
44
        if (isEqual) {
45
            return 0;
46
        }
47
        48
        // Count operations needed
49
        long operations = 0;
50
        long[] current = energy.clone();
51
        52
        // First check if it's possible to equalize
53
        for (int i = 0; i < N; i++) {
54
            if (Math.abs(current[i] - targetEnergy) % K != 0) {
55
                return -1;
56
            }
57
        }
58
        59
        // Try to equalize by transferring energy
60
        for (int i = 0; i < N - 1; i++) {
61
            if (current[i] > targetEnergy) {
62
                long excess = current[i] - targetEnergy;
63
                long transfers = excess / K;
64
                current[i] -= transfers * K;
65
                current[i + 1] += transfers * K;
66
                operations += transfers;
67
            } else if (current[i] < targetEnergy) {
68
                long deficit = targetEnergy - current[i];
69
                long transfers = deficit / K;
70
                current[i] += transfers * K;
71
                current[i + 1] -= transfers * K;
72
                operations += transfers;
73
            }
74
        }
75
        76
        // Check final station
77
        if (current[N - 1] != targetEnergy) {
78
            // Need to transfer to/from first station
79
            long diff = Math.abs(current[N - 1] - targetEnergy);
80
            operations += diff / K;
81
        }
82
        83
        return operations;
84
    }
85
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834554
1387834559,vivekbhandari101,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <algorithm>
4
using namespace std;
5
int main() {
6
    int t;
7
    cin >> t;
8
    while (t--) {
9
        int n, k;
10
        cin >> n >> k;
11
        vector<int> energy(n);
12
        int total_energy = 0;
13
        for (int i = 0; i < n; ++i) {
14
            cin >> energy[i];
15
            total_energy += energy[i];
16
        }
17
        if (total_energy % n != 0) {
18
            cout << -1 << endl;
19
            continue;
20
        }
21
        int target_energy = total_energy / n;
22
        int operations = 0;
23
        // Calculate the net energy difference for each station
24
        vector<int> net_diff(n);
25
        for (int i = 0; i < n; ++i) {
26
            net_diff[i] = energy[i] - target_energy;
27
        }
28
        // Calculate the cumulative sum of net differences
29
        for (int i = 1; i < n; ++i) {
30
            net_diff[i] += net_diff[i - 1];
31
        }
32
        // Find the minimum number of operations to equalize
33
        int min_ops = INT_MAX;
34
        for (int i = 0; i < n; ++i) {
35
            int current_ops = abs(net_diff[i]) / k;
36
            // Handle the case where net_diff[i] is not a multiple of k
37
            if (abs(net_diff[i]) % k != 0) {
38
                current_ops++;
39
            }
40
            min_ops = min(min_ops, current_ops);
41
        }
42
        cout << min_ops << endl;
43
    }
44
    return 0;
45
}
46",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834559
1387834560,codedot,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n = int(input())
4
    nums = list(map(int, input().split()))
5
    total_sum = sum(nums)
6
    max_diff = 0
7
    8
    left_sum = 0
9
    for i in range(n - 1):
10
        left_sum += nums[i]
11
        right_sum = total_sum - left_sum
12
        diff = abs(left_sum - right_sum)
13
        if diff > max_diff:
14
            max_diff = diff
15
                16
    print(max_diff)
17",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834560
1387834546,akashyadv7233,unknown,unknown,"1
function processData(input) {
2
    const lines = input.trim().split(""\n"");
3
    const t = parseInt(lines[0]); 
4
    const results = [];
5
    6
    let index = 1;
7
    for (let testCase = 0; testCase < t; testCase++) {
8
        const n = parseInt(lines[index]); 
9
        const nums = lines[index + 1].split("" "").map(Number);
10
        index += 2;
11
12
        const prefixSum = new Array(n + 1).fill(0);
13
        for (let i = 0; i < n; i++) {
14
            prefixSum[i + 1] = prefixSum[i] + nums[i];
15
        }
16
17
        const totalSum = prefixSum[n];
18
        let maxDiff = -Infinity; 
19
20
        for (let i = 1; i < n; i++) {
21
            const leftSum = prefixSum[i];
22
            const rightSum = totalSum - leftSum;
23
            maxDiff = Math.max(maxDiff, Math.abs(leftSum - rightSum));
24
        }
25
26
        results.push(maxDiff);
27
    }
28
29
    results.forEach(result => console.log(result));
30
}
31
32
process.stdin.resume();
33
process.stdin.setEncoding(""ascii"");
34
let _input = """";
35
process.stdin.on(""data"", function (input) {
36
    _input += input;
37
});
38
39
process.stdin.on(""end"", function () {
40
    processData(_input);
41
});
42",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834546
1387834552,1_ashwarya,unknown,unknown,"1
def max_difference(t, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, nums = case
6
        total_sum = sum(nums)
7
        prefix_sum = 0
8
        max_diff = 0
9
        10
        11
        for i in range(n - 1): 
12
            prefix_sum += nums[i]
13
            suffix_sum = total_sum - prefix_sum
14
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
15
        16
        results.append(max_diff)
17
    18
    return results
19
20
t = int(input())
21
test_cases = []
22
for _ in range(t):
23
    n = int(input())
24
    nums = list(map(int, input().split()))
25
    test_cases.append((n, nums))
26
27
results = max_difference(t, test_cases)
28
29
for result in results:
30
    print(result)
31",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834552
1387834549,omg40787,unknown,unknown,"1
def max_abs_difference(nums):
2
    n = len(nums)
3
    left_sum = [0] * n
4
    right_sum = [0] * n
5
6
    left_sum[0] = nums[0]
7
    right_sum[-1] = nums[-1]
8
9
    for i in range(1, n):
10
        left_sum[i] = left_sum[i - 1] + nums[i]
11
12
    for i in range(n - 2, -1, -1):
13
        right_sum[i] = right_sum[i + 1] + nums[i]
14
15
    max_difference = 0
16
    for i in range(n - 1):
17
        difference = abs(left_sum[i] - right_sum[i + 1])
18
        max_difference = max(max_difference, difference)
19
20
    return max_difference
21
22
def main():
23
    import sys
24
    input = sys.stdin.read
25
    data = input().split()
26
27
    t = int(data[0])
28
    index = 1
29
    results = []
30
31
    for _ in range(t):
32
        n = int(data[index])
33
        nums = list(map(int, data[index + 1:index + 1 + n]))
34
        index += 1 + n
35
        result = max_abs_difference(nums)
36
        results.append(result)
37
38
    for result in results:
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834549
1387834533,swathiharish2349,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int solution(vector<int>& arr, int sum, int n){
9
    int ans=0;
10
    int prefixSum=0;
11
    int rem=sum;
12
    for(int i=0; i<n-1; i++){
13
        prefixSum+=arr[i];
14
        rem-=arr[i];
15
        ans=max(ans, abs(rem-prefixSum));
16
    }
17
    return ans;
18
}
19
20
int main() {
21
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
22
    int t;
23
    cin>>t;
24
    while(t--){
25
        int n;
26
        cin>>n;
27
        vector<int> arr(n);
28
        int sum=0;
29
        for(int i=0; i<n; i++){
30
            cin>>arr[i];
31
            sum+=arr[i];
32
        }
33
        34
        int ans = solution(arr, sum, n);
35
        cout<<ans<<endl;
36
    }
37
    return 0;
38
}
39",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834533
1387834538,h1032221720,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
#include <cmath>
5
using namespace std;
6
7
void solve() {
8
    int T;
9
    cin >> T; 
10
11
    while (T--) {
12
        int N, K;
13
        cin >> N >> K; 
14
15
        vector<int> energy(N);
16
        long long totalEnergy = 0;
17
18
        for (int i = 0; i < N; i++) {
19
            cin >> energy[i];
20
            totalEnergy += energy[i];
21
        }
22
23
        if (totalEnergy % N != 0) {
24
            cout << -1 << endl;
25
            continue;
26
        }
27
28
        int target = totalEnergy / N; 
29
        long long operations = 0, imbalance = 0;
30
31
        for (int i = 0; i < N; i++) {
32
            imbalance += (energy[i] - target);
33
            if (imbalance % K != 0) {
34
                operations = -1;
35
                break;
36
            }
37
            operations += abs(imbalance) / K;
38
        }
39
40
        cout << operations << endl;
41
    }
42
}
43
44
int main() {
45
    solve();
46
    return 0;
47
}
48",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387834538
1387834542,thepandeysaurav,unknown,unknown,"1
def max_absolute_difference(nums):
2
    n = len(nums)
3
    4
    prefix_sum = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]
7
    8
    max_diff = 0
9
    10
    for i in range(1, n):
11
        left_sum = prefix_sum[i]
12
        right_sum = prefix_sum[n] - prefix_sum[i]
13
        current_diff = abs(left_sum - right_sum)
14
15
        if current_diff > max_diff:
16
            max_diff = current_diff
17
    18
    return max_diff
19
20
def main():
21
    import sys
22
    input = sys.stdin.read
23
    data = input().split()
24
    25
    idx = 0
26
    t = int(data[idx])
27
    idx += 1
28
    29
    for _ in range(t):
30
        n = int(data[idx])
31
        idx += 1
32
        nums = list(map(int, data[idx:idx + n]))
33
        idx += n
34
        35
        result = max_absolute_difference(nums)
36
        print(result)
37
38
if __name__ == ""__main__"":
39
    main()",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834542
1387834528,pandeysneha3004,unknown,unknown,"1
def max_absolute_difference(nums):
2
    """"""
3
    Calculates the maximum absolute difference between sums of two contiguous subarrays.
4
5
    Args:
6
        nums: A list of integers.
7
8
    Returns:
9
        The maximum absolute difference between the sums of two subarrays.
10
    """"""
11
    n = len(nums)
12
    prefix_sum = [0] * (n + 1)
13
14
    # Calculate prefix sums
15
    for i in range(1, n + 1):
16
        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
17
18
    max_diff = 0
19
    for i in range(1, n):
20
        left_sum = prefix_sum[i]
21
        right_sum = prefix_sum[n] - prefix_sum[i]
22
        max_diff = max(max_diff, abs(left_sum - right_sum))
23
24
    return max_diff
25
26
if __name__ == ""__main__"":  # Fixed the incorrect underscores
27
    t = int(input())
28
    for _ in range(t):
29
        n = int(input())
30
        nums = list(map(int, input().split()))
31
        result = max_absolute_difference(nums)
32
        print(result)  # Retyped this line to remove any non-ASCII characters
33",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387834528
