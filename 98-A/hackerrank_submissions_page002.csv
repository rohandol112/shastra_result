submission_id,username,problem_name,language,code,page,url
1387835501,devanshudandeka1,unknown,unknown,"1
def max_partition_difference(nums):
2
    n = len(nums)
3
    4
    # Calculate the total sum of the array
5
    total_sum = sum(nums)
6
    7
    # Initialize variables to track the prefix sum and maximum difference
8
    left_sum = 0
9
    max_diff = float('-inf')
10
    11
    # Iterate through the array and compute the partition differences
12
    for i in range(n - 1):  # We avoid the last partition (whole array as one subarray)
13
        left_sum += nums[i]  # Sum of the left subarray
14
        right_sum = total_sum - left_sum  # Sum of the right subarray
15
        diff = abs(left_sum - right_sum)  # Absolute difference
16
        max_diff = max(max_diff, diff)  # Track the maximum absolute difference
17
    18
    return max_diff
19
20
# Reading input and running the test cases
21
t = int(input())  # Number of test cases
22
for _ in range(t):
23
    n = int(input())  # Size of the array
24
    nums = list(map(int, input().split()))  # The array of numbers
25
    print(max_partition_difference(nums))
26",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387835501
1387835580,kharodnishad,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    ptr = 0
6
    T = int(input[ptr])
7
    ptr += 1
8
    for _ in range(T):
9
        N = int(input[ptr])
10
        K = int(input[ptr+1])
11
        ptr += 2
12
        energy = list(map(int, input[ptr:ptr+N]))
13
        ptr += N
14
        15
        total = sum(energy)
16
        if total % N != 0:
17
            print(-1)
18
            continue
19
        avg = total // N
20
        delta = [e - avg for e in energy]
21
        22
       23
        possible = True
24
        for d in delta:
25
            if d % K != 0:
26
                possible = False
27
                break
28
        if not possible:
29
            print(-1)
30
            continue
31
        32
    33
        s = []
34
        current = 0
35
        for d in delta:
36
            current += d // K
37
            s.append(current)
38
        39
       40
        max_neg_s = max(-si for si in s)
41
        sum_s = sum(s)
42
        total_ops = N * max_neg_s + sum_s
43
        print(total_ops)
44
45
if _name_ == '_main_':
46
    main()",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835580
1387835687,fauzanmujawar971,unknown,unknown,"1
def product_except_self(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, values = t
6
        prefix = [1] * n
7
        suffix = [1] * n
8
        result = [0] * n
9
        10
        # Compute prefix products
11
        for i in range(1, n):
12
            prefix[i] = prefix[i - 1] * values[i - 1]
13
        14
        # Compute suffix products
15
        for i in range(n - 2, -1, -1):
16
            suffix[i] = suffix[i + 1] * values[i + 1]
17
        18
        # Compute result using prefix and suffix
19
        for i in range(n):
20
            result[i] = prefix[i] * suffix[i]
21
        22
        results.append(result)
23
    24
    return results
25
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n = int(input())
33
    values = list(map(int, input().split()))
34
    test_cases.append((n, values))
35
36
# Compute results
37
results = product_except_self(test_cases)
38
39
# Output results
40
for res in results:
41
    print("" "".join(map(str, res)))",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387835687
1387835450,devanshudandeka1,unknown,unknown,"1
def max_partition_difference(arr):
2
    total_sum = sum(arr)
3
    left_sum = 0
4
    max_diff = float('-inf')  # Start with the smallest possible value
5
    6
    # Iterate through the array and calculate the partition differences
7
    for i in range(len(arr) - 1):  # We avoid the last partition (whole array as one subarray)
8
        left_sum += arr[i]
9
        right_sum = total_sum - left_sum
10
        diff = abs(left_sum - right_sum)
11
        max_diff = max(max_diff, diff)
12
    13
    return max_diff
14
15
# Example usage:
16
arr = [2, 3, 4]
17
print(max_partition_difference(arr))  # Output: 5
18",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387835450
1387835476,abhig3340,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N, K = map(int, input().split())
5
    energy_levels = list(map(int, input().split()))
6
7
    total_energy = sum(energy_levels)
8
9
    if total_energy % N != 0:
10
        print(-1)
11
        continue
12
    13
    target_energy = total_energy // N
14
    current_balance = 0
15
    total_operations = 0
16
17
    for i in range(N):
18
        difference = energy_levels[i] - target_energy
19
        current_balance += difference
20
21
        if current_balance % K != 0:
22
            print(-1)
23
            break
24
        25
        total_operations += abs(current_balance) // K
26
    else:
27
        print(total_operations)
28",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835476
1387835478,unborntadpole,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        n = int(input())
5
        l = list(map(int, input().split()))
6
        max_diff = 0
7
        dict = {
8
            9
        }
10
        for secondArr in range(1,n):
11
            diff = 0
12
            l1 = l[:secondArr]
13
            l2 = l[secondArr:]
14
            diff = abs(sum(l1) - sum(l2))
15
            max_diff = max(diff,max_diff)
16
        print(max_diff)
17
            18
            19
solve()",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387835478
1387835363,swathiharish2349,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int solution(vector<int>& arr, int sum, int k){
9
    int n = arr.size();
10
    11
    if(sum%n!=0) return -1;
12
    13
    int avg=sum/n;
14
    15
    int flags=0;
16
    int op=0;
17
    int iteration=0;
18
    while(flags<n){
19
        iteration++;
20
        for(int i=0; i<n; i++){
21
            if(arr[i]>avg){
22
                arr[i]-=k;
23
24
                if(i+1<n) arr[i+1]+=k;
25
                else arr[0]+=k;
26
27
                op++;
28
            }
29
            if(arr[i]==avg) flags++;
30
            // cout<<i<<"" ""<<flags<<endl;
31
        }
32
        if(iteration>n) return -1;
33
    }
34
    35
    return op;
36
    37
}
38
39
int main() {
40
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
41
    int t;
42
    cin>>t;
43
    while(t--){
44
        int n,k;
45
        cin>>n>>k;
46
        vector<int> arr(n);
47
        long long sum=0;
48
        49
        for(int i=0; i<n ;i++){
50
            cin>>arr[i];
51
            sum+=arr[i];
52
        }
53
        54
        int ans=solution(arr, sum, k);
55
        cout<<ans<<endl;
56
    }
57
    return 0;
58
}
59",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835363
1387835421,siddhibsawant221,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
    Scanner scanner = new Scanner(System.in);
9
10
        int T = scanner.nextInt(); // Read number of test cases
11
        while (T-- > 0) {
12
            int N = scanner.nextInt(); // Number of power stations
13
            int K = scanner.nextInt(); // Energy transfer units per operation
14
15
            int[] energy = new int[N];
16
            long totalEnergy = 0;
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextInt(); // Energy at each station
19
                totalEnergy += energy[i];
20
            }
21
22
            // If the total energy is not divisible by N, return -1 (equalization is impossible)
23
            if (totalEnergy % N != 0) {
24
                System.out.println(-1);
25
                continue;
26
            }
27
28
            // Calculate the target energy for each station
29
            long targetEnergy = totalEnergy / N;
30
            long totalSurplus = 0;
31
            long totalDeficit = 0;
32
33
            // Calculate surplus and deficit
34
            for (int i = 0; i < N; i++) {
35
                long diff = energy[i] - targetEnergy;
36
                if (diff > 0) {
37
                    totalSurplus += diff;
38
                } else if (diff < 0) {
39
                    totalDeficit -= diff; // Deficit is positive when the value is negative
40
                }
41
            }
42
43
            // If total surplus or total deficit is not divisible by K, return -1
44
            if (totalSurplus % K != 0 || totalDeficit % K != 0) {
45
                System.out.println(-1);
46
            } else {
47
                // The minimum number of operations is the total surplus divided by K
48
                System.out.println(totalSurplus / K);
49
            }
50
        }
51
52
        scanner.close();
53
    }
54
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835421
1387835428,abhig3340,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N, K = map(int, input().split())
5
    energy_levels = list(map(int, input().split()))
6
7
    total_energy = sum(energy_levels)
8
9
    if total_energy % N != 0:
10
        print(-1)
11
        continue
12
    13
    target_energy = total_energy // N
14
    total_operations = 0
15
    current_balance = 0
16
17
    for i in range(N):
18
        difference = energy_levels[i] - target_energy
19
        current_balance += difference
20
        total_operations += abs(current_balance) // K
21
22
    print(total_operations)
23",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835428
1387835361,1_ashwarya,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    idx = 0  
7
    T = int(data[idx])  
8
    idx += 1  
9
    results = []
10
    11
    for _ in range(T):
12
        N, K = map(int, data[idx].split())  
13
        idx += 1
14
        energy = list(map(int, data[idx].split()))
15
        idx += 1
16
        17
        total_energy = sum(energy)
18
        19
        if total_energy % N != 0:
20
            results.append(-1)
21
            continue
22
        23
        target = total_energy // N
24
        operations = 0
25
        current_balance = 0
26
        27
        for i in range(N):
28
            diff = energy[i] - target
29
            current_balance += diff
30
            if current_balance % K != 0:
31
                operations = -1
32
                break
33
            operations += abs(current_balance // K)
34
        35
        results.append(operations)
36
    37
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
38
39
solve()",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387835361
