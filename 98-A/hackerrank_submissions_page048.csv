submission_id,username,problem_name,language,code,page,url
1387833852,vivaankotian1,unknown,unknown,"1
def compute_product_excluding_self(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, values = case
5
        total_product = 1
6
        zero_count = values.count(0)
7
8
        if zero_count > 1:
9
            results.append([0] * n)
10
        elif zero_count == 1:
11
            zero_index = values.index(0)
12
            product_except_zero = 1
13
            for i in range(n):
14
                if i != zero_index:
15
                    product_except_zero *= values[i]
16
            result = [0] * n
17
            result[zero_index] = product_except_zero
18
            results.append(result)
19
        else:
20
            for value in values:
21
                total_product *= value
22
            results.append([total_product // value for value in values])
23
24
    return results
25
26
T = int(input())
27
test_cases = [(int(input()), list(map(int, input().split()))) for _ in range(T)]
28
results = compute_product_excluding_self(test_cases)
29
for result in results:
30
    print(*result)",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833852
1387833856,harshpal0050,unknown,unknown,"1
def max_absolute_difference(test_cases):
2
    results = []
3
    4
    for t in test_cases:
5
        n, nums = t
6
        total_sum = sum(nums)
7
        prefix_sum = 0
8
        max_diff = 0
9
        10
        # Iterate through possible partitions
11
        for i in range(n - 1):  # Last partition is invalid (requires two non-empty subarrays)
12
            prefix_sum += nums[i]
13
            suffix_sum = total_sum - prefix_sum
14
            max_diff = max(max_diff, abs(prefix_sum - suffix_sum))
15
        16
        results.append(max_diff)
17
    18
    return results
19
20
21
# Input handling
22
t = int(input())
23
test_cases = []
24
25
for _ in range(t):
26
    n = int(input())
27
    nums = list(map(int, input().split()))
28
    test_cases.append((n, nums))
29
30
# Compute results
31
results = max_absolute_difference(test_cases)
32
33
# Output results
34
for res in results:
35
    print(res)",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833856
1387833857,h1032220278,unknown,unknown,"1
def readinput():
2
    return list(map(int, input().split()))
3
        4
5
def calproduct(values):
6
    res=[]
7
    product=1
8
    for i in range(len(values)):
9
        product*=values[i]
10
    for j in range(len(values)):
11
        res.append(product//values[j])
12
    return res
13
testcases=int(input())
14
for i in range(testcases):
15
    n=int(input())
16
    values=readinput()
17
    result = calproduct(values)
18
    print("" "".join(map(str, result)))
19
    20
    21
                   ",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833857
1387833846,tiwarishashank14,unknown,unknown,"1
import java.util.Scanner;
2
3
public class EnergyEqualizer {
4
5
    public static void solve() {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();  // Read number of test cases
8
9
        while (T-- > 0) {
10
            int N = scanner.nextInt();  // Number of power stations
11
            int K = scanner.nextInt();  // Transfer units in one operation
12
            13
            long[] energy = new long[N];
14
            long totalEnergy = 0;
15
16
            // Read energy values and compute total energy
17
            for (int i = 0; i < N; i++) {
18
                energy[i] = scanner.nextLong();
19
                totalEnergy += energy[i];
20
            }
21
22
            // Check if equalizing is possible (total energy must be divisible by N)
23
            if (totalEnergy % N != 0) {
24
                System.out.println(""-1"");
25
                continue;  // Skip to the next test case if it's impossible
26
            }
27
28
            long targetEnergy = totalEnergy / N;
29
            long operations = 0;
30
            long balance = 0;
31
            boolean possible = true;  // To track if balancing is possible
32
33
            // Iterate over the energy array to compute the minimum operations
34
            for (int i = 0; i < N; i++) {
35
                balance += energy[i] - targetEnergy;
36
37
                // Check if the balance is divisible by K
38
                if (balance % K != 0) {
39
                    possible = false;  // Impossible if balance is not divisible by K
40
                    break;
41
                }
42
43
                // Add the absolute value of the balance divided by K to operations count
44
                operations += Math.abs(balance) / K;
45
            }
46
47
            if (possible) {
48
                System.out.println(operations);  // Print the number of operations if it's possible
49
            } else {
50
                System.out.println(""-1"");  // Print -1 if balancing is not possible
51
            }
52
        }
53
        scanner.close();  // Close the scanner
54
    }
55
56
    public static void main(String[] args) {
57
        solve();  // Call the solve function to process the input and solve the problem
58
    }
59
}
60",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833846
1387833851,h1032220703,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        int T = scanner.nextInt();  // Number of test cases
8
        9
        for (int t = 0; t < T; t++) {
10
            int n = scanner.nextInt();  // Number of nodes
11
            int[] values = new int[n];
12
            13
            // Reading the values of the nodes
14
            for (int i = 0; i < n; i++) {
15
                values[i] = scanner.nextInt();
16
            }
17
            18
            // Result array to store the final result
19
            int[] result = new int[n];
20
            21
            // Compute left product and store it in the result array
22
            int left = 1;
23
            for (int i = 0; i < n; i++) {
24
                result[i] = left;
25
                left *= values[i];
26
            }
27
            28
            // Compute right product and update the result array
29
            int right = 1;
30
            for (int i = n - 1; i >= 0; i--) {
31
                result[i] *= right;
32
                right *= values[i];
33
            }
34
            35
            // Print the result array
36
            for (int i = 0; i < n; i++) {
37
                System.out.print(result[i] + "" "");
38
            }
39
            System.out.println();
40
        }
41
        42
        scanner.close();
43
    }
44
}
45",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833851
1387833850,arshiyak572,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def max_absolute_difference(t, test_cases):
3
    results = []
4
    for i in range(t):
5
        n, nums = test_cases[i]
6
        7
        # Compute the total sum of the array
8
        total_sum = sum(nums)
9
        10
        # Initialize the prefix sum
11
        prefix_sum = 0
12
        max_diff = 0
13
        14
        # Iterate through the array to calculate max absolute difference
15
        for j in range(n - 1):
16
            prefix_sum += nums[j]  # Update prefix sum with current element
17
            # Calculate the sum of the second subarray
18
            second_subarray_sum = total_sum - prefix_sum
19
            # Calculate the absolute difference
20
            max_diff = max(max_diff, abs(prefix_sum - second_subarray_sum))
21
        22
        results.append(max_diff)
23
    24
    return results
25
26
# Read inputs
27
t = int(input())  # Number of test cases
28
test_cases = []
29
for _ in range(t):
30
    n = int(input())  # Size of the array
31
    nums = list(map(int, input().split()))  # Array elements
32
    test_cases.append((n, nums))
33
34
# Get the result
35
results = max_absolute_difference(t, test_cases)
36
37
# Print the results
38
for result in results:
39
    print(result)
40",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/optimizing-the-difference-of-subarray-sums/submissions/code/1387833850
1387833842,vishal986958,unknown,unknown,"1
def min_operations_to_equalize_energy(n, k, energy):
2
    total_energy = sum(energy)
3
    if total_energy % n != 0:
4
        return -1
5
    6
    target_energy = total_energy // n
7
    ops = 0
8
    9
    for i in range(n):
10
        energy_diff = energy[i] - target_energy
11
        if energy_diff % k != 0:
12
            return -1
13
        ops += abs(energy_diff // k)
14
    15
    return ops // 2
16
17
# Read number of test cases
18
T = int(input())
19
for _ in range(T):
20
    n, k = map(int, input().split())
21
    energy = list(map(int, input().split()))
22
    result = min_operations_to_equalize_energy(n, k, energy)
23
    print(result)
24",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833842
1387833843,h1032220149,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    4
    for _ in range(T):
5
        N, K = map(int, input().split())  # N is the number of stations, K is the energy per move
6
        energy = list(map(int, input().split()))  # Energy in each station
7
        8
        total_energy = sum(energy)
9
        10
        # If the total energy is not divisible by N, it's impossible
11
        if total_energy % N != 0:
12
            print(-1)
13
            continue
14
        15
        target_energy = total_energy // N
16
        operations = 0
17
        balance = 0  # This keeps track of the ""extra"" energy or deficit
18
        19
        # Try to balance the energy across the stations
20
        for i in range(N):
21
            # The difference from the target energy at this station
22
            diff = energy[i] - target_energy
23
            balance += diff
24
            # The balance must be divisible by K, otherwise it's impossible to transfer energy in multiples of K
25
            if balance % K != 0:
26
                operations = -1
27
                break
28
            # Count how many moves are needed (each move transfers K units)
29
            operations += abs(balance // K)
30
        31
        print(operations)
32
33
# Read input and process the test cases
34
solve()",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/minimum-operations-to-equalize-energy/submissions/code/1387833843
1387833844,singhark94,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
vector<long long> productExceptSelf(const vector<int>& values, int n) {
6
    vector<long long> result(n, 1);
7
    8
    long long left = 1;
9
    for (int i = 0; i < n; ++i) {
10
        result[i] = left;
11
        left *= values[i];
12
    }
13
    14
    long long right = 1;
15
    for (int i = n - 1; i >= 0; --i) {
16
        result[i] *= right;
17
        right *= values[i];
18
    }
19
    20
    return result;
21
}
22
23
int main() {
24
    int T;
25
    cin >> T;
26
    27
    while (T--) {
28
        int n;
29
        cin >> n;
30
        vector<int> values(n);
31
        32
        for (int i = 0; i < n; ++i) {
33
            cin >> values[i];
34
        }
35
        36
        vector<long long> result = productExceptSelf(values, n);
37
        38
        for (int i = 0; i < n; ++i) {
39
            cout << result[i] << (i == n - 1 ? ""\n"" : "" "");
40
        }
41
    }
42
    43
    return 0;
44
}
45
46",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833844
1387833841,sonamyadav7208,unknown,unknown,"1
def solve():
2
    T = int(input())  # number of test cases
3
    for _ in range(T):
4
        n = int(input())  # number of nodes in the network
5
        values = list(map(int, input().split()))  # list of node values
6
7
        # Arrays to store the left and right products
8
        left = [1] * n
9
        right = [1] * n
10
        result = [0] * n
11
12
        # Fill the left array
13
        for i in range(1, n):
14
            left[i] = left[i - 1] * values[i - 1]
15
16
        # Fill the right array
17
        for i in range(n - 2, -1, -1):
18
            right[i] = right[i + 1] * values[i + 1]
19
20
        # Calculate result by multiplying corresponding left and right products
21
        for i in range(n):
22
            result[i] = left[i] * right[i]
23
24
        print("" "".join(map(str, result)))
25
26
# Call the function to run the solution
27
solve()",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-8-a/challenges/product-distribution-3/submissions/code/1387833841
